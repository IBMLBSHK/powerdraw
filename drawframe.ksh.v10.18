#!/usr/bin/ksh93
#-----------------------------------------------------------------------------------------
#    The drawframe script is provided in source format and are provided "as is" with
#    no warranties or support provided outside of what is detailed within the IBM SOW.
#    All deliverables are Type II Materials.
#
# Name:		drawframe.ksh
#
# Function: 	This script collects managedsystem configuration data and creates HTML and SVG
#               files that are displayed using a browser.
#
# Input:        Script input parameters.
#                  drawframe -f [capture[,draw]|[drawnetwork][,drawstorage][,drawvnic][,drawall] -h hmcName [-u hmcUserid] [-i inputCaptureFile]
#                     [-o outputFileName] [-m managedSystemList] [-l partitionList] [-a userAttributeFiles]
#                  optional parms for each type of invocation
#                  [-n]                         noprompt 
#                  [-d debugRunID]              Process data associated with debugRunID
#                  [-x postScript]              Postscript code to run on exit that gets passed RUNID 
#
#               The server definition file is in the following format (with example values):
#
#
# Output:       A log file named: work_area/RUNID_profilename.log
# 
#  Return Codes:
#               RC_BADPARM=1                      Completed un-successfully
#               RC_MISSINGINCLUDE=2               Missing include file specified in USERDATAFILES
#               RC_USEREXIT=99                    User exit
#
#
#-----------------------------------------------------------------------------------------
#
# CHANGE ACTIVITY
# Date:       Name         Comment
# ----------  ------------ --------------------------------------------------------
# 09/27/2016  M Gregor   v5.0      First Release. 
# 10/16/2016  M Gregor   v5.1      Integrate draw capability. 
# 10/17/2016  M Gregor   v5.2      Performance improvements. 
# 10/19/2016  M Gregor   v5.3      Fix addpopup rectangle sizing. 
# 10/20/2016  M Gregor   v5.4      Generate object svg files so they can be opened in window when clicked. 
# 10/23/2016  M Gregor   v5.5      Remove control channel PVIDs from PVID list. 
# 10/29/2016  M Gregor   v5.6      Update internal data structures. 
# 11/02/2016  M Gregor   v5.7      Add user defined attributes. 
# 11/03/2016  M Gregor   v5.8      Remove control channel PVID for space. 
# 11/04/2016  M Gregor   v5.9      Provide support for user defined data. 
# 11/07/2016  M Gregor   v5.10     Stagger client partitions.
# 11/08/2016  M Gregor   v5.11     Pick up en devices.
# 11/09/2016  M Gregor   v5.12     Add storage view.
# 11/12/2016  M Gregor   v5.13     Add vscsi.
# 11/14/2016  M Gregor   v5.14     Change and sort vscsi.
# 11/15/2016  M Gregor   v5.15     Add support for partitionlist and naming output files.
# 11/16/2016  M Gregor   v5.16     Add -f command support.
# 11/20/2016  M Gregor   v5.17     Change requirement on -o outputName to be required.
# 11/28/2016  M Gregor   v5.18     Move customer graphic option to user data file.
# 11/29/2016  M Gregor   v5.19     Fix issues with VIO SRIOV backed ethernet devices.
# 11/30/2016  M Gregor   v5.20     Add vNIC graphics view.
# 11/05/2016  M Gregor   v5.21     Add draw_userdata directory.
#                                  Fix issue specifying -l lpars in different managed systems when specifying any draw command and no managedsystems on cmd line.
#                                  Display and use shorthand version of location codes.
#                                  Fix legend issue when running -f drawstorage and add legend for VNIC.
#                                  Adjusted client partition size to accommodate partition names.
#                                  Expanded SEA VLAN device spacing.
#                                  Display SRIOV physical port current capacity on VNIC view.
# 11/06/2016  M Gregor   v5.22     Add missing vswitch if not part of SEA. 
#                                  Fix creation date issue. 
# 11/08/2016  M Gregor   v5.23     Enhance STORAGE view for VSCSI. 
# 11/09/2016  M Gregor   v5.24     Add vNIC to NETWORK view for clients. 
# 11/10/2016  M Gregor   v5.25     version for vNIC.
# 12/21/2016  M Gregor   v5.26     Create variables for colors.
# 01/04/2017  M Gregor   v5.27     Allow for multiple connector colors.
# 01/07/2017  M Gregor   v5.28     Add SRIOVLOGPORT's to network and vnic views if assigned to clients.
# 01/09/2017  M Gregor   v5.29     Add switch name when testing for used vlans.
# 01/13/2017  M Gregor   v5.30     Fix issue with blanks in partition names.
# 01/16/2017  M Gregor   v5.31     Fix issue client partition having more physical slots than virtual.
# 01/19/2017  M Gregor   v5.32     Selective display of client ETH, FC, and IOSLOT.
# 01/19/2017  M Gregor   v5.33     Define USERDATA, GRAPHIC, and COLOR keywords for userdata file.
# 01/31/2017  M Gregor   v5.34     Fix potential overlapping of connectors.
# 02/07/2017  M Gregor   v5.35     Performance improvements.
# 07/08/2017  M Gregor   v5.36     Fix issue with grep (sub)expression.
# 07/25/2017  M Gregor   v5.37     Fix handling detailed data associated with a vhost entry and multiple disks.
# 08/10/2017  M Gregor   v5.38     Fix sed issue where -f script file is over 999 lines.
# 12/24/2017  M Gregor   v5.39     Fix issues with long lpar names.
#                                  Resolve issue with lshwres --rsubtype vswitch and older HMC.
#                                  Resolve issue with slashes being in partition names.
# 12/26/2017  M Gregor   v5.40     Fix issue when processing -l partitionlist without -m managedsystem.
# 12/26/2017  M Gregor   v5.41     Add ability to launch url by specifying a new dataType in userdata.
# 12/28/2017  M Gregor   v5.42     Resolve issue drawing additional VIO physical ethernet ports when SLOTCHILDREN attributelist is not set.
# 12/28/2017  M Gregor   v5.43     Add ability to define reference to CPT defined data.
# 01/03/2018  M Gregor   v5.44     Retrieve additional virtualio data for eth devices and display client devices if available.
# 01/05/2018  M Gregor   v5.45     Retrieve additional lsmap data for fcs devices and display client devices if available.
# 01/08/2018  M Gregor   v5.46     Retrieve additional eth, scsi, and fc data on lshwres to display in client devices if available.
# 01/16/2018  M Gregor   v5.47     Add -e option to turn off collecting extended attributes for virtualio eth, scsi, fc, vnic, and vnicbkdev because it is slow.
# 01/24/2018  M Gregor   v5.48     Resolve sort issue when record length is longer than allowed max.
#                                  Add port_vlan_id to location code when displaying virtual ethernet adapters 
# 01/24/2018  M Gregor   v5.49     Add switch names and fcs devices based on the VIO or client side being longer.
# 01/25/2018  M Gregor   v5.50     Add global URL support in USERDATA for CLIENTLPAR and VIOLPAR.
# 01/31/2018  M Gregor   v5.51     If -l partitionlist only draw VIO servers used by partitions in list.
# 02/08/2018  M Gregor   v5.52     Fix issue displaying VIO info instead of client VFC and VSCSI device information in STORAGE or ALL view.
#                                  Fix issue fitting client partition names in rectangle in STORAGE/ALL view on VIO servers when VSCSI mappings exist.
# 01/11/2019  M Gregor   v6.0      Fix issue using grep -p on linux.
# 06/20/2019  M Gregor   v6.1      Fix issue with using -z to determine if variable set.
# 07/16/2019  M Gregor   v6.2      Fix some issues with SRIOV and VNIC.
# 07/18/2019  M Gregor   v6.3      Resolve issue processing VIO devices and not getting last device in list during capture.
# 07/28/2019  M Gregor   v6.4      Add -s sshOptions.
# 07/31/2019  M Gregor   v6.5      Suppport SRIOV roce devices.
# 04/11/2020  M Gregor   v7.0      Change active port line on vnic backing devices to green.
# 10/22/2020  M Gregor   v7.1      Filter out HSCL350B user authority errors when processing ELEMENT_ISCSI because the HMC userid may not have authority.
# 03/09/2021  M Gregor   v9.0      Major release and now part of PowerVM Provisioning Toolkit.
# 08/26/2021  M Gregor  v10.0      Major release.
# 10/10/2022  M Gregor  v10.15     Add ability to highlight/onmouseover and unhighlight/onmouseout for connectors.
# 11/08/2022  M Gregor  v10.16     Fix issue with network view when SEA is not using real vlans and vlans that are not bridged.
# 12/01/2022  M Gregor  v10.17     Add additional detail for SRIOV logical ports.
#                                  Add os_device_name for vnic devices if available from extended data.
# 01/30/2023  M Gregor  v10.18     Fix issue when physportlabelFile does not exist.
#                                  Fix missing ethernet connectors when there are multiple vswitches.
#                                  Add additional line to vhost entries when multiple connections to iscsi or vscsi.
#-----------------------------------------------------------------------------------------
#
#################################################
VERSION="v10.18"
#################################################
#	GLOBALS
#################################################
RC=0
PROGRAM=${0}
USAGE="${PROGRAM} -f capture,draw -o outFileName [-h hmcName] [-u hmcUserid] [-i inputCaptureFile] [-m managedSystemList] [-l partitionList] [-a userDataFiles] [-c htmlRef] [-n] [-e] [-x postscript]"
# directory for files
DRAW_PROFILES="draw_profiles/"
typeset -Z8 CURRENTPID="$$"
#RUNID="$(date '+%y%m%d%H%M%S')-${CURRENTPID}"
RUNID="$(date '+%y%m%d%H%M%S')"
WORK_AREA="work_area/${RUNID}_"
DRAW_GRAPHICS="draw_graphics/"
DRAW_CAPTURES="draw_captures/"
DRAW_USERDATA="draw_userdata/"
LOG_FILE="${WORK_AREA}drawframe.log" 
SUMMARYFILE="${WORK_AREA}draw_summary"
ALLUSERDATA="${WORK_AREA}alluserdata.dat"
configFile="${WORK_AREA}PowerDraw.out"
LOG="logit L"
LOGBOTH="logit S"
PGMNAME=""
DEBUG=0
INCLUDEfiles=""
typeset -u RUNIT="Z"
DRAWOPS=""
DRAWOPSSEP=""
setByVnic=0
EXTENDEDATTR=1
SSHOPTIONS=""

# arrays used to store detailed error info
typeset -A SUCCESS_array
typeset -A WARNING_array
typeset -A ERROR_array

# globals for build profile data
DRAWPROFILE=""
MANAGEDSYSTEMS=""
PARTITIONLIST=""
CPTHTMLREF=""
OUTPUTNAME=""
HMCNAME=""
HMCUSER=""
USERDATAFILES=""
POSTSCRIPT=""
CONFIGINPUTFILE=""
REALCONFIGINPUTFILE=""
POSTSCRIPTRC=0
CAPABILITIESfile=""
CAPABILITIES_SRIOV="sriov_capable"

# colors
COLOR_CLIENT_PARTITION="antiquewhite"
COLOR_VIO_PARTITION="antiquewhite"
COLOR_USER_DATA="steelblue"
# IOSLOT
COLOR_IOSLOT="lightyellow"
#network
COLOR_ETHERNET_PHYSPORT="#0088cc"
COLOR_ETHERCHANNEL="#00aaff"
COLOR_SEA="#4dc3ff"
COLOR_VLAN="#80d4ff"
COLOR_VIRTUAL_ETHERNET="#b3e6ff"
COLOR_CONTROL_CHANNEL="#e6f7ff"
COLOR_UNBRIDGED_VLANS="black"
#storage
COLOR_FC_PHYSPORT="#34cb34"
COLOR_ISCSI_PHYSPORT="#ffd9b3"
COLOR_VIRTUAL_FC="#d6f5d6"
COLOR_VIRTUAL_SCSI="#ff9933"
COLOR_CLIENT_VHOST="#ffd9b3"
#vnic
COLOR_SRIOV_ADAPTER="#996633"
COLOR_SRIOV_PHYSPORT="#c68c53"
COLOR_SRIOV_LOGPORT="#d9b38c"
COLOR_VNIC_BKDEV="#ecd9c6"
COLOR_VIRTUAL_VNIC="#f9f2ec"
# connectors can support multiple colors being colon(:) separated
COLOR_VSWITCH_CONNECTOR="black"
COLOR_VSWITCH_INTERNAL_CONNECTOR="black"
COLOR_FC_CONNECTOR="black"
COLOR_ISCSI_CONNECTOR="black"
COLOR_VNIC_CONNECTOR="black"

# general ARRAYS

# Internal defines used for userdata files
PDRAW_COLOR="COLOR"    
PDRAW_GRAPHIC="GRAPHIC"
PDRAW_KEYVALUE="KEYVALUE"
PDRAW_HTML="HTML"
# Internal defines used for writing data
PDRAW_CREATIONDATE="CREATIONDATE"
PDRAW_HMC="HMC"    
PDRAW_MANAGEDSYSTEM="MANAGEDSYSTEM"
PDRAW_CAPABILITIES="CAPABILITIES"    
PDRAW_NETWORK="NETWORK"    
PDRAW_STORAGE="STORAGE"    
PDRAW_VNIC="VNIC"    
PDRAW_VSWITCH="VSWITCH"    
PDRAW_VIRTUALIO="VIRTUALIO"    
PDRAW_VIRTUALFC="VIRTUALFC"    
PDRAW_VIRTUALSCSI="VIRTUALSCSI"    
PDRAW_VIRTUALVNIC="VIRTUALVNIC"    
PDRAW_VIRTUALVNICBKDEV="VIRTUALVNICBKDEV"    
PDRAW_PHYSICALIO="PHYSICALIO"    
PDRAW_SLOTCHILDREN="SLOTCHILDREN"    
PDRAW_CLIENTLPAR="CLIENTLPAR"
PDRAW_VIOLPAR="VIOLPAR"
PDRAW_PROFILE="PROFILE"    
PDRAW_DEVICE_ENT="DEVICE_ENT"    
PDRAW_DEVICE_EN="DEVICE_EN"
PDRAW_DEVICE_FCS="DEVICE_FCS"
PDRAW_DEVICE_FSCSI="DEVICE_FSCSI"
PDRAW_DEVICE_FSCSICHILD="DEVICE_FSCSICHILD"
PDRAW_DEVICE_ISCSI="DEVICE_ISCSI"
PDRAW_ELEMENT_ISCSI="ELEMENT_ISCSI"
PDRAW_LSPATH="LSPATH"
PDRAW_LSMAP_SCSI="LSMAP_SCSI"
PDRAW_LSMAP_NPIV="LSMAP_NPIV"
PDRAW_IOSLOTS="IOSLOTS"    
PDRAW_INCLUDE="INCLUDE"    
PDRAW_ADAPTER="ADAPTER"    
PDRAW_SRIOVADAPTER="SRIOVADAPTER"    
PDRAW_SRIOVPHYSPORT="SRIOVPHYSPORT"    
PDRAW_SRIOVLOGPORT="SRIOVLOGPORT"    
    
# ERROR VALUES
RC_BADPARM=1
RC_MISSINGINCLUDE=2  
RC_COULD_NOT_LOCATE_CLEINT_PARTITION=3
RC_COULD_NOT_LOCATE_CONFIGURATION_INPUT_FILE=4
RC_COULD_NOT_LOCATE_USER_DEFINED_DATAFILE=5
RC_USER_DEFINED_DATA_FOR_COLOR_INVALID=6
RC_USEREXIT=99  

#=============================================================================
# FUNCTION NAME:        vios_exit
#=============================================================================
function vios_exit {
  typeset RC=$1
  
  if [ ${#SUCCESS_array[*]} -gt 0 ]; then
    echo "================================================"  |${LOGBOTH}
    i=0
    while [ ${i} -lt ${#SUCCESS_array[*]} ]
    do
      successLine="${SUCCESS_array[${i}]}"
      echo "${successLine}"                    |${LOGBOTH}
      i=$((i+1))
    done 
  fi
  if [ ${#WARNING_array[*]} -gt 0 ]; then
    echo "================================================"  |${LOGBOTH}
    i=0
    while [ ${i} -lt ${#WARNING_array[*]} ]
    do
      warningLine="${WARNING_array[${i}]}"
      echo "${warningLine}"                      |${LOGBOTH}
      echo "${warningLine}" >> ${SUMMARYFILE}
      i=$((i+1))
    done 
  fi
  if [ ${#ERROR_array[*]} -gt 0 ]; then
    echo "================================================"  |${LOGBOTH}
    i=0
    while [ ${i} -lt ${#ERROR_array[*]} ]
    do
      errorLine="${ERROR_array[${i}]}"
      echo "${errorLine}"                      |${LOGBOTH}
      echo "${errorLine}" >> ${SUMMARYFILE}
      i=$((i+1))
    done 
  fi

  echo "drawframe is done with return code $RC $DATE"  |${LOGBOTH}

  if [ ${#POSTSCRIPT} -gt 0 ] && [ ${POSTSCRIPTRC} -eq 0 ]; then
    ${POSTSCRIPT} ${RUNID} ${RC} ${SUMMARYFILE}
  fi

  exit $RC
}

#=============================================================================            
# FUNCTION NAME:        getValue                                          
#=============================================================================            
function getValue  {
  returnValue=""
  parm=",$2="
  data=",$1"
  returnValue=${data##*$parm}
  if [ ${#returnValue} -gt 0 ] && [ "${returnValue}" != "${data}" ]; then
    testit=$(echo "${returnValue}" | grep "=")
    if [ ${#testit} -gt 0 ]; then
      returnValue=$(echo "${returnValue}" | cut -f 1 -d "=")
      numcommas="$(echo "${returnValue}" | sed -e "s%[^,]%%g")"
      returnValue=$(echo "${returnValue}" | cut -f-${#numcommas} -d ",")
    fi
    returnValue=${returnValue/%"\""/""}
    returnValue="$(echo "${returnValue%,}" | tr -d '\r')"
  else
    returnValue=""
  fi  
  echo "${returnValue}"  
}
                                                                                          
#=============================================================================            
# FUNCTION NAME:        logit
#   Description:        Write information to screen and log or just log
#        inputs:        $1 S=both screen and log or L=log only
#        inputs:        $2 data that gets written
#=============================================================================            
logit() {
  saveIFS=${IFS}
  IFS=""
  read data
  IFS=${saveIFS}
  if [ $1 == "S" ]; then
    echo "${CURRENTPID}.`date '+%y%m%d%H%M%S'` ${data}" |tee -a ${LOG_FILE}
  else
    echo "${CURRENTPID}.`date '+%y%m%d%H%M%S'` ${data}" >>${LOG_FILE}
  fi
}
                                                                                          
#=============================================================================            
# FUNCTION NAME:        successInfo
#   Description:        Stores success info in SUCCESS_array
#        inputs:        $1 success information to be stored
#=============================================================================            
function successInfo {
  SUCCESS_array[${#SUCCESS_array[*]}]="++SUCCESSINFO++ $1"
  return 0
}
                                                                                          
#=============================================================================            
# FUNCTION NAME:        warningInfo
#   Description:        Stores warning info in WARNING_array
#        inputs:        $1 warning information to be stored
#=============================================================================            
function warningInfo {
  WARNING_array[${#WARNING_array[*]}]="++WARNINGINFO++ $1"
  return 0
}
                                                                                          
#=============================================================================            
# FUNCTION NAME:        errorInfo
#   Description:        Stores error info in ERROR_array
#        inputs:        $1 error information to be stored
#=============================================================================            
function errorInfo {
  ERROR_array[${#ERROR_array[*]}]="++ERRORINFO++ $1"
  return 0
}

#########################################################################
# Function to draw all Ethernet Adapter of VIO servers 			#
#########################################################################
drawVio () {
  echo "--> drawVio ${1}" |${LOG}
  #########################################################################
  # Initialize Arrays and variables
  #########################################################################
  vio_y=$starty
  pvVlan_count=0
  ctlVlan_count=0
  a=0
  while [ $a -lt $VioHostname_count ]
  do
    # calculate the amount of space required to store any USERDATA and CPTHTMLREF if specified
    VIO_userdata_count=0
    if [ -f ${ALLUSERDATA} ]; then
       VIO_userdata_count=$(grep -c "USERDATA,${ManagedSystem[$x]},${VioHostname[$a]},${PDRAW_VIOLPAR}," ${ALLUSERDATA})
       VIO_URL_count=$(grep -Ec "^URL,?${PDRAW_VIOLPAR}," ${ALLUSERDATA})
       VIO_userdata_count=$((VIO_userdata_count+VIO_URL_count))
    fi
    if [ ${#CPTHTMLREF} ]; then
       VIO_userdata_count=$((VIO_userdata_count+1))
    fi
    VIO_userdata_count=$((VIO_userdata_count*15))
    vio_y=$((vio_y+VIO_userdata_count))
 
    if [ "${1}" == "NETWORK" ] || [ "${1}" == "ALL" ]; then
      #########################################################################
      # set variables of SEA
      #########################################################################
      seaWorkFile="${WORK_AREA}seaWorkFile"
      grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceType=Shared " | cut -f2- -d ":" > ${seaWorkFile}
      seaWorkFileCount=$(cat ${seaWorkFile} | wc -l)
      ((sea_x=startx+120))
      ((sea_y=vio_y+50))
      ((pvVlan_x1=startx+sizeViox+20))
      #((pvVlan_x2=pvVlan_x1+100+${#seaArray[*]}*30))
      ((pvVlan_x2=pvVlan_x1+100+seaWorkFileCount*30))
      ((ctlVlan_x1=startx+sizeViox+20))
      ((ctlVlan_x2=ctlVlan_x1+70))

      echo "seaWorkFileCount: ${seaWorkFileCount}" |${LOG}
      cat ${seaWorkFile} | while read seaEntry
      do
        seaName="$(getValue "${seaEntry}" "DeviceName")"
        echo "process sea: ${seaName}" |${LOG}

        ###########################################################################
        # draw SEA adapter
        ###########################################################################
        echo '<rect x="'$sea_x'" y="'$sea_y'" width="35" height="12" fill="'${COLOR_SEA}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
        ((seaText_x=sea_x+5))
        ((seaText_y=sea_y+11))
        echo '<text x="'$seaText_x'" y="'$seaText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${seaName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${seaName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${seaName}\'')">'${seaName}'</text>' >> $pictureFile
        # add popup object
        addpopup "${VioHostname[$a]}_${seaName}" "${seaText_x}" "${seaText_y}" "${COLOR_SEA}" "${seaEntry}"
        echo ${VioHostname[$a]}','${seaName}','$sea_x','$sea_y >> $helpFile

        ###########################################################################
        # draw en device
        ###########################################################################
        en_x=$((sea_x+18))
        en_y=$((sea_y+12))
        enDeviceName="${seaName//"t"/""}"
        enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
        echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_SEA}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
        enText_x=$((en_x+5))
        enText_y=$((en_y+11))
        echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
        # add popup object
        addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_SEA}" "${enDeviceAttr}"
        echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y',SEA' >> $helpFile

        ###########################################################################
        # find name and type of SEA base adapter
        ###########################################################################
        seaBase="$(getValue "${seaEntry}" "real_adapter")"
        ((base_y=sea_y))
        seaBase_attributeList="$(grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceName=${seaBase}," | cut -f2- -d ":")"
        baseType="$(getValue "${seaBase_attributeList}" "DeviceType")"
        baseType="$(echo "${baseType}" | cut -f 1 -d " ")"

        ###########################################################################
        # draw EtherChannel adapter as base of SEA
        ###########################################################################
        echo "baseType: [$baseType]" |${LOG}
        echo "seaBase: [$seaBase]" |${LOG}
        if [ "$baseType" == "EtherChannel" ]; then
          ((base_x=sea_x-65))
          echo '<rect x="'$base_x'" y="'$base_y'" width="35" height="12" fill="'${COLOR_ETHERCHANNEL}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
  	  ((baseLine_y=base_y+5))
  	  ((baseLine_x=base_x+35))
          echo '<line x1="'$baseLine_x'" y1="'$baseLine_y'" x2="'$sea_x'" y2="'$baseLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
          ((baseText_x=base_x+5))
          ((baseText_y=base_y+11))
          echo '<text x="'$baseText_x'" y="'$baseText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${seaBase}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${seaBase}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${seaBase}\'')">'$seaBase'</text>' >> $pictureFile
          echo ${VioHostname[$a]}','$seaBase','$base_x','$base_y >> $helpFile
  				
          # add popup object
          addpopup "${VioHostname[$a]}_${seaBase}" "${baseText_x}" "${baseText_y}" "${COLOR_ETHERCHANNEL}" "${seaBase_attributeList}"

          ###########################################################################
          # draw en device
          ###########################################################################
          en_x=$((base_x+18))
          en_y=$((base_y+12))
          enDeviceName="${seaBase//"t"/""}"
          enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_ETHERCHANNEL}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          enText_x=$((en_x+5))
          enText_y=$((en_y+11))
          echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
          # add popup object
          addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_ETHERCHANNEL}" "${enDeviceAttr}"
          echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y',ETHCH' >> $helpFile
  	
          ###########################################################################
          # draw physical adapter of EtherChannel
          ###########################################################################
          ethBaseAll="$(getValue "${seaBase_attributeList}" "adapter_names")"
  	  echo "ethBaseAll: ${ethBaseAll}" |${LOG}
          ((ethBase_y=base_y))
          countChan=0
  	  echo "${ethBaseAll}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print i,numP,Array[i]}' | while read curCount numP ethBase
          do
            attributeList="$(grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceName=${ethBase}," | cut -f2- -d ":")"
	    fillcolor="${COLOR_ETHERNET_PHYSPORT}"
            devLoc="$(getValue "${attributeList}" "PhysLoc")"
            d_devLoc="$(echo "${devLoc}" | cut -f3- -d ".")"
	    # first check to see if it is an assigned slotchildren
    	    dattributeList="$(grep "${PDRAW_SLOTCHILDREN},${ManagedSystem[$x]}:" $configFile | grep "phys_loc=${devLoc}," | grep "mac_address=" | cut -f2- -d ":")"
	    if [ ${#dattributeList} -eq 0 ]; then
	      fillcolor="${COLOR_SRIOV_PHYSPORT}"
	      # check to see if device is SRIOVPHYSPORT based
              dattributeList="$(grep "${PDRAW_SRIOVPHYSPORT},${ManagedSystem[$x]}:" $configFile | grep "phys_port_loc=${devLoc}," | cut -f2- -d ":")"
	      if [ ${#dattributeList} -eq 0 ]; then
	        fillcolor="${COLOR_SRIOV_LOGPORT}"
	        # check to see if device is SRIOVLOGPORT based and not a vNIC backing device
                dattributeList="$(grep "${PDRAW_SRIOVLOGPORT},${ManagedSystem[$x]}:" $configFile | grep "location_code=${devLoc}," | grep "lpar_name=${VioHostname[$a]}," | grep "is_vnic_backing_device=0" | cut -f2- -d ":")"
	      fi
	    fi

            ((ethBase_x=startx-15))
            echo '<rect x="'$ethBase_x'" y="'$ethBase_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
            ((ethBaseText_x=ethBase_x+5))
            ((ethBaseText_y=ethBase_y+11))
            echo '<text x="'$ethBaseText_x'" y="'$ethBaseText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${ethBase}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${ethBase}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${ethBase}\'')">'$ethBase'</text>' >> $pictureFile
            echo ${VioHostname[$a]}','$ethBase','$ethBase_x','$ethBase_y >> $helpFile
   
            # add popup object
            addpopup "${VioHostname[$a]}_${ethBase}" "${ethBaseText_x}" "${ethBaseText_y}" "${fillcolor}" "${attributeList}"
         

            ###########################################################################
            # draw en device
            ###########################################################################
            en_x=$((ethBase_x+18))
            en_y=$((ethBase_y+12))
            enDeviceName="${ethBase//"t"/""}"
            enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
            echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
            enText_x=$((en_x+5))
            enText_y=$((en_y+11))
            echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
            # add popup object
            addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${fillcolor}" "${enDeviceAttr}"
            echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y >> $helpFile

            #((locText_x=ethBase_x-85))
            ((locText_x=startx-5))
            ((locText_y=ethBase_y-2))
            #echo '<text x="'$locText_x'" y="'$locText_y'" style="font-size:10px">'$devLoc'</text>' >> $pictureFile
            echo '<text x="'$locText_x'" y="'$locText_y'" style="text-anchor:end;font-size:10px" onclick="displayAttributes(evt, '\'${d_devLoc}\'')" onmouseover="show(evt, '\'${d_devLoc}\'')" onmouseout="hide(evt, '\'${d_devLoc}\'')">'$d_devLoc'</text>' >> $pictureFile
            addpopup "${d_devLoc}" "${locText_x}" "${locText_y}" "${fillcolor}" "${dattributeList}"


            ((ethBaseLine_x1=ethBase_x+35))
            ((ethBaseLine_y1=ethBase_y+5))
            ((ethBaseLine_x2=ethBaseLine_x1+20))
            echo '<line x1="'$ethBaseLine_x1'" y1="'$ethBaseLine_y1'" x2="'$ethBaseLine_x2'" y2="'$ethBaseLine_y1'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
  	    if [ ${numP} -gt 1 ] && [ ${curCount} -lt ${numP} ]; then
              echo '<circle cx="'$ethBaseLine_x2'" cy="'$ethBaseLine_y1'" r="2" />' >> $pictureFile
            fi
            ((ethBase_y=ethBase_y+40))
            ((base_y=base_y+40))
          done 
          echo '<line x1="'$ethBaseLine_x2'" y1="'$baseLine_y'" x2="'$ethBaseLine_x2'" y2="'$ethBaseLine_y1'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
          echo '<line x1="'$ethBaseLine_x2'" y1="'$baseLine_y'" x2="'$base_x'" y2="'$baseLine_y'" style="stroke:black;stroke-width:1;"/>' >> $pictureFile
  					
          ((countChan=countChan+1))

          ####################################################################
          # draw physical Ethernet adapter as base of SEA
          ####################################################################
        else
          ((base_x=startx-15))
          echo '<rect x="'$base_x'" y="'$base_y'" width="35" height="12" fill="'${COLOR_ETHERNET_PHYSPORT}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile				
          ((ethBaseLine_y1=base_y+5))
          ((baseLine_x=base_x+35))
          echo '<line x1="'$baseLine_x'" y1="'$ethBaseLine_y1'" x2="'$sea_x'" y2="'$ethBaseLine_y1'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
          ((baseText_x=base_x+5))
          ((baseText_y=base_y+11))
          echo '<text x="'$baseText_x'" y="'$baseText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${seaBase}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${seaBase}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${seaBase}\'')">'$seaBase'</text>' >> $pictureFile
          echo ${VioHostname[$a]}','$seaBase','$base_x','$base_y >> $helpFile

          # add popup object
          addpopup "${VioHostname[$a]}_${seaBase}" "${baseText_x}" "${baseText_y}" "${COLOR_ETHERNET_PHYSPORT}" "${seaBase_attributeList}"

          ###########################################################################
          # draw en device
          ###########################################################################
          en_x=$((base_x+18))
          en_y=$((base_y+12))
          enDeviceName="${seaBase//"t"/""}"
          enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_ETHERNET_PHYSPORT}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          enText_x=$((en_x+5))
          enText_y=$((en_y+11))
          echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
          # add popup object
          addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_ETHERNET_PHYSPORT}" "${enDeviceAttr}"
          echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y >> $helpFile

          devLoc="$(getValue "${seaBase_attributeList}" "PhysLoc")"
          d_devLoc="$(echo "${devLoc}" | cut -f3- -d ".")"
	  # first check to see if it is an assigned slotchildren
    	  attributeList="$(grep "${PDRAW_SLOTCHILDREN},${ManagedSystem[$x]}:" $configFile | grep "phys_loc=${devLoc}," | grep "mac_address=" | cut -f2- -d ":")"
	  if [ ${#attributeList} -eq 0 ]; then
	    # check to see if device is SRIOVPHYSPORT based
            attributeList="$(grep "${PDRAW_SRIOVPHYSPORT},${ManagedSystem[$x]}:" $configFile | grep "phys_port_loc=${devLoc}," | cut -f2- -d ":")"
	    if [ ${#attributeList} -eq 0 ]; then
	      # check to see if device is SRIOVLOGPORT based and not a vNIC backing device
              attributeList="$(grep "${PDRAW_SRIOVLOGPORT},${ManagedSystem[$x]}:" $configFile | grep "location_code=${devLoc}," | grep "lpar_name=${VioHostname[$a]}," | grep "is_vnic_backing_device=0" | cut -f2- -d ":")"
	    fi
	  fi
          #((locText_x=base_x-85))
          ((locText_x=startx-5))
          ((locText_y=base_y-2))
          #echo '<text x="'$locText_x'" y="'$locText_y'" style="font-size:10px">'$devLoc'</text>' >> $pictureFile
          echo '<text x="'$locText_x'" y="'$locText_y'" style="text-anchor:end;font-size:10px" onclick="displayAttributes(evt, '\'${d_devLoc}\'')" onmouseover="show(evt, '\'${d_devLoc}\'')" onmouseout="hide(evt, '\'${d_devLoc}\'')">'$d_devLoc'</text>' >> $pictureFile
          addpopup "${d_devLoc}" "${locText_x}" "${locText_y}" "${COLOR_ETHERNET_PHYSPORT}" "${attributeList}"
        fi
        ######################################################################
        # draw PV adapter of SEA
        ######################################################################
        ctlName="$(getValue "${seaEntry}" "ctl_chan")"
        echo "ctlName: [${ctlName}]" |${LOG}
        pvNames="$(getValue "${seaEntry}" "virt_adapters")"
        if [ ${#pvNames} -eq 0 ]; then
          pvNames="$(getValue "${seaEntry}" "real_adapter")"
        fi
        echo "pvNames: $pvNames" |${LOG}
        ((pvName_y=sea_y))
        echo "${pvNames}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print i,numP,Array[i]}' | while read curCount numP pvName
        do
          attributeList="$(grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceName=${pvName}," | cut -f2- -d ":")"
          pvLoc="$(getValue "${attributeList}" "PhysLoc")"
          d_pvLoc="$(echo "${pvLoc}" | cut -f3- -d ".")"
          pvSlot="$(echo "${pvLoc}" | cut -f 3 -d "-" | tr -d "C")" 
          pvLocData="$(grep "${PDRAW_VIRTUALIO},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "slot_num=${pvSlot}," | cut -f2- -d ":")"
          pvId="$(getValue "${pvLocData}" "port_vlan_id")"
          echo "pvSlot: $pvSlot" |${LOG}
          echo "pvLoc:  $pvLoc" |${LOG}
          echo "pvId:   $pvId" |${LOG}
	  d_port_vlan_id=" (${pvId})"
          pvPrio="$(getValue "${pvLocData}" "trunk_priority")"
  	  ((pvName_x=startx+sizeViox-15))
          echo '<rect x="'$pvName_x'" y="'$pvName_y'" width="35" height="12" fill="'${COLOR_VIRTUAL_ETHERNET}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile

	  if [ ${#pvLocData} -gt 0 ]; then
            echo ${VioHostname[$a]}','$pvName','$pvName_x','$pvName_y',pv='$pvId',vswitch='$(getValue "${pvLocData}" "vswitch")',' >> $helpFile		
	  else
	    warningInfo "missing ${PDRAW_VIRTUALIO} data for managedsystem: ${ManagedSystem[$x]} vio: ${VioHostname[$a]} pvLoc: ${pvLoc} slot_num: ${pvSlot}"
	  fi
  	
          ((pvText_x=pvName_x+5))
          ((pvText_y=pvName_y+11))
          echo '<text x="'$pvText_x'" y="'$pvText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${pvName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${pvName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${pvName}\'')">'$pvName'</text>' >> $pictureFile

          # add popup object
          addpopup "${VioHostname[$a]}_${pvName}" "${pvText_x}" "${pvText_y}" "${COLOR_VIRTUAL_ETHERNET}" "${attributeList}"

          ###########################################################################
          # draw en device
          ###########################################################################
          en_x=$((pvName_x+18))
          en_y=$((pvName_y+12))
          enDeviceName="${pvName//"t"/""}"
          enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_VIRTUAL_ETHERNET}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          enText_x=$((en_x+5))
          enText_y=$((en_y+11))
          echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
          # add popup object
          addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_VIRTUAL_ETHERNET}" "${enDeviceAttr}"
          echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y >> $helpFile

          ((pvLine_y=pvName_y+5))
          ((pvLine_x1=pvName_x-20))
          echo "pvName_x: ${pvName_x}" |${LOG}
          echo "pvName_y: ${pvName_y}" |${LOG}
          echo "pvLine_x1: ${pvLine_x1}" |${LOG}
          echo "pvLine_y: ${pvLine_y}" |${LOG}
          echo '<line x1="'$pvLine_x1'" y1="'$pvLine_y'" x2="'$pvName_x'" y2="'$pvLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
  	  if [ ${numP} -gt 1 ] && ( [ ${curCount} -lt ${numP} ] || [ "${ctlName}" != "Control" ] ); then
              echo '<circle cx="'$pvLine_x1'" cy="'$pvLine_y'" r="2" />' >> $pictureFile
  	  fi
          #((pvLoc_x=pvName_x-30))
          #((pvLoc_x=pvName_x+18))
          ((pvLoc_x=startx+sizeViox+5))
          ((pvLoc_y=pvName_y-3))
          echo '<text x="'$pvLoc_x'" y="'$pvLoc_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${d_pvLoc}\'')" onmouseover="show(evt, '\'${d_pvLoc}\'')" onmouseout="hide(evt, '\'${d_pvLoc}\'')">'${d_pvLoc}${d_port_vlan_id}'</text>' >> $pictureFile
          addpopup "${d_pvLoc}" "${pvLoc_x}" "${pvLoc_y}" "${COLOR_VIRTUAL_ETHERNET}" "${pvLocData}"
          #echo '<text x="'$pvLoc_x'" y="'$pvLoc_y'" style="font-size:10px">'$pvLoc' (pvid='${pvId}')</text>' >> $pictureFile
          #echo '<text x="'$pvLoc_x'" y="'$pvLoc_y'" style="text-anchor:start;font-size:10px">slot: '$pvSlot' pvid: '${pvId}'</text>' >> $pictureFile

          ((prio_x=sea_x-20))
          ((prio_y=sea_y-2))
          echo '<text x="'$prio_x'" y="'$prio_y'" style="font-size:10px">trunk_priority='$pvPrio'</text>' >> $pictureFile
  		
          ((pvVlan_count=pvVlan_count+1))

          ((pvVlan_y=pvName_y+10))
          addVlan="$(getValue "${pvLocData}" "addl_vlan_ids")"
	  echo "pvLocData: ${pvLocData}" |${LOG}
	  echo "addVlan: ${addVlan}" |${LOG}
	  vswitch="$(getValue "${pvLocData}" "vswitch")"
	  groupID="g_${vswitch}_${pvId}"
	  echo "GROUP:${groupID}" >>$groupFile
          echo "${addVlan}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read vlan
          do
	    echo "vlan: ${vlan}" |${LOG}
            echo ${VioHostname[$a]}',vlan='$vlan','$pvVlan_y',pvid='$pvId',vswitch='$(getValue "${pvLocData}" "vswitch")',' >> $helpFile
          done
          ((pvName_y+=40))
        done
        ((pvName_y-=40))

        ####################################################################
        # draw ControlChannel adapter of SEA
        ####################################################################
        if [ ${#ctlName} -gt 0 ] && [ "${ctlName}" != "Control" ]; then
          attributeList="$(grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceName=${ctlName}," | cut -f2- -d ":")"
          pvLoc="$(getValue "${attributeList}" "PhysLoc")"
          d_pvLoc="$(echo "${pvLoc}" | cut -f3- -d ".")"
          pvSlot="$(echo "${pvLoc}" | cut -f 3 -d "-" | tr -d "C")" 
          pvLocData="$(grep "${PDRAW_VIRTUALIO},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "slot_num=${pvSlot}," | cut -f2- -d ":")"
          pvId="$(getValue "${pvLocData}" "port_vlan_id")"
	  d_port_vlan_id=" (${pvId})"
          echo "pvSlot: $pvSlot" |${LOG}
          echo "pvLoc:  $pvLoc" |${LOG}
          echo "pvId:   $pvId" |${LOG}

          ((ctlName_x=startx+sizeViox-15))
          ((ctlName_y=pvName_y+40))
          echo '<rect x="'$ctlName_x'" y="'$ctlName_y'" width="35" height="12" fill="'${COLOR_CONTROL_CHANNEL}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile

          echo ${VioHostname[$a]}','$ctlName','$ctlName_x','$ctlName_y',ctl='$pvId',pv='$pvSlot',vswitch='$(getValue "${pvLocData}" "vswitch")',' >> $helpFile

   	  ((ctlText_x=ctlName_x+5))
          ((ctlText_y=ctlName_y+11))
          echo '<text x="'$ctlText_x'" y="'$ctlText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${ctlName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${ctlName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${ctlName}\'')">'$ctlName'</text>' >> $pictureFile

          # add popup object
          addpopup "${VioHostname[$a]}_${ctlName}" "${ctlText_x}" "${ctlText_y}" "${COLOR_CONTROL_CHANNEL}" "${attributeList}"

          ###########################################################################
          # draw en device
          ###########################################################################
          en_x=$((ctlName_x+18))
          en_y=$((ctlName_y+12))
          enDeviceName="${ctlName//"t"/""}"
          enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_CONTROL_CHANNEL}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          enText_x=$((en_x+5))
          enText_y=$((en_y+11))
          echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
          # add popup object
          addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_CONTROL_CHANNEL}" "${enDeviceAttr}"
          echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y >> $helpFile

          ((ctlLine_y=ctlName_y+5))
          ((ctlLine_x1=ctlName_x-20))
          echo "ctlName_x: ${ctlName_x}" |${LOG}
          echo "ctlName_y: ${ctlName_y}" |${LOG}
          echo "ctlLine_x1: ${ctlLine_x1}" |${LOG}
          echo "ctlLine_y: ${ctlLine_y}" |${LOG}
                        
          echo '<line x1="'$ctlLine_x1'" y1="'$ctlLine_y'" x2="'$ctlName_x'" y2="'$ctlLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
          #echo '<circle cx="'$ctlLine_x1'" cy="'$ctlLine_y'" r="2" />' >> $pictureFile

          #((ctlLoc_x=ctlName_x-30))
          #((ctlLoc_x=ctlName_x+18))
          ((ctlLoc_x=startx+sizeViox+5))
          ((ctlLoc_y=ctlName_y-3))
          echo '<text x="'$ctlLoc_x'" y="'$ctlLoc_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${d_pvLoc}\'')" onmouseover="show(evt, '\'${d_pvLoc}\'')" onmouseout="hide(evt, '\'${d_pvLoc}\'')">'${d_pvLoc}${d_port_vlan_id}'</text>' >> $pictureFile
          addpopup "${d_pvLoc}" "${ctlLoc_x}" "${ctlLoc_y}" "${COLOR_CONTROL_CHANNEL}" "${pvLocData}"
          #echo '<text x="'$ctlLoc_x'" y="'$ctlLoc_y'" style="font-size:10px">'$pvLoc' (pvid='$pvId')</text>' >> $pictureFile
          #echo '<text x="'$ctlLoc_x'" y="'$ctlLoc_y'" style="text-anchor:start;font-size:10px">slot: '$pvSlot' pvid: '$pvId'</text>' >> $pictureFile
          ((ctlVlan_count=ctlVlan_count+1))
        else
          ((ctlName_y=pvName_y))
          ((ctlLine_y=pvName_y+5))
        fi
        #######################################################################
        # draw additional virtual adapters of SEA 
        #######################################################################
        addAdapAll="$(getValue "${seaEntry}" "virt_adapters"),"
        addAdap_count=$(echo $addAdapAll | tr "," "\n" | wc | awk '{print $1}')
        echo "addAdapAll: ${addAdapAll}" |${LOG}
        ((addAdap_count=addAdap_count-2))
        ((addAdap_y=ctlName_y+40))
        ((addAdap_x=startx+sizeViox-15))
        ((addAdap_count=addAdap_count+1))
        c=0
        echo "addAdap_count: ${addAdap_count}" |${LOG}
        while [ $c -lt $addAdap_count ]
        do
          ((m=c+1))
          addAdap=$(echo $addAdapAll | cut -f $m -d ',')
          testString=$pvName','	
          echo "addAdap: [$addAdap] pvNames: [$pvNames]" |${LOG}
          checkit="$(echo "${pvNames}," | grep "${addAdap},")"
          echo "checkit: ${checkit}" |${LOG}
          if [ ${#checkit} -eq 0 ]; then
            attributeList="$(grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceName=${addAdap}," | cut -f2- -d ":")"
            addAdapLoc="$(getValue "${attributeList}" "PhysLoc")"
            d_addAdapLoc="$(echo "${addAdapLoc}" | cut -f3- -d ".")"
            addAdapSlot="$(echo "${addAdapLoc}" | cut -f 3 -d "-" | tr -d "C")" 
  	    # VIRTUALIO port_vlan_id
            pvLocData="$(grep "${PDRAW_VIRTUALIO},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "slot_num=${addAdapSlot}," | cut -f2- -d ":")"
            addAdapId="$(getValue "${pvLocData}" "port_vlan_id")"
            echo '<rect x="'$addAdap_x'" y="'$addAdap_y'" width="35" height="12" fill="'${COLOR_VIRTUAL_ETHERNET}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
            echo ${VioHostname[$a]}','$addAdap','$addAdap_x','$addAdap_y',pv='$addAdapId',vswitch='$(getValue "${pvLocData}" "vswitch")',' >> $helpFile

            ((addAdapText_y=addAdap_y+11))
            ((addAdapText_x=addAdap_x+5))
            echo '<text x="'$addAdapText_x'" y="'$addAdapText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${addAdap}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${addAdap}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${addAdap}\'')">'$addAdap'</text>' >> $pictureFile

            # add popup object
            addpopup "${VioHostname[$a]}_${addAdap}" "${addAdapText_x}" "${addAdapText_y}" "${COLOR_VIRTUAL_ETHERNET}" "${attributeList}"

            ###########################################################################
            # draw en device
            ###########################################################################
            en_x=$((addAdap_x+18))
            en_y=$((addAdap_y+12))
            enDeviceName="${addAdap//"t"/""}"
            enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
            echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_VIRTUAL_ETHERNET}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
            enText_x=$((en_x+5))
            enText_y=$((en_y+11))
            echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
            # add popup object
            addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_VIRTUAL_ETHERNET}" "${enDeviceAttr}"
            echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y >> $helpFile

            ((addAdapLine_y=addAdap_y+5))
            ((addAdapLine_x1=addAdap_x-20))
            echo '<line x1="'$addAdapLine_x1'" y1="'$addAdapLine_y'" x2="'$addAdap_x'" y2="'$addAdapLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
            echo '<circle cx="'$addAdapLine_x1'" cy="'$addAdapLine_y'" r="2" />' >> $pictureFile

            ((addAdapLoc_x=addAdap_x-30))
            ((addAdapLoc_y=addAdap_y-2))
            echo '<text x="'$addAdapLoc_x'" y="'$addAdapLoc_y'" style="font-size:10px">'$addAdapLoc'</text>' >> $pictureFile
            pvVlan_x3=$(grep 'addvlan='$addAdapId',' $helpFile | cut -f 2 -d ','| sort -u)
            if [ ${#pvVlan_x3} -eq 0 ]; then
              ((pvVlan_x2=pvVlan_x2+30))
            else
              ((pvVlan_x2=pvVlan_x3))
            fi
            ((pvVlan_y=addAdap_y+10))
            echo ${VioHostname[$a]}',pvVlan='$addAdapId','$pvVlan_x2','$pvVlan_y >> $helpFile

            ((pvVlan_count=pvVlan_count+1))
  			
  	    addVlan="$(getValue "${pvLocData}" "addl_vlan_ids")"
  	    echo "${addVlan}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read vlan
            do
              echo ${VioHostname[$a]}',vlan='$vlan','$pvVlan_y',pvid='$addAdapId',vswitch='$(getValue "${pvLocData}" "vswitch")',' >> $helpFile
            done
            ((addAdap_y=addAdap_y+40))
          else
            ((addAdapLine_x1=pvLine_x1))
            ((addAdapLine_y=ctlLine_y))
          fi
          ((c=c+1))
        done
  	
        ((seaLine_x=sea_x+35))
        ((seaLine_y=sea_y+5))
        echo '<line x1="'$addAdapLine_x1'" y1="'$seaLine_y'" x2="'$seaLine_x'" y2="'$seaLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
        echo '<line x1="'$addAdapLine_x1'" y1="'$addAdapLine_y'" x2="'$addAdapLine_x1'" y2="'$seaLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile

        #########################################################################
        # draw VLAN adapter of SEA
        #########################################################################
        vlanWorkFile="${WORK_AREA}vlanWorkFile"
        vlanAdapLine_y=0
        #((vlanAdap_y=sea_y+25))
        ((vlanAdap_y=sea_y+40))
        grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceType=VLAN" | grep "base_adapter=${seaName}," | cut -f2- -d ":" > ${vlanWorkFile}
	cat ${vlanWorkFile} | while read vlanEntry
        do
          DeviceName="$(getValue "${vlanEntry}" "DeviceName" )"
          vlan_tag_id="$(getValue "${vlanEntry}" "vlan_tag_id" )"
          ((vlanAdap_x=sea_x+10))
          echo '<rect x="'$vlanAdap_x'" y="'$vlanAdap_y'" width="35" height="12" fill="'${COLOR_VLAN}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
          ((vlanAdapText_y=vlanAdap_y+11))
          ((vlanAdapText_x=vlanAdap_x+5))
          echo '<text x="'$vlanAdapText_x'" y="'$vlanAdapText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${DeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${DeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${DeviceName}\'')">'${DeviceName}'</text>' >> $pictureFile

          # add popup object
          addpopup "${VioHostname[$a]}_${DeviceName}" "${vlanAdapText_x}" "${vlanAdapText_y}" "${COLOR_VLAN}" "${vlanEntry}"


          ###########################################################################
          # draw en device
          ###########################################################################
          en_x=$((vlanAdap_x+18))
          en_y=$((vlanAdap_y+12))
          enDeviceName="${DeviceName//"t"/""}"
          enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_VLAN}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          enText_x=$((en_x+5))
          enText_y=$((en_y+11))
          echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
          # add popup object
          addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_VLAN}" "${enDeviceAttr}"
          echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y','VLAN >> $helpFile

          ((vlanAdapLine_y=vlanAdap_y+5))
          echo '<line x1="'$sea_x'" y1="'$vlanAdapLine_y'" x2="'$vlanAdap_x'" y2="'$vlanAdapLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
          if [ ${#vlanAdapAll[*]} -gt 1 ] && [ ${c} -lt $((${#vlanAdapAll[*]}-1)) ]; then
            echo '<circle cx="'$sea_x'" cy="'$vlanAdapLine_y'" r="2" />' >> $pictureFile	
  	  fi
          echo ${VioHostname[$a]}','${DeviceName}','$vlanAdap_x','$vlanAdap_y >> $helpFile
  			
          ((idText_x=vlanAdap_x-35))
          echo '<text x="'$idText_x'" y="'$vlanAdapText_y'" style="font-size:10px">('${vlan_tag_id}')</text>' >> $pictureFile
          ##((vlanAdap_y=vlanAdap_y+25))
          ((vlanAdap_y=vlanAdap_y+40))

          ((vlanAdapLine_y1=sea_y+12))
          echo '<line x1="'$sea_x'" y1="'$vlanAdapLine_y1'" x2="'$sea_x'" y2="'$vlanAdapLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
        done
        #########################################################################
        # set Y - value for next SEA
        #########################################################################
        ((vlanAdap_y=vlanAdap_y+15))
  	
        if [ $base_y -lt $addAdap_y ]; then
          ((sea_y=addAdap_y))
        else
          ((sea_y=base_y))
        fi
        if [ $sea_y -lt $vlanAdap_y ]; then
          ((sea_y=vlanAdap_y))
        fi
      done

      endVio_y=$sea_y

    
      ############################################################################
      # draw additional etherchannels
      ############################################################################
      base_y=$sea_y
      addechannelWorkFile="${WORK_AREA}addechannelWorkFile"
      grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceType=EtherChannel" | cut -f2- -d ":" > ${addechannelWorkFile}
      cat ${addechannelWorkFile} | while read addechannelEntry
      do
        DeviceName="$(getValue "${addechannelEntry}" "DeviceName")"
        test=$(grep "${VioHostname[$a]}" $helpFile | grep -c ','${DeviceName}',')
        if [ $test -eq 0 ]; then
	  echBase="${DeviceName}"
          adapter_names="$(getValue "${addechannelEntry}" "adapter_names")"
          backup_adapter="$(getValue "${addechannelEntry}" "backup_adapter")"
          echo "add etherchannel device: ${DeviceName} adapter_names: ${adapter_names} backup_adapter: ${backup_adapter}" |${LOG}
	  ((baseLine_y=base_y+5))
  	  ((baseLine_x=base_x+35))
          ((base_x=sea_x-65))
          echo '<rect x="'$base_x'" y="'$base_y'" width="35" height="12" fill="'${COLOR_ETHERCHANNEL}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          ((baseText_x=base_x+5))
          ((baseText_y=base_y+11))
          echo '<text x="'$baseText_x'" y="'$baseText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${echBase}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${echBase}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${echBase}\'')">'$echBase'</text>' >> $pictureFile
          echo ${VioHostname[$a]}','$echBase','$base_x','$base_y >> $helpFile
  				
          # add popup object
          addpopup "${VioHostname[$a]}_${echBase}" "${baseText_x}" "${baseText_y}" "${COLOR_ETHERCHANNEL}" "${addechannelEntry}"

          ###########################################################################
          # draw en device
          ###########################################################################
          en_x=$((base_x+18))
          en_y=$((base_y+12))
          enDeviceName="${echBase//"t"/""}"
          enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_ETHERCHANNEL}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          enText_x=$((en_x+5))
          enText_y=$((en_y+11))
          echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
          # add popup object
          addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_ETHERCHANNEL}" "${enDeviceAttr}"
          echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y',ETHCH' >> $helpFile
  	
          ###########################################################################
          # draw physical adapter of EtherChannel
          ###########################################################################

          numcommas="$(echo "${returnValue}" | sed -e "s/[^,]//g")"
	  tmpVar="$(echo "${adapter_names}" | sed -e "s/[^,]//g")"
	  adapter_names_count=$((${#tmpVar}+1))
          ethBaseAll="${adapter_names}"
  	  echo "ethBaseAll: ${ethBaseAll}" |${LOG}
	  backup_adapter_count=0
	  if [ ${#backup_adapter} -gt 0 ]; then
	    tmpVar="$(echo "${backup_adapter}" | sed -e "s/[^,]//g")"
	    backup_adapter_count=$((${#tmpVar}+1))
	    ethBaseAll="${ethBaseAll},${backup_adapter}"
	    echo "adding backup_adapter to ethBaseAll: ${ethBaseAll}" |${LOG}
	  fi
	  echo "adapter_names_count: ${adapter_names_count} backup_adapter_count: ${backup_adapter_count}" |${LOG}
          ((ethBase_y=base_y))
          ((save_ethBase_y=base_y))
  	  echo "${ethBaseAll}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print i,numP,Array[i]}' | while read curCount numP ethBase
          do
            attributeList="$(grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceName=${ethBase}," | cut -f2- -d ":")"
	    fillcolor="${COLOR_ETHERNET_PHYSPORT}"
            devLoc="$(getValue "${attributeList}" "PhysLoc")"
            d_devLoc="$(echo "${devLoc}" | cut -f3- -d ".")"
	    # first check to see if it is an assigned slotchildren
    	    dattributeList="$(grep "${PDRAW_SLOTCHILDREN},${ManagedSystem[$x]}:" $configFile | grep "phys_loc=${devLoc}," | grep "mac_address=" | cut -f2- -d ":")"
	    if [ ${#dattributeList} -eq 0 ]; then
	      fillcolor="${COLOR_SRIOV_PHYSPORT}"
	      # check to see if device is SRIOVPHYSPORT based
              dattributeList="$(grep "${PDRAW_SRIOVPHYSPORT},${ManagedSystem[$x]}:" $configFile | grep "phys_port_loc=${devLoc}," | cut -f2- -d ":")"
	      if [ ${#dattributeList} -eq 0 ]; then
	        fillcolor="${COLOR_SRIOV_LOGPORT}"
	        # check to see if device is SRIOVLOGPORT based and not a vNIC backing device
                dattributeList="$(grep "${PDRAW_SRIOVLOGPORT},${ManagedSystem[$x]}:" $configFile | grep "location_code=${devLoc}," | grep "lpar_name=${VioHostname[$a]}," | grep "is_vnic_backing_device=0" | cut -f2- -d ":")"
	      fi
	    fi

            ((ethBase_x=startx-15))
            echo '<rect x="'$ethBase_x'" y="'$ethBase_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
            ((ethBaseText_x=ethBase_x+5))
            ((ethBaseText_y=ethBase_y+11))
            echo '<text x="'$ethBaseText_x'" y="'$ethBaseText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${ethBase}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${ethBase}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${ethBase}\'')">'$ethBase'</text>' >> $pictureFile
            echo ${VioHostname[$a]}','$ethBase','$ethBase_x','$ethBase_y >> $helpFile
   
            # add popup object
            addpopup "${VioHostname[$a]}_${ethBase}" "${ethBaseText_x}" "${ethBaseText_y}" "${fillcolor}" "${attributeList}"
         

            ###########################################################################
            # draw en device
            ###########################################################################
            en_x=$((ethBase_x+18))
            en_y=$((ethBase_y+12))
            enDeviceName="${ethBase//"t"/""}"
            enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
            echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
            enText_x=$((en_x+5))
            enText_y=$((en_y+11))
            echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
            # add popup object
            addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${fillcolor}" "${enDeviceAttr}"
            echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y >> $helpFile

            #((locText_x=ethBase_x-85))
            ((locText_x=startx-5))
            ((locText_y=ethBase_y-2))
            #echo '<text x="'$locText_x'" y="'$locText_y'" style="font-size:10px">'$devLoc'</text>' >> $pictureFile
            echo '<text x="'$locText_x'" y="'$locText_y'" style="text-anchor:end;font-size:10px" onclick="displayAttributes(evt, '\'${d_devLoc}\'')" onmouseover="show(evt, '\'${d_devLoc}\'')" onmouseout="hide(evt, '\'${d_devLoc}\'')">'$d_devLoc'</text>' >> $pictureFile
            addpopup "${d_devLoc}" "${locText_x}" "${locText_y}" "${fillcolor}" "${dattributeList}"


            ((ethBaseLine_x1=ethBase_x+35))
            ((ethBaseLine_y1=ethBase_y+5))
            ((ethBaseLine_x2=ethBaseLine_x1+20))
            echo '<line x1="'$ethBaseLine_x1'" y1="'$ethBaseLine_y1'" x2="'$ethBaseLine_x2'" y2="'$ethBaseLine_y1'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
  	    if [ ${numP} -gt 1 ] && [ ${curCount} -lt ${numP} ]; then
              echo '<circle cx="'$ethBaseLine_x2'" cy="'$ethBaseLine_y1'" r="2" />' >> $pictureFile
            fi
            ((ethBase_y=ethBase_y+40))
            ((base_y=base_y+40))
          done 
          echo '<line x1="'$ethBaseLine_x2'" y1="'$baseLine_y'" x2="'$ethBaseLine_x2'" y2="'$ethBaseLine_y1'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
          echo '<line x1="'$ethBaseLine_x2'" y1="'$baseLine_y'" x2="'$base_x'" y2="'$baseLine_y'" style="stroke:black;stroke-width:1;"/>' >> $pictureFile

          #########################################################################
          # draw VLAN adapter of etherchannel
          #########################################################################
          vlanWorkFile="${WORK_AREA}vlanWorkFile"
          vlanAdapLine_y=0
          ((vlanAdap_y=save_ethBase_y+40))
          grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceType=VLAN" | grep "base_adapter=${echBase}," | cut -f2- -d ":" > ${vlanWorkFile}
          cat ${vlanWorkFile} | while read vlanEntry
          do
            DeviceName="$(getValue "${vlanEntry}" "DeviceName" )"
            vlan_tag_id="$(getValue "${vlanEntry}" "vlan_tag_id" )"
            ((vlanAdap_x=base_x+10))
            echo '<rect x="'$vlanAdap_x'" y="'$vlanAdap_y'" width="35" height="12" fill="'${COLOR_VLAN}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
            ((vlanAdapText_y=vlanAdap_y+11))
            ((vlanAdapText_x=vlanAdap_x+5))
            echo '<text x="'$vlanAdapText_x'" y="'$vlanAdapText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${DeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${DeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${DeviceName}\'')">'${DeviceName}'</text>' >> $pictureFile

            # add popup object
            addpopup "${VioHostname[$a]}_${DeviceName}" "${vlanAdapText_x}" "${vlanAdapText_y}" "${COLOR_VLAN}" "${vlanEntry}"


            ###########################################################################
            # draw en device
            ###########################################################################
            en_x=$((vlanAdap_x+18))
            en_y=$((vlanAdap_y+12))
            enDeviceName="${DeviceName//"t"/""}"
            enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
            echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_VLAN}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
            enText_x=$((en_x+5))
            enText_y=$((en_y+11))
            echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
            # add popup object
            addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_VLAN}" "${enDeviceAttr}"
            echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y','VLAN >> $helpFile

            ((vlanAdapLine_y=vlanAdap_y+5))
            echo '<line x1="'$base_x'" y1="'$vlanAdapLine_y'" x2="'$vlanAdap_x'" y2="'$vlanAdapLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
            if [ ${#vlanAdapAll[*]} -gt 1 ] && [ ${c} -lt $((${#vlanAdapAll[*]}-1)) ]; then
              echo '<circle cx="'$base_x'" cy="'$vlanAdapLine_y'" r="2" />' >> $pictureFile	
            fi
            echo ${VioHostname[$a]}','${DeviceName}','$vlanAdap_x','$vlanAdap_y >> $helpFile
               	
            ((idText_x=vlanAdap_x-2))
            ((idText_y=vlanAdapText_y+4))
            echo '<text x="'$idText_x'" y="'$idText_y'" style="text-anchor:end;font-size:10px">('${vlan_tag_id}')</text>' >> $pictureFile
            ((vlanAdap_y=vlanAdap_y+40))

            ((vlanAdapLine_y1=sea_y+12))
            echo '<line x1="'$base_x'" y1="'$vlanAdapLine_y1'" x2="'$base_x'" y2="'$vlanAdapLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
          done
          #########################################################################
          # set Y - value for next etherchannel
          #########################################################################
          ((vlanAdap_y=vlanAdap_y+15))
         
          if [ $base_y -lt $ethBase_y ]; then
            ((base_y=ethBase_y))
          fi
          if [ $base_y -lt $vlanAdap_y ]; then
            ((base_y=vlanAdap_y))
          fi

	fi
      done
      sea_y=$base_y
      endVio_y=$base_y



      ############################################################################
      # draw additional physical adapter
      ############################################################################
      addphysWorkFile="${WORK_AREA}addphysWorkFile"
      grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -v "DeviceType=Shared" | grep -v "DeviceType=Virtual" | grep -v "DeviceType=VLAN" | grep -v "DeviceType=EtherChannel" | cut -f2- -d ":" > ${addphysWorkFile}
      cat ${addphysWorkFile} | while read addphysEntry
      do
        DeviceName="$(getValue "${addphysEntry}" "DeviceName")"
        test=$(grep "${VioHostname[$a]}" $helpFile | grep -c ','${DeviceName}',')
        if [ $test -eq 0 ]; then
          addPhysAdapLoc="$(getValue "${addphysEntry}" "PhysLoc")"
	  # add check to see if it is a vnic backing device
          checkVNIC="$(grep "${PDRAW_SRIOVLOGPORT},${ManagedSystem[$x]}:" $configFile | grep "location_code=${addPhysAdapLoc}," | grep "is_vnic_backing_device=1")"
	  echo "checkVNIC: ${checkVNIC}" |${LOG}
	  if [ ${#checkVNIC} -eq 0 ]; then
            d_addPhysAdapLoc="$(echo "${addPhysAdapLoc}" | cut -f3- -d ".")"
	    fillcolor="${COLOR_ETHERNET_PHYSPORT}"
            ((addPhysAdap_x=startx-15))
            ((addPhysAdap_y=sea_y))
            ((loc_offset_x=addPhysAdap_x+5))
	    groupID=""
	    anchor="end"
	    # first check to see if it is an assigned slotchildren
            attributeList="$(grep "${PDRAW_SLOTCHILDREN},${ManagedSystem[$x]}:" $configFile | grep "phys_loc=${addPhysAdapLoc}," | grep "mac_address=" | cut -f2- -d ":")"
	    if [ ${#attributeList} -eq 0 ]; then
	      # check to see if device is SRIOVPHYSPORT based
              attributeList="$(grep "${PDRAW_SRIOVPHYSPORT},${ManagedSystem[$x]}:" $configFile | grep "phys_port_loc=${addPhysAdapLoc}," | cut -f2- -d ":")"
	      if [ ${#attributeList} -eq 0 ]; then
	        # check to see if device is SRIOVLOGPORT based and not a vNIC backing device
                attributeList="$(grep "${PDRAW_SRIOVLOGPORT},${ManagedSystem[$x]}:" $configFile | grep "location_code=${addPhysAdapLoc}," | grep "lpar_name=${VioHostname[$a]}," | grep "is_vnic_backing_device=0" | cut -f2- -d ":")"
	        if [ ${#attributeList} -gt 0 ]; then
	          fillcolor="${COLOR_SRIOV_LOGPORT}"
		  # adjust to be on right side of VIO
                  ((addPhysAdap_x=startx+sizeViox-15))
                  ((loc_offset_x=startx+sizeViox+5))
		  anchor="start"
		  adapter_id="$(getValue "${attributeList}" "adapter_id")"
		  phys_port_id="$(getValue "${attributeList}" "phys_port_id")"
		  groupID="g_SRIOVPHYSPORT_${adapter_id}_${phys_port_id}"
	        fi
	      else
	        fillcolor="${COLOR_SRIOV_PHYSPORT}"
	      fi
	    fi
            echo "add physical DeviceName: ${DeviceName}" |${LOG}
            echo '<rect x="'$addPhysAdap_x'" y="'$addPhysAdap_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
            ((addPhysAdapText_x=addPhysAdap_x+5))
            ((addPhysAdapText_y=addPhysAdap_y+11))
            echo '<text x="'$addPhysAdapText_x'" y="'$addPhysAdapText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${DeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${DeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${DeviceName}\'')">'${DeviceName}'</text>' >> $pictureFile
            echo ${VioHostname[$a]}','${DeviceName}','$addPhysAdap_x','$addPhysAdap_y >> $helpFile

            addpopup "${VioHostname[$a]}_${DeviceName}" "${addPhysAdapText_x}" "${addPhysAdapText_y}" "${fillcolor}" "${addphysEntry}"
	    # add connector to sriov physical port if a logical port
	    if [ ${#groupID} -gt 0 ]; then
              ((vlanAdapLine_y=vlanAdap_y+5))
	      is_active_color="black"
	      functional_state="$(getValue "${attributeList}" "functional_state")"
	      echo "functional_state: ${functional_state}" |${LOG}
	      if [ "${functional_state}" == "1" ]; then
	       is_active_color="green"
	      else
	        is_active_color="red"
              fi
              echo "SRIOVLOGPORT:${adapter_id}:${phys_port_id}:$((addPhysAdap_x+35)):$((addPhysAdap_y+5)):${is_active_color}" >> $sriovPhysportHelpFile
	    fi

            ###########################################################################
            # draw en device
            ###########################################################################
            en_x=$((addPhysAdap_x+18))
            en_y=$((addPhysAdap_y+12))
            enDeviceName="${DeviceName//"t"/""}"
            enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
            echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
            enText_x=$((en_x+5))
            enText_y=$((en_y+11))
            echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
            # add popup object
            addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${fillcolor}" "${enDeviceAttr}"
            echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y >> $helpFile

            #((addPhysAdapText_x=addPhysAdap_x-85))
            ((addPhysAdapText_x=loc_offset_x))
            ((addPhysAdapText_y=addPhysAdap_y-2))
	    port_vlan_id="$(getValue "${attributeList}" "port_vlan_id")"
            echo '<text x="'$addPhysAdapText_x'" y="'$addPhysAdapText_y'" style="text-anchor:'${anchor}';font-size:10px" onclick="displayAttributes(evt, '\'${d_addPhysAdapLoc}\'')" onmouseover="show(evt, '\'${d_addPhysAdapLoc}\'')" onmouseout="hide(evt, '\'${d_addPhysAdapLoc}\'')">'$d_addPhysAdapLoc' ('$port_vlan_id')</text>' >> $pictureFile
            addpopup "${d_addPhysAdapLoc}" "${addPhysAdapText_x}" "${addPhysAdapText_y}" "${fillcolor}" "${attributeList}"
  	         	
            ((sea_y=sea_y+40))
	  fi
        fi
      done
  	
      endVio_y=$sea_y

      #############################################################################
      # draw additional virtual adapter
      #############################################################################
      addvirtualWorkFile="${WORK_AREA}addvirtualWorkFile"
      grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "DeviceType=Virtual" | cut -f2- -d ":" > ${addvirtualWorkFile}
      cat ${addvirtualWorkFile} | while read addvirtualEntry 
      do
        DeviceName="$(getValue "${addvirtualEntry}" "DeviceName")"
        test=$(grep "${VioHostname[$a]}," $helpFile | grep ','${DeviceName}',')
        if [ ${#test} -eq 0 ]; then
          echo "add virtual DeviceName: ${DeviceName}" |${LOG}
          ((addVirtAdap_x=startx+sizeViox-15))
          ((addVirtAdap_y=sea_y))
          echo '<rect x="'$addVirtAdap_x'" y="'$addVirtAdap_y'" width="35" height="12" fill="'${COLOR_VIRTUAL_ETHERNET}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
          ((addVirtAdapText_x=addVirtAdap_x+5))
          ((addVirtAdapText_y=addVirtAdap_y+11))
          echo '<text x="'$addVirtAdapText_x'" y="'$addVirtAdapText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${DeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${DeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${DeviceName}\'')">'${DeviceName}'</text>' >> $pictureFile

          # add popup object
          addpopup "${VioHostname[$a]}_${DeviceName}" "${addVirtAdapText_x}" "${addVirtAdapText_y}" "${COLOR_VIRTUAL_ETHERNET}" "${addvirtualEntry}"

          ###########################################################################
          # draw en device
          ###########################################################################
          en_x=$((addVirtAdap_x+18))
          en_y=$((addVirtAdap_y+12))
          enDeviceName="${DeviceName//"t"/""}"
          enDeviceAttr="$(grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${enDeviceName}," | cut -f2- -d ":")"
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${COLOR_VIRTUAL_ETHERNET}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          enText_x=$((en_x+5))
          enText_y=$((en_y+11))
          echo '<text x="'$enText_x'" y="'$enText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${enDeviceName}\'')">'${enDeviceName}'</text>' >> $pictureFile
          # add popup object
          addpopup "${VioHostname[$a]}_${enDeviceName}" "${enText_x}" "${enText_y}" "${COLOR_VIRTUAL_ETHERNET}" "${enDeviceAttr}"
          echo ${VioHostname[$a]}','$enDeviceName','$enText_x','$enText_y >> $helpFile

          addVirtAdapLoc="$(getValue "${addvirtualEntry}" "PhysLoc")"
          echo "addVirtAdapLoc: ${addVirtAdapLoc}" |${LOG}
          #((addVirtAdapText_x=addVirtAdap_x-85))
          #((addVirtAdapText_y=addVirtAdap_y-2))
          #echo '<text x="'$addVirtAdapText_x'" y="'$addVirtAdapText_y'" style="font-size:10px">'$addVirtAdapLoc'</text>' >> $pictureFile
          addVirtAdapSlot=$(echo $addVirtAdapLoc | cut -f 3 -d '-' | tr -d 'C')
          echo "addVirtAdapSlot: ${addVirtAdapSlot}" |${LOG}
          pvLoc="$(getValue "${addvirtualEntry}" "PhysLoc")"
          d_pvLoc="$(echo "${pvLoc}" | cut -f3- -d ".")"
          pvSlot=$(echo $pvLoc | cut -f 3 -d '-' | tr -d 'C')
          echo "addVirtAdapId: ${addVirtAdapId}" |${LOG}
          echo "pvLoc: ${pvLoc}" |${LOG}
          echo "pvSlot: ${pvSlot}" |${LOG}
          echo "pvId: ${pvId}" |${LOG}
          pvLocData="$(grep "${PDRAW_VIRTUALIO},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep 'slot_num='$addVirtAdapSlot',' | cut -f2- -d ":")"
	  addConn=1
	  locColor="${COLOR_VIRTUAL_ETHERNET}"
	  txtColor="black"
	  addVirtAdapId=""
	  pvId=""
          addVlan=""
	  if [ ${#pvLocData} -gt 0 ]; then
            addVirtAdapId="$(getValue "${pvLocData}" "port_vlan_id")"
            pvId="$(getValue "${pvLocData}" "port_vlan_id")"
	    d_port_vlan_id=" (${pvId})"
            addVlan="$(getValue "${pvLocData}" "addl_vlan_ids")"
	  else
	    addConn=0
	    locColor="red"
	    txtColor="red"
	    pvLocData="error=Missing slot ${pvSlot} definition in VIO"  
	  fi
          #((addVirtAdapText_x=addVirtAdap_x+18))
          ((addVirtAdapText_x=startx+sizeViox+5))
          ((addVirtAdapText_y=addVirtAdap_y-3))
          echo '<text x="'$addVirtAdapText_x'" y="'$addVirtAdapText_y'" style="fill:'$txtColor';font-size:10px" onclick="displayAttributes(evt, '\'${d_pvLoc}\'')" onmouseover="show(evt, '\'${d_pvLoc}\'')" onmouseout="hide(evt, '\'${d_pvLoc}\'')">'${d_pvLoc}${d_port_vlan_id}'</text>' >> $pictureFile
          addpopup "${d_pvLoc}" "${addVirtAdapText_x}" "${addVirtAdapText_y}" "${locColor}" "${pvLocData}"
	  if [ ${addConn} -eq 1 ]; then
            echo ${VioHostname[$a]}','${DeviceName}','$addVirtAdap_x','$addVirtAdap_y',pv='$pvId',vswitch='$(getValue "${pvLocData}" "vswitch")',' >> $helpFile
	  fi
          ((pvVlan_y=addVirtAdap_y+10))

          ((pvVlan_count=pvVlan_count+1))

          echo "addVlan: [${addVlan}]" |${LOG}
	  if [ ${#addVlan} -gt 0 ]; then
            echo "${addVlan}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read vlan
            do
              echo ${VioHostname[$a]}',vlan='$vlan','$pvVlan_y',pvid='$addVirtAdapId',vswitch='$(getValue "${pvLocData}" "vswitch")',' >> $helpFile
            done
	  fi
          ((sea_y=sea_y+40))
        fi
      done
      endVio_y=$sea_y	

      ##############################################################################
      # draw Ip address on adapter
      ##############################################################################
      ipaddressWorkFile="${WORK_AREA}ipaddressWorkFile"
      grep "${PDRAW_DEVICE_EN},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -iv "netaddr=Internet" | cut -f2- -d ":" > ${ipaddressWorkFile}
      cat ${ipaddressWorkFile} | while read ipaddressEntry
      do
        IpAddress="$(getValue "${ipaddressEntry}" "netaddr")"
        ipAddrBase="$(getValue "${ipaddressEntry}" "DeviceName")"
        echo "IpAddress: ${IpAddress}" |${LOG}
        echo "ipAddrBase: ${ipAddrBase}" |${LOG}
        adap_x="$(grep "${VioHostname[$a]},${ipAddrBase}," $helpFile | cut -f 3 -d ',')"
        adap_y="$(grep "${VioHostname[$a]},${ipAddrBase}," $helpFile | cut -f 4 -d ',')"
        adap_type="$(grep "${VioHostname[$a]},${ipAddrBase}," $helpFile | cut -f 5 -d ',')"
	if [ "${adap_type}" == "VLAN" ] || [ "${adap_type}" == "SEA" ] || [ "${adap_type}" == "ETHCH" ]; then
          ((ip_x=adap_x-5))
          ((ip_y=adap_y+12))
	else
          ((ip_x=adap_x+35))
          ((ip_y=adap_y))
	fi
        echo '<text x="'$ip_x'" y="'$ip_y'" style="font-size:10px">'${IpAddress}'</text>' >> $pictureFile
      done
     # if [ "${1}" == "NETWORK" ]; then
     #   echo "${ManagedSystem[$x]},${VioHostname[$a]},${endVio_y}" >> $vioHelp
     # fi
      vio_y=${endVio_y}
    fi
    if [ "${1}" == "VNIC" ] || [ "${1}" == "NETWORK" ] || [ "${1}" == "ALL" ]; then
      echo "processing VNIC: managedsystem: ${ManagedSystem[$x]} vio: ${VioHostname[$a]}" |${LOG}
      if [ ${vnicCon_x} -eq 0 ]; then
        vnicCon_x=$devCon_x
      fi
      # starting position for client partitions
      ((vlan_x2=startx+sizeViox+240))

      ((vnicadapter_x=startx-15))
      ((vnicphysport_x=startx+(sizeViox/2-20)))
      ((vniclogport_x=startx+sizeViox-15))
      ((vnic_y=vio_y+50))
      #########################################################################
      # set variables of vnic
      #########################################################################
      bkdevFile="${WORK_AREA}${ManagedSystem[$x]}_${VioHostname[$a]}.virtualvnicbkdev.tmp"
      sriovLogportFile="${WORK_AREA}${ManagedSystem[$x]}_${VioHostname[$a]}.sriovlogport.tmp"
      grep "${PDRAW_VIRTUALVNICBKDEV},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | cut -f2- -d ":" 1> ${bkdevFile} 2>>${LOG_FILE}
      # build unique list of adapter and port id
      if [ -s ${bkdevFile} ]; then
        cat "${bkdevFile}" | while read bkdevLine
	do
	  echo "$(getValue "${bkdevLine}" "adapter_id"),$(getValue "${bkdevLine}" "physical_port_id")" >> ${bkdevFile}.list
	done
	sort -t, -k1n -k2n -u -o ${bkdevFile}.list ${bkdevFile}.list
	save_adapter_id=""
	cat "${bkdevFile}.list" | while read bkdevLine
	do
	  # draw info
	  adapter_id="$(echo "${bkdevLine}" | cut -f 1 -d ",")"
          sriovadapterData="$(grep "${PDRAW_SRIOVADAPTER},${ManagedSystem[$x]}:" $configFile | grep "adapter_id=${adapter_id}," | cut -f2- -d ":")"
          echo "sriovadapterData: ${sriovadapterData}" |${LOG}
	  physical_port_id="$(echo "${bkdevLine}" | cut -f 2 -d ",")"
          sriovphysportData="$(grep "${PDRAW_SRIOVPHYSPORT},${ManagedSystem[$x]}:" $configFile | grep "adapter_id=${adapter_id}," | grep "phys_port_id=${physical_port_id}," | cut -f2- -d ":")"
          echo "sriovphysportData: ${sriovphysportData}" |${LOG}

	  # draw adapter
	  if [ "${adapter_id}" != "${save_adapter_id}" ]; then
	    save_adapter_id="${adapter_id}" 
	    phys_loc="$(getValue "${sriovadapterData}" "phys_loc")"
	    d_phys_loc="$(echo "${phys_loc}" | cut -f3- -d ".")"
            echo '<rect x="'$vnicadapter_x'" y="'$vnic_y'" width="35" height="12" fill="'${COLOR_SRIOV_ADAPTER}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile				
            ((a_baseLine_x1=vnicadapter_x+35))
            ((a_baseLine_y1=vnic_y+6))
            echo '<line x1="'$a_baseLine_x1'" y1="'$a_baseLine_y1'" x2="'$vnicphysport_x'" y2="'$a_baseLine_y1'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
            echo ${VioHostname[$a]}','${phys_loc}','$a_baseLine_x1','$a_baseLine_y1 >> $helpFile
            #((locText_x=vnicadapter_x-30))
            ((locText_x=startx-5))
            ((locText_y=vnic_y-3))
            echo '<text x="'$locText_x'" y="'$locText_y'" style="text-anchor:end;font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${d_phys_loc}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${d_phys_loc}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${d_phys_loc}\'')">'$(echo ${d_phys_loc} | cut -f3- -d ".")'</text>' >> $pictureFile
            addpopup "${VioHostname[$a]}_${d_phys_loc}" "${locText_x}" "${locText_y}" "${COLOR_SRIOV_ADAPTER}" "${sriovadapterData}"
	  else
	    # draw line from adapter to physical port
            echo '<line x1="'$(((a_baseLine_x1+20)))'" y1="'$(((vnic_y+6)))'" x2="'$vnicphysport_x'" y2="'$(((vnic_y+6)))'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
            echo '<line x1="'$(((a_baseLine_x1+20)))'" y1="'$(((vnic_y+6)))'" x2="'$(((a_baseLine_x1+20)))'" y2="'$a_baseLine_y1'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
            echo '<circle cx="'$(((a_baseLine_x1+20)))'" cy="'$baseLine_y1'" r="2" />' >> $pictureFile
	  fi

	  # draw physical port
	  phys_port_loc="$(getValue "${sriovphysportData}" "phys_port_loc")"
	  d_phys_port_loc="$(echo "${phys_port_loc}" | cut -f3- -d ".")"
          echo '<rect x="'$vnicphysport_x'" y="'$vnic_y'" width="35" height="12" fill="'${COLOR_SRIOV_PHYSPORT}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          ((baseLine_x1=vnicphysport_x+35))
          ((baseLine_y1=vnic_y+6))
          ((capacity_x1=vnicphysport_x+38))
          ((capacity_y1=vnic_y+15))
          echo ${VioHostname[$a]}','${phys_port_loc}','$baseLine_x1','$baseLine_y1 >> $helpFile

          ((locText_x=vnicphysport_x+18))
          ((locText_y=vnic_y+9))
	  portNumber="$(echo "${d_phys_port_loc}" | awk '{numP=split($0, Array, "-"); print Array[numP]}')"
          echo '<text x="'$locText_x'" y="'$locText_y'" style="text-anchor:middle;font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${d_phys_port_loc}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${d_phys_port_loc}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${d_phys_port_loc}\'')">'${portNumber}'</text>' >> $pictureFile
          addpopup "${VioHostname[$a]}_${d_phys_port_loc}" "${locText_x}" "${locText_y}" "${COLOR_SRIOV_PHYSPORT}" "${sriovphysportData}"

	  # draw vnic logical ports
	  grep "${PDRAW_SRIOVLOGPORT},${ManagedSystem[$x]}:" $configFile | grep "lpar_name=${VioHostname[$a]}," | grep "adapter_id=${adapter_id}," | grep "phys_port_id=${physical_port_id}," | grep "is_vnic_backing_device=1" | cut -f2- -d ":" 1>${sriovLogportFile} 2>>${LOG_FILE}
	  if [ -s "${sriovLogportFile}" ]; then
	    typeset -f capacity=0.0
	    capacityData=""
	    capacitySep=""
	    numP=$(wc -l ${sriovLogportFile} | awk '{print $1}')
	    curCount=1
	    cat "${sriovLogportFile}" | while read logportEntry
	    do
	      fillcolor="${COLOR_VNIC_BKDEV}"
              typeset -f current_capacity=$(getValue "${logportEntry}" "capacity")
              ((capacity=capacity+current_capacity))
              vnicLoc="$(getValue "${logportEntry}" "location_code")"
	      d_vnicLoc="$(echo "${vnicLoc}" | cut -f3- -d ".")"
              vnicEntDeviceData="$(grep "${PDRAW_DEVICE_ENT},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "PhysLoc=${vnicLoc}," | cut -f2- -d ":")"
              vnicName="$(getValue "${vnicEntDeviceData}" "DeviceName")"
	      capacityData="${capacityData}${capacitySep}location_code=${d_vnicLoc}:${current_capacity}%"
	      capacitySep=","
              echo "process vnic: ${vnicName}" |${LOG}
              echo '<rect x="'$vniclogport_x'" y="'$vnic_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
	      # draw conector line to physport
	      if [ ${curCount} -eq 1 ]; then
                echo '<line x1="'$baseLine_x1'" y1="'$(((vnic_y+6)))'" x2="'$vniclogport_x'" y2="'$(((vnic_y+6)))'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
	      else
                echo '<line x1="'$(((vniclogport_x-25)))'" y1="'$(((vnic_y+6)))'" x2="'$vniclogport_x'" y2="'$(((vnic_y+6)))'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
	      fi
  	      if [ ${numP} -gt 1 ] && [ ${curCount} -lt ${numP} ]; then
                echo '<circle cx="'$(((vniclogport_x-25)))'" cy="'$(((vnic_y+6)))'" r="2" />' >> $pictureFile
  	      elif [ ${numP} -gt 1 ] && [ ${curCount} -eq ${numP} ]; then
                echo '<line x1="'$(((vniclogport_x-25)))'" y1="'$baseLine_y1'" x2="'$(((vniclogport_x-25)))'" y2="'$(((vnic_y+6)))'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
  	      fi
	      ((curCount=curCount+1))
            
              ((vnicLine_x=vniclogport_x+35))
              ((vnicLine_y=vnic_y+6))
              VNICcolor="$(echo "${COLOR_VNIC_CONNECTOR}" | cut -f ${colorVnicNum} -d ":")"
              if [ ${#VNICcolor} -eq 0 ]; then
                colorVnicNum=1
                VNICcolor="$(echo "${COLOR_VNIC_CONNECTOR}" | cut -f ${colorVnicNum} -d ":")"
              fi
              ((colorVnicNum+=1))
              logical_port_id="$(getValue "${logportEntry}" "logical_port_id")"
              vnicDeviceData="$(grep "${PDRAW_VIRTUALVNIC},${ManagedSystem[$x]}," $configFile | grep "/${logical_port_id}/" | cut -f2- -d ":")"
              vnic_lpar_name="$(getValue "${vnicDeviceData}" "lpar_name")"
              vnic_lpar_id="$(getValue "${vnicDeviceData}" "lpar_id")"
              vnic_slot_num="$(getValue "${vnicDeviceData}" "slot_num")"
	      groupID="g_${vnic_lpar_name}_${vnic_lpar_id}${vnic_slot_num}"
	      echo "GROUP:${groupID}" >>$groupFile
              echo ${groupID}:'<line x1="'$vnicLine_x'" y1="'$vnicLine_y'" x2="'$vnicCon_x'" y2="'$vnicLine_y'" style="stroke:'${VNICcolor}';stroke-width:1;" />' >> $groupFile
              echo ${groupID}:'<circle cx="'$vnicCon_x'" cy="'$vnicLine_y'" r="2" fill="'${VNICcolor}'" />' >> $groupFile	
              echo "${VioHostname[$a]},$logical_port_id,$vnicLine_x,$vnicLine_y,${vnicCon_x},${VNICcolor},${d_vnicLoc}" >> $helpFile
              #((VNICshade=VNICshade-20))
              #((vnicCon_x+=20))
              
              ((vnicText_x=vniclogport_x+5))
              ((vnicText_y=vnic_y+11))
              echo '<text x="'$vnicText_x'" y="'$vnicText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${vnicName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${vnicName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${vnicName}\'')">'$vnicName'</text>' >> $pictureFile
              # add popup object
              addpopup "${VioHostname[$a]}_${vnicName}" "${vnicText_x}" "${vnicText_y}" "${fillcolor}" "${vnicEntDeviceData}"
            
              #((vnicLoc_x=vniclogport_x+18))
              ((vnicLoc_x=startx+sizeViox+5))
              ((vnicLoc_y=vnic_y-3))
              echo '<text x="'$vnicLoc_x'" y="'$vnicLoc_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${d_vnicLoc}\'')" onmouseover="show(evt, '\'${d_vnicLoc}\'')" onmouseout="hide(evt, '\'${d_vnicLoc}\'')">'$d_vnicLoc'</text>' >> $pictureFile
              addpopup "${d_vnicLoc}" "${vnicLoc_x}" "${vnicLoc_y}" "${fillcolor}" "${logportEntry}"
              ((vnic_y+=30))
	    done
	    # write out the current total capacity
            echo '<text x="'$capacity_x1'" y="'$capacity_y1'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${d_phys_port_loc}_capacity\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${d_phys_port_loc}_capacity\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${d_phys_port_loc}_capacity\'')">capacity: '${capacity}'%</text>' >> $pictureFile
            addpopup "${VioHostname[$a]}_${d_phys_port_loc}_capacity" "${capacity_x1}" "${capacity_y1}" "${COLOR_SRIOV_PHYSPORT}" "${capacityData}"
	  else
            echo "no sriovlogport devices to process" |${LOG}
	  fi
	done
	if [ ${vnicCon_x} -eq ${devCon_x} ]; then
          ((devCon_x=devCon_x+20))
	fi
      else
        echo "no VNICBKDEV devices to process" |${LOG}
      fi
      endVio_y=$vnic_y	
      if [ "${1}" == "VNIC" ] || [ "${1}" == "NETWORK" ]; then
        echo "${ManagedSystem[$x]},${VioHostname[$a]},${endVio_y}" >> $vioHelp
      fi
      vio_y=${endVio_y}
    fi
    if [ "${1}" == "STORAGE" ] || [ "${1}" == "ALL" ]; then
      if [ ${devCon_x} -gt ${devCon_x_save} ]; then
        ((devCon_x=devCon_x+20))
	devCon_x_save=${devCon_x}
      fi
      #########################################################################
      # set variables of FCS
      #########################################################################
      fcsWorkFile="${WORK_AREA}fcsWorkFile"

      ((fcsName_x=startx+sizeViox-15))
      ((fcsName_y=vio_y+50))

 
      grep "${PDRAW_DEVICE_FCS},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | cut -f2- -d ":" > ${fcsWorkFile}
      cat ${fcsWorkFile} | while read fcsEntry
      do
        fillcolor="${COLOR_FC_PHYSPORT}"
        fcsName="$(getValue "${fcsEntry}" "DeviceName")"
        echo "process fcs: ${fcsName}" |${LOG}
        echo '<rect x="'$fcsName_x'" y="'$fcsName_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile

        ((fcsLine_x=fcsName_x+35))
        ((fcsLine_y=fcsName_y+6))
        FCScolor="$(echo "${COLOR_FC_CONNECTOR}" | cut -f ${colorFcsNum} -d ":")"
        if [ ${#FCScolor} -eq 0 ]; then
          colorFcsNum=1
          FCScolor="$(echo "${COLOR_FC_CONNECTOR}" | cut -f ${colorFcsNum} -d ":")"
        fi
        ((colorFcsNum+=1))
	groupID="g_${VioHostname[$a]}_${fcsName}"
	echo "GROUP:${groupID}" >>$groupFile
        echo ${groupID}:'<line x1="'$fcsLine_x'" y1="'$fcsLine_y'" x2="'$devCon_x'" y2="'$fcsLine_y'" style="stroke:'${FCScolor}';stroke-width:1;" />' >> $groupFile
        echo ${groupID}:'<circle cx="'$devCon_x'" cy="'$fcsLine_y'" r="2" fill="'${FCScolor}'" />' >> $groupFile
        echo "${VioHostname[$a]},$fcsName,$fcsLine_x,$fcsLine_y,${devCon_x},${FCScolor},${fcsEntry}" >> $helpFile
        ((devCon_x+=20))
        
        ((fcsText_x=fcsName_x+5))
        ((fcsText_y=fcsName_y+11))
        echo '<text x="'$fcsText_x'" y="'$fcsText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${fcsName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${fcsName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${fcsName}\'')">'$fcsName'</text>' >> $pictureFile
        # add popup object
        addpopup "${VioHostname[$a]}_${fcsName}" "${fcsText_x}" "${fcsText_y}" "${fillcolor}" "${fcsEntry}"
 
        ###########################################################################
        # draw fscsi device
        ###########################################################################
        fscsi_x=$((fcsName_x+18))
        fscsi_y=$((fcsName_y+12))
        fscsiDeviceName="fscsi$(echo ${fcsName} | tr -dc "[:digit:]")"
        echo "fscsiDeviceName:  ${fscsiDeviceName}" |${LOG}
        fscsiDeviceAttr="$(grep "${PDRAW_DEVICE_FSCSI},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -i "DeviceName=${fscsiDeviceName}," | cut -f2- -d ":")"
        echo '<rect x="'$fscsi_x'" y="'$fscsi_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
        fscsiText_x=$((fscsi_x+5))
        fscsiText_y=$((fscsi_y+11))
        echo '<text x="'$fscsiText_x'" y="'$fscsiText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${fscsiDeviceName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${fscsiDeviceName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${fscsiDeviceName}\'')">'${fscsiDeviceName}'</text>' >> $pictureFile
        # add popup object
        addpopup "${VioHostname[$a]}_${fscsiDeviceName}" "${fscsiText_x}" "${fscsiText_y}" "${fillcolor}" "${fscsiDeviceAttr}"
        echo ${VioHostname[$a]}','$fscsiDeviceName','$fscsiText_x','$fscsiText_y >> $helpFile
 
        fcsLoc="$(getValue "${fcsEntry}" "PhysLoc")"
        d_fcsLoc="$(echo "${fcsLoc}" | cut -f3- -d ".")"
    	fcsLocData="$(grep "${PDRAW_SLOTCHILDREN},${ManagedSystem[$x]}:" $configFile | grep "phys_loc=${fcsLoc}," | grep "wwpn=" | cut -f2- -d ":")"
        #((fcsLoc_x=fcsName_x+18))
        ((fcsLoc_x=startx+sizeViox+5))
        ((fcsLoc_y=fcsName_y-3))
        echo '<text x="'$fcsLoc_x'" y="'$fcsLoc_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${d_fcsLoc}\'')" onmouseover="show(evt, '\'${d_fcsLoc}\'')" onmouseout="hide(evt, '\'${d_fcsLoc}\'')">'$d_fcsLoc'</text>' >> $pictureFile
        addpopup "${d_fcsLoc}" "${fcsLoc_x}" "${fcsLoc_y}" "${fillcolor}" "${fcsLocData}"
        ((fcsName_y+=40))
      done
      endVio_y=$fcsName_y

      #########################################################################
      # set variables of ISCSI
      #########################################################################
      iscsiWorkFile="${WORK_AREA}iscsiWorkFile"

      ((iscsiName_x=startx+sizeViox-15))
      ((iscsiName_y=endVio_y))
      ((iscsiDevName_x=iscsiName_x-50))

      saved_name=""
      grep "${PDRAW_ELEMENT_ISCSI},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep -iv "HSCL350B" | cut -f2- -d ":" | sort -t, -k1 > ${iscsiWorkFile}
      totalCount="$(cat ${iscsiWorkFile} | wc -l)"
      entryCount=0
      cat ${iscsiWorkFile} | while read iscsiEntry
      do
        ((entryCount=entryCount+1))
        fillcolor="${COLOR_ISCSI_PHYSPORT}"
        name="$(getValue "${iscsiEntry}" "name")"
        address="$(getValue "${iscsiEntry}" "address")"
        iscsiName="${name}-${address}"
	# create GROUP
	groupID="g_${VioHostname[$a]}_${iscsiName}"
	echo "GROUP:${groupID}" >>$groupFile
        echo "process iscsi: ${iscsiName}" |${LOG}

	if [ "${saved_name}" != "${name}" ]; then
          iscsiDevAttr="$(grep "${DEVICE_ISCSI},${ManagedSystem[$x]},${VioHostname[$a]}:DeviceName=${name}," $configFile | cut -f2- -d ":")"
	  ((iscsiDevName_y=iscsiName_y))
          echo '<rect x="'$iscsiDevName_x'" y="'$iscsiDevName_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile

          ((iscsiDevText_x=iscsiDevName_x+5))
          ((iscsiDevText_y=iscsiDevName_y+11))
          echo '<text x="'$iscsiDevText_x'" y="'$iscsiDevText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${name}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${name}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${name}\'')">'$name'</text>' >> $pictureFile
          # add popup object
          addpopup "${VioHostname[$a]}_${name}" "${iscsiDevText_x}" "${iscsiDevText_y}" "${fillcolor}" "${iscsiDevAttr}"

          ((iscsiDevLine_x=iscsiDevName_x+35))
          ((iscsiDevLine_y=iscsiDevName_y+6))
          echo '<line x1="'$iscsiDevLine_x'" y1="'$iscsiDevLine_y'" x2="'$iscsiName_x'" y2="'$iscsiDevLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
	  saved_name="${name}"
	fi
	# draw connector lines and circles
        echo '<line x1="'$(((iscsiName_x-7)))'" y1="'$(((iscsiName_y+6)))'" x2="'$iscsiName_x'" y2="'$(((iscsiName_y+6)))'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
	if [ ${entryCount} -lt ${totalCount} ]; then
          echo '<circle cx="'$(((iscsiName_x-7)))'" cy="'$(((iscsiName_y+6)))'" r="2" fill="'${ISCSIcolor}'" />' >> $pictureFile	
	else
          echo '<line x1="'$(((iscsiName_x-7)))'" y1="'$(((iscsiName_y+6)))'" x2="'$(((iscsiName_x-7)))'" y2="'$iscsiDevLine_y'" style="stroke:black;stroke-width:1;" />' >> $pictureFile
	fi

        echo '<rect x="'$iscsiName_x'" y="'$iscsiName_y'" width="70" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >>$pictureFile
        ((iscsiLine_x=iscsiName_x+70))
        ((iscsiLine_y=iscsiName_y+6))
        ISCSIcolor="$(echo "${COLOR_ISCSI_CONNECTOR}" | cut -f ${colorIscsiNum} -d ":")"
        if [ ${#ISCSIcolor} -eq 0 ]; then
          colorIscsiNum=1
          ISCSIcolor="$(echo "${COLOR_ISCSI_CONNECTOR}" | cut -f ${colorIscsiNum} -d ":")"
        fi
        ((colorIscsiNum+=1))
        echo ${groupID}:'<line x1="'$iscsiLine_x'" y1="'$iscsiLine_y'" x2="'$devCon_x'" y2="'$iscsiLine_y'" style="stroke:'${ISCSIcolor}';stroke-width:1;" />' >> $groupFile
        echo ${groupID}:'<circle cx="'$devCon_x'" cy="'$iscsiLine_y'" r="2" fill="'${ISCSIcolor}'" />' >> $groupFile	
        echo "${VioHostname[$a]},$iscsiName,$iscsiLine_x,$iscsiLine_y,${devCon_x},${ISCSIcolor},${iscsiEntry}" >> $helpFile
        ((devCon_x+=20))
        
        ((iscsiText_x=iscsiName_x+5))
        ((iscsiText_y=iscsiName_y+11))
        echo '<text x="'$iscsiText_x'" y="'$iscsiText_y'" style="font-size:10px" onclick="displayAttributes(evt, '\'${VioHostname[$a]}_${iscsiName}\'')" onmouseover="show(evt, '\'${VioHostname[$a]}_${iscsiName}\'')" onmouseout="hide(evt, '\'${VioHostname[$a]}_${iscsiName}\'')">'$address'</text>' >> $pictureFile
        # add popup object
        addpopup "${VioHostname[$a]}_${iscsiName}" "${iscsiText_x}" "${iscsiText_y}" "${fillcolor}" "${iscsiEntry}"
 
        ((iscsiName_y+=20))
      done
      endVio_y=$fcsName_y





      ((vhost_x=startx+10))
      ((vhost_y=vio_y+80))
      #######################################################
      # draw vhost-client references
      #######################################################
      clientvirtualWorkFile="${WORK_AREA}clientvirtualWorkFile"
      vhostFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_${VioHostname[$a]}_vhost"
      grep -E "${PDRAW_VIRTUALSCSI},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | cut -f2- -d ':' > ${clientvirtualWorkFile}
      cat ${clientvirtualWorkFile} | while read clientvirtualEntry
      do
        slot_num="$(getValue "${clientvirtualEntry}" "slot_num")"
        lpar_id="$(getValue "${clientvirtualEntry}" "lpar_id")"
        remote_lpar_name="$(getValue "${clientvirtualEntry}" "remote_lpar_name")"
        testClient="found"
        if [ ${#PARTITIONLIST} -gt 0 ]; then
          testClient="$(echo ",${PARTITIONLIST}," | grep ",${remote_lpar_name},")"
        fi
        if [ ${#testClient} -gt 0 ]; then
          vhostInfo="$(grep "${PDRAW_LSMAP_SCSI},${ManagedSystem[$x]},${VioHostname[$a]}:" $configFile | grep "\\-V${lpar_id}\\-C${slot_num}," | cut -f 2 -d ":" | tr -d " ")"
          echo "slot_num: ${slot_num} lpar_id: ${lpar_id} remote_lpar_name: ${remote_lpar_name} vhostInfo: ${vhostInfo}" |${LOG}
          if [ ${#vhostInfo} -gt 0 ]; then
            clientVhost="$(echo "${vhostInfo}" | cut -f 1 -d ",")"
            clientLuns="$(echo "${vhostInfo}" | cut -f4- -d ",")"
            attributeList=""
            sep=""
            #vtd status lun backing bdphysloc mirrored
            echo "${clientLuns}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i+=6) print Array[i],Array[i+1],Array[i+2],Array[i+3],Array[i+4],Array[i+5]}' | while read vtd status lun backingdevice bdphysloc mirrored 
            do
              attributeList="${attributeList}${sep}vtd:${vtd}!status:${status}!lun:${lun}!backingdevice:${backingdevice}!bdphysloc:${bdphysloc}!mirrored:${mirrored}"
              sep="!"
            done
            attributeList="name=${remote_lpar_name},vhost=${clientVhost}!${attributeList}"
	    echo "${attributeList}" >> $vhostFile
          fi
	fi
      done
      #numWritten=0
      if [ -f ${vhostFile} ]; then
        echo '<text x="'$vhost_x'" y="'$(((vhost_y-10)))'" style="text-anchor:start;font-size:12px;text-decoration:underline">Partition VSCSI Mapping</text>' >> $pictureFile
	ostype="$(uname -a | grep -i aix)"
	if [ ${#ostype} -gt 0 ]; then
          sort -t, -k 1.6 -z 32768 -o ${vhostFile}.sort ${vhostFile}
	else
          sort -t, -k 1.6 -o ${vhostFile}.sort ${vhostFile}
	fi
        awk -F, '{a[$1]=(a[$1])?a[$1]","$2:$1","$2}END{for (i in a){print a[i]}}' ${vhostFile}.sort >> ${vhostFile}.combined
	if [ ${#ostype} -gt 0 ]; then
          sort -t, -k 1.6 -z 32768 -o ${vhostFile}.combined.sort ${vhostFile}.combined
	else
          sort -t, -k 1.6 -o ${vhostFile}.combined.sort ${vhostFile}.combined
	fi
	cat ${vhostFile}.combined.sort | while read vhostInfo
	do
          remote_lpar_name="$(echo "${vhostInfo}" | cut -f 1 -d "," | cut -f 2 -d "=")"
	  typeset -i width_remote_lpar_name=${#remote_lpar_name}
	  width_remote_lpar_name=$((width_remote_lpar_name*7))
          attributeList="$(echo "${vhostInfo}" | cut -f2- -d "," | tr "!" ",")"

          echo '<rect x="'$vhost_x'" y="'$vhost_y'" width="'${width_remote_lpar_name}'px" height="15" fill="'${COLOR_CLIENT_VHOST}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          ((vhostText_x=vhost_x+3))
          ((vhostText_y=vhost_y+12))
          echo '<text textLength="'$(((width_remote_lpar_name-5)))'" x="'$vhostText_x'" y="'$vhostText_y'" style="text-anchor:start;font-size:12px" onclick="displayAttributes(evt, '\'vhost_${VioHostname[$a]}_${remote_lpar_name}\'')" onmouseover="show(evt, '\'vhost_${VioHostname[$a]}_${remote_lpar_name}\'')" onmouseout="hide(evt, '\'vhost_${VioHostname[$a]}_${remote_lpar_name}\'')">'${remote_lpar_name}'</text>' >> $pictureFile
          addpopup "vhost_${VioHostname[$a]}_${remote_lpar_name}" "${vhostText_x}" "${vhostText_y}" "${COLOR_CLIENT_VHOST}" "${attributeList}"
          ((vhost_x=startx+10))
          ((vhost_y+=15))
	done
      fi
      ((vhost_y+=30))
      if [ ${vhost_y} -gt ${endVio_y} ]; then	
        endVio_y=${vhost_y}
      fi
      echo "${ManagedSystem[$x]},${VioHostname[$a]},${endVio_y}" >> $vioHelp
    fi
    ((vio_y=endVio_y+offsety))
    ((a=a+1))
  done
  echo "<-- drawVio ${1}, RC=${RC}" |${LOG}
}

#################################################################################
# Function to draw virtual LANs							#
#################################################################################
drawVlan () {
  echo "--> drawVlan" |${LOG}
  unset switchArray
  ((vlan_y2=pictureSize_y-50))
  ####################################################################################
  # draw virtual switches
  ####################################################################################
  # obtain list of all switches and compare against list being used by SEA's.
  # display internal vswith and change the color to show diff
  allSwitches="$(grep "${PDRAW_VSWITCH},${ManagedSystem[$x]}," $configFile | cut -f 3 -d "," | cut -f 1 -d ":" | sort)"
  echo "allSwitches: [${allSwitches}]" |${LOG}
  useSwitches="$(grep ",pv=" $helpFile | grep -v ",ctl=" | cut -f 6 -d "," | sort -u | cut -f 2 -d "=" | tr "\n" "|")"
  echo "useSwitches: [${useSwitches}]" |${LOG}
  useSwitches="${useSwitches%\|}"
  #useSwitches="${useSwitches#\|}"
  echo "useSwitches: [${useSwitches}]" |${LOG}
  addSwitches="$(echo "${allSwitches}" | grep -Evw "${useSwitches}" | tr "\n" ",")"
  echo "addSwitches: [${addSwitches}]" |${LOG}
  addSwitches="${addSwitches%,}"
  echo "addSwitches: ${addSwitches}" |${LOG}
  useSwitches="${useSwitches//\|/:sea,}"
  useSep=""
  if [ ${#useSwitches} -gt 0 ]; then
    useSwitches="${useSwitches}:sea"
    useSep=","
  fi
  echo "${addSwitches}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read addEntry
  do
    useSwitches="${useSwitches}${useSep}${addEntry}:local"
  done 
  echo "useSwitches: ${useSwitches}" |${LOG}

  pvlanWorkFile="${WORK_AREA}pvlanWorkFile"
  grep ',pv=' $helpFile | grep -v ",ctl=" | cut -f 6 -d ',' | sort -u | cut -f 2 -d '=' > ${pvlanWorkFile}
  text_y1=$((starty-12))
  ((pv_x1=startx+sizeViox+20))
  #((pv_x2=pv_x1+80))
  #((pv_x2=pv_x1+100))
  pvVlanx_min=5000
  pvVlanx_max=0
  echo "${useSwitches}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read switchEntry
  do
    switchName="$(echo "${switchEntry}" | cut -f 1 -d ":")"
    switchEnv="$(echo "${switchEntry}" | cut -f 2 -d ":")"
    if [ "${switchEnv}" == "local" ]; then
      fillcolor="$(echo "${COLOR_VSWITCH_INTERNAL_CONNECTOR}" | cut -f ${colorVswitchInternalNum} -d ":")"
      if [ ${#fillcolor} -eq 0 ]; then
        colorVswitchInternalNum=1
        fillcolor="$(echo "${COLOR_VSWITCH_INTERNAL_CONNECTOR}" | cut -f ${colorVswitchInternalNum} -d ":")"
      fi
      ((colorVswitchInternalNum+=1))
    else
      fillcolor="$(echo "${COLOR_VSWITCH_CONNECTOR}" | cut -f ${colorVswitchNum} -d ":")"
      if [ ${#fillcolor} -eq 0 ]; then
        colorVswitchNum=1
        fillcolor="$(echo "${COLOR_VSWITCH_CONNECTOR}" | cut -f ${colorVswitchNum} -d ":")"
      fi
      ((colorVswitchNum+=1))
    fi
    echo "add virtual network: ${switchEntry}" |${LOG}
    trunkWorkFile="${WORK_AREA}trunk_${switchName}_WorkFile"
    pv_yWorkFile="${WORK_AREA}pv_yWorkFile"
    grep ',vswitch='${switchName}',' $helpFile | grep -v ",ctl=" | grep ',pv=' > ${pv_yWorkFile}
    cat ${pv_yWorkFile} | while read pvEntry
    do
      echo "pvEntry: ${pvEntry}" |${LOG}
      pv_yEntry="$(echo "${pvEntry}" | cut -f 4 -d ",")"
      pvId="$(echo "${pvEntry}" | cut -f 5 -d "," | cut -f 2 -d "=")"
      pvidEntry="$(grep ",vlan=${pvId}," $helpFile | grep -v ",ctl=" | head -1 | grep ",vswitch=${switchName}," | cut -f 4 -d "," | cut -f 2 -d "=")"
      if [ ${#pvidEntry} -gt 0 ]; then
        groupID="g_${switchName}_${pvidEntry}"
      else  
        groupID="g_${switchName}_${pvId}"
	echo "${pvId}" >> ${trunkWorkFile}
      fi
      ((pv_y2=${pv_yEntry}+6)) 
      echo ${groupID}:'<line x1="'$pv_x1'" y1="'$pv_y2'" x2="'$devCon_x'" y2="'$pv_y2'" style="stroke:'${fillcolor}';stroke-width:1" />' >> $groupFile
      echo ${groupID}:'<circle cx="'$devCon_x'" cy="'$pv_y2'" r="2" fill="'${fillcolor}'" />' >> $groupFile		
    done	
    # label as bridged(b), unbridged(ub)
    brValue="(B)"
    sbrValue="${brValue}%${switchName}"
    sDescription="(B)=Bridged Network,switch=${switchName}"
    if [ "${switchEnv}" == "local" ]; then
      brValue="(UB)"
      sbrValue="${brValue}%${switchName}"
      sDescription="(UB)=Unbridged Network,switch=${switchName}"
    fi
    echo '<text x="'$devCon_x'" y="'$(((starty-2)))'" style="fill:black;font-size:10px;text-anchor:middle;" onclick="displayAttributes(evt, '\'${sbrValue}\'')" onmouseover="show(evt, '\'${sbrValue}\'')" onmouseout="hide(evt, '\'${sbrValue}\'')">'${brValue}'</text>' >> $pictureFile
    addpopup "${sbrValue}" "${devCon_x}" "$(((starty-2)))" "antiquewhite" "${sDescription}"

    #echo '<line x1="'$devCon_x'" y1="'$starty'" x2="'$devCon_x'" y2="'$vlan_y2'" style="stroke:'${fillcolor}';stroke-width:1" />' >> $pictureFile
    # v10.17
    if [ -s ${trunkWorkFile} ]; then
      cat ${trunkWorkFile} | sort -u | while read trunkEntry
      do
        echo "g_${switchName}_${trunkEntry}:"'<line x1="'$devCon_x'" y1="'$starty'" x2="'$devCon_x'" y2="'$vlan_y2'" style="stroke:'${fillcolor}';stroke-width:1" />' >> $groupFile
      done
    fi
    attributeList="$(grep "${PDRAW_VSWITCH},${ManagedSystem[$x]},${switchName}:" $configFile | cut -f2- -d ":")"
    echo "ManagedSystem[$x]: ${ManagedSystem[$x]} switchName: ${switchName} attributeList: ${attributeList}" |${LOG}
    switchArray[${#switchArray[*]}]="${switchName},${devCon_x},${fillcolor},${attributeList}"

    ###################################################################################
    # draw Control Channel VLANs 
    ###################################################################################
    ctlLanWorkFile="${WORK_AREA}ctlLanWorkFile"
    ((ctl_x1=startx+sizeViox+20))
    grep ',ctl=' $helpFile | grep ",vswitch=${switchName}," | sort -u > ${ctlLanWorkFile}
    cat ${ctlLanWorkFile} | while read ctlLanEntry
    do
      ctl_y_offset="$(echo "${ctlLanEntry}" | cut -f 4 -d ",")"
      pvId="$(echo "${ctlLanEntry}" | cut -f 5 -d "," | cut -f 2 -d "=")"
      groupID="g_${switchName}_${pvId}"
      echo "ctl_y_offset: ${ctl_y_offset}" |${LOG}
      echo "vswitch: ${vswitch}" |${LOG}
      ((ctl_y2=ctl_y_offset+6))
      echo "GROUP:${groupID}" >>$groupFile
      echo ${groupID}:'<line x1="'$ctl_x1'" y1="'$ctl_y2'" x2="'$devCon_x'" y2="'$ctl_y2'" style="stroke:'${fillcolor}';stroke-width:1;stroke-dasharray:2px, 2px" />' >> $groupFile
      echo ${groupID}:'<circle cx="'$devCon_x'" cy="'$ctl_y2'" r="2" fill="'${fillcolor}'" />' >> $groupFile
    done

    if [ $devCon_x -lt $pvVlanx_min ]; then
      pvVlanx_min=$devCon_x
    fi
    if [ $pvVlanx_max -lt $devCon_x ]; then
      pvVlanx_max=$devCon_x
    fi
    echo 'addvlan='${switchName}','$devCon_x','${fillcolor}','${switchEnv} >> $helpFile
    ((devCon_x=devCon_x+30))
  done
  echo '<text x="'$((pvVlanx_min-20))'" y="'$text_y1'" style="font-size:12px">'vSwitch'</text>' >> $pictureFile
  vlan_x2=${devCon_x}

  #########################################################################
  # check for additional VLANs, not supported via VIO
  #########################################################################
  addVlanString=''
  vlan1WorkFile="${WORK_AREA}vlan1WorkFile"
  addSep=""
  grep "${PDRAW_VIRTUALIO},${ManagedSystem[$x]}," $configFile | awk -F, '{for(i = 1; i <= NF; ++i) { n = index($i, "="); if(n) { vars[substr($i, 1, n - 1)] = substr($i, n + 1); curVar=substr($i, 1, n - 1) } else { vars[curVar]=(vars[curVar]","substr($i, n + 1)) } } } { print (vars["vswitch"]","vars["lpar_name"]","vars["port_vlan_id"])}' | sort -u > ${vlan1WorkFile}
  cat ${vlan1WorkFile} | while read vlan1Entry 
  do
    vswitch="$(echo "${vlan1Entry}" | cut -f 1 -d ",")"
    vlan="$(echo "${vlan1Entry}" | cut -f 3 -d ",")"
    addVlanIdTest="$(grep -E ",vlan=${vlan},|,pvid=${vlan},|,ctl=${vlan},|,pv=${vlan}," $helpFile | grep ",vswitch=${vswitch},")"
    echo "check vlan1[$y]: ${vlan1Entry} addVlanIdTest: [${addVlanIdTest}]" |${LOG}
    if [ ${#addVlanIdTest} -eq 0 ]; then
      # check switchArray for switch that is not bridged
      checkLocal="$(grep "addvlan=${vswitch}," $helpFile | grep ",local")"
      echo "checkLocal: ${checkLocal} file: ${helpFile} vswitch: ${vswitch}" |${LOG}
      if [ ${#checkLocal} -eq 0 ]; then
        addVlanString="${addVlanString}${addSep}$(echo "${vlan1Entry}" | tr "," ":")"
        echo "vlan1 addVlanString: ${addVlanString}" |${LOG}
	addSep=","
      fi
    fi
  done

  ################################################################
  # draw VLANs not provided via VIO
  ################################################################
  if [ ${#addVlanString} -gt 0 ]; then
    addVlanStringFile="${WORK_AREA}${ManagedSystem[$x]}_addVlanString"
    echo "${addVlanString}" | tr "," "\n" > ${addVlanStringFile}
    sort -t: -k1 -k2 -o ${addVlanStringFile} ${addVlanStringFile}
    awk -F':' 'BEGIN { getline; id=$1; line=$0 } { if ($1 != id) { print line; line = $0; } else { line = line "," $2 ":" $3; } id=$1; } END { print line; }' ${addVlanStringFile} > ${addVlanStringFile}.combined
    cat ${addVlanStringFile}.combined | while read addVlanLine
    do
      echo "addVlanLine (BM): ${addVlanLine}" |${LOG}
      switchName="$(echo "${addVlanLine}" | cut -f 1 -d ":")"
      popswitchName="${switchName}%(BM)"
      vlanData1="$(echo "${addVlanLine}" | cut -f2- -d ":")"
      echo "${vlanData1}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read vlanDataEntry
      do
        vlanData="${vlanData}${tSep}name:vlan=${vlanDataEntry}"
        echo 'UBvlan='$(echo "${vlanDataEntry}" | cut -f 2 -d ":")','$vlan_x2',vswitch='${switchName}',' >> $helpFile
	tSep=","
      done

      # create groupID for (BM) switch
      groupID="g_${switchName}_BM"
      echo "GROUP:${groupID}" >>$groupFile

      attributeList="description=bridged network but VLAN's missing in trunk adapters,${vlanData}"
      echo ${groupID}:'<line x1="'$vlan_x2'" y1="'$starty'" x2="'$vlan_x2'" y2="'$vlan_y2'" style="stroke:'${COLOR_UNBRIDGED_VLANS}';stroke-width:1" />' >> $groupFile
      brValue="(BM)"
      sbrValue="${brValue}%${switchName}"
      sDescription="(BM)=Bridged Network but VLAN's missing in trunk adapters,switch=${switchName}"

      #echo '<text x="'$vlan_x2'" y="'$(((starty-2)))'" style="fill:black;font-size:10px;text-anchor:middle;">'${brValue}'</text>' >> $pictureFile

      echo '<text x="'$vlan_x2'" y="'$(((starty-2)))'" style="fill:black;font-size:10px;text-anchor:middle;" onclick="displayAttributes(evt, '\'${sbrValue}\'')" onmouseover="show(evt, '\'${sbrValue}\'')" onmouseout="hide(evt, '\'${sbrValue}\'')">'${brValue}'</text>' >> $pictureFile
      addpopup "${sbrValue}" "${devCon_x}" "$(((starty-2)))" "antiquewhite" "${sDescription}"

      echo '<text x="'$(((vlan_x2+6)))'" y="'$starty'" style="fill:'${COLOR_UNBRIDGED_VLANS}';font-size:10px;writing-mode:tb;text-orientation:upright" onclick="displayAttributes(evt, '\'${popswitchName}\'')" onmouseover="show(evt, '\'${popswitchName}\'')" onmouseout="hide(evt, '\'${popswitchName}\'')">'${switchName}'</text>' >>$pictureFile
      addpopup "${popswitchName}" "$(((vlan_x2+6)))" "${starty}" "antiquewhite" "${attributeList}"
      echo 'addvlan='${vlan[$b]}','$vlan_x2','$vlan_y1 >> $helpFile
      ((vlan_x2=vlan_x2+30))
      ((b=b+1))
    done
  fi
  clientStart_x=${vlan_x2}
  echo "<-- drawVlan, RC=${RC}" |${LOG}
}

#################################################################################
# Function to draw vertical lines for FCS connections				#
#################################################################################
drawFcsCon () {

  if [ "${1}" == "VIO" ]; then
    echo "drawFcsCon: $1" |${LOG}
    ((vlan_y2=pictureSize_y-50))
    ####################################################################################
    # draw fcs vertical lines
    ####################################################################################
    text_y1=$((starty-12))
    fcs_y1=${starty}
    #((fcs_y2=pictureSize_y-50))
    ((fcs_y2=pictureSize_y))
    fcsx_min=0
  else
    echo "drawFcsCon: $1 $2" |${LOG}
    text_y1=$((${2}-12))
    fcs_y1=${2}
  fi

  vioNameSave=""

  fcsConWorkFile="${WORK_AREA}fcsConWorkFile"
  grep -E ",fcs[0-9]*," $helpFile | sort -k 1 -t, > ${fcsConWorkFile}
  cat ${fcsConWorkFile} | while read fcsConEntry 
  do
    vioName="$(echo "${fcsConEntry}" | cut -f 1 -d ",")"
    fcsDevice="$(echo "${fcsConEntry}" | cut -f 2 -d ",")"
    fcs_x1="$(echo "${fcsConEntry}" | cut -f 5 -d ",")"
    color="$(echo "${fcsConEntry}" | cut -f 6 -d ",")"
    attributeList="$(echo "${fcsConEntry}" | cut -f7- -d ",")"
    echo "add fcs connection vertical line: ${fcs_x1}" |${LOG}
    groupID="g_${vioName}_${fcsDevice}"
    if [ "${1}" == "VIO" ]; then
      echo ${groupID}:'<line x1="'$fcs_x1'" y1="'$fcs_y1'" x2="'$fcs_x1'" y2="'$fcs_y2'" style="stroke:'${color}';stroke-width:1" />' >> $groupFile
      if [ ${fcsx_min} -eq 0 ] || [ ${fcs_x1} -lt ${fcsx_min} ]; then
        ((fcsx_min=fcs_x1))
      fi
    else
      echo '<text x="'$(((fcs_x1+6)))'" y="'$fcs_y1'" style="fill:'${color}';font-size:10px;writing-mode:tb;text-orientation:upright;" onclick="displayAttributes(evt, '\'${vioName}_${fcsDevice}%${fcs_y1}\'')" onmouseover="show(evt, '\'${vioName}_${fcsDevice}%${fcs_y1}\'')" onmouseout="hide(evt, '\'${vioName}_${fcsDevice}%${fcs_y1}\'')">'$fcsDevice'</text>' >> $pictureFile
      addpopup "${vioName}_${fcsDevice}%${fcs_y1}" "$(((fcs_x1+6)))" "${fcs_y1}" "antiquewhite" "${attributeList}"
      #addpopup "${vioName}_${fcsDevice}%${fcs_y1}" "$(((fcs_x1+6)))" "${fcs_y1}" "${color}" "${attributeList}"
      if [ "${vioName}" != "${vioNameSave}" ]; then
        echo '<text x="'$(((fcs_x1-6)))'" y="'$fcs_y1'" style="fill:'${color}';font-size:10px;writing-mode:tb;">'${vioName}'</text>' >> $pictureFile
        vioNameSave="${vioName}"
      fi
    fi
    if [ "${1}" == "VIO" ] && [ ${vlan_x2} -lt ${fcs_x1} ]; then
      vlan_x2=${fcs_x1}
    fi
  done
  if [ ${fcsx_min} -gt 0 ]; then
    echo '<text x="'$fcsx_min'" y="'$text_y1'" style="font-size:12px">'Fibre'</text>' >> $pictureFile
  fi
}

#################################################################################
# Function to draw vertical lines for ISCSI connections				#
#################################################################################
drawIscsiCon () {

  if [ "${1}" == "VIO" ]; then
    echo "drawIscsiCon: $1" |${LOG}
    ((vlan_y2=pictureSize_y-50))
    ####################################################################################
    # draw fcs vertical lines
    ####################################################################################
    text_y1=$((starty-12))
    iscsi_y1=${starty}
    #((fcs_y2=pictureSize_y-50))
    ((iscsi_y2=pictureSize_y))
    iscsix_min=0
  else
    echo "drawIscsiCon: $1 $2" |${LOG}
    text_y1=$((${2}-12))
    iscsi_y1=${2}
  fi

  vioNameSave=""

  iscsiConWorkFile="${WORK_AREA}iscsiConWorkFile"
  grep -E ",iscsi[0-9]*-" $helpFile | sort -t, -k4n -k1 > ${iscsiConWorkFile}
  cat ${iscsiConWorkFile} | while read iscsiConEntry 
  do
    vioName="$(echo "${iscsiConEntry}" | cut -f 1 -d ",")"
    iscsiDevice="$(echo "${iscsiConEntry}" | cut -f 2 -d ",")"
    iscsiDeviceAddress="$(echo "${iscsiDevice}" | cut -f 2 -d "-")"
    iscsi_x1="$(echo "${iscsiConEntry}" | cut -f 5 -d ",")"
    color="$(echo "${iscsiConEntry}" | cut -f 6 -d ",")"
    attributeList="$(echo "${iscsiConEntry}" | cut -f7- -d ",")"
    echo "add iscsi connection vertical line: ${iscsi_x1}" |${LOG}
    groupID="g_${vioName}_${iscsiDevice}"
    if [ "${1}" == "VIO" ]; then
      echo ${groupID}:'<line x1="'$iscsi_x1'" y1="'$iscsi_y1'" x2="'$iscsi_x1'" y2="'$iscsi_y2'" style="stroke:'${color}';stroke-width:1" />' >> $groupFile
      if [ ${iscsix_min} -eq 0 ] || [ ${iscsi_x1} -lt ${iscsix_min} ]; then
        ((iscsix_min=iscsi_x1))
      fi
    else
      echo '<text x="'$(((iscsi_x1+6)))'" y="'$iscsi_y1'" style="fill:'${color}';font-size:10px;writing-mode:tb;text-orientation:upright;" onclick="displayAttributes(evt, '\'${vioName}_${iscsiDevice}%${iscsi_y1}\'')" onmouseover="show(evt, '\'${vioName}_${iscsiDevice}%${iscsi_y1}\'')" onmouseout="hide(evt, '\'${vioName}_${iscsiDevice}%${iscsi_y1}\'')">'$iscsiDeviceAddress'</text>' >> $pictureFile
      addpopup "${vioName}_${iscsiDevice}%${iscsi_y1}" "$(((iscsi_x1+6)))" "${iscsi_y1}" "antiquewhite" "${attributeList}"
      #addpopup "${vioName}_${fcsDevice}%${fcs_y1}" "$(((fcs_x1+6)))" "${fcs_y1}" "${color}" "${attributeList}"
      if [ "${vioName}" != "${vioNameSave}" ]; then
        echo '<text x="'$(((iscsi_x1-6)))'" y="'$iscsi_y1'" style="fill:'${color}';font-size:10px;writing-mode:tb;">'${vioName}'</text>' >> $pictureFile
        vioNameSave="${vioName}"
      fi
    fi
    if [ "${1}" == "VIO" ] && [ ${vlan_x2} -lt ${iscsi_x1} ]; then
      vlan_x2=${iscsi_x1}
    fi
  done
  if [ ${iscsix_min} -gt 0 ]; then
    echo '<text x="'$iscsix_min'" y="'$text_y1'" style="font-size:12px">'ISCSI'</text>' >> $pictureFile
  fi
}

#########################################################################
# Function to draw Client LPARs						#
#########################################################################
drawClient () {
  echo "--> drawClient ${1}" |${LOG}

  DeviceType="" 
  #########################################################################
  # set start variables
  #########################################################################
  client_x_offset=200
  if [ "${1}" == "NETWORK" ] && [ ${#switchArray[*]} -eq 0 ]; then
    echo "switchArray length: ${#switchArray[*]}" |$LOG}
    vlan_x2=$((vlan_x2+80))
  fi
  echo "clientStart_x: ${clientStart_x} vlan_x2: ${vlan_x2}" |${LOG}
  if [ ${clientStart_x} -gt ${vlan_x2} ]; then
    vlan_x2=${clientStart_x}
  fi
  ((client_x=vlan_x2+client_x_offset))
  ((vnic_x=vlan_x2+40))
  ((host_x=vlan_x2+40))
  client_y=$starty
  # v10.17
  ((sriov_physport_x=client_x+600))
  sriov_physport_y=$starty
  b=0
  while [ $b -lt ${#Client[*]} ]
  do
    partitionName="$(getValue "${Client[$b]}" "name")"
    fpartitionName="$(echo "${partitionName}" | tr " " "_" | tr "/" "_")"
    lpar_id="$(getValue "${Client[$b]}" "lpar_id")"
    echo "partitionName: ${partitionName} fpartitionName: ${fpartitionName} lpar_id: ${lpar_id}" |${LOG}
    clientVirtualFile="${WORK_AREA}${ManagedSystem[$x]}_${1}_${fpartitionName}.clientVirtual.dat"
    clientPhysicalFile="${WORK_AREA}${ManagedSystem[$x]}_${1}_${fpartitionName}.clientPhysical.dat"
    clientSlotPhysicalFile="${WORK_AREA}${ManagedSystem[$x]}_${1}_${fpartitionName}.clientSlotPhysical.dat"
    clientSlotChildrenFile="${WORK_AREA}${ManagedSystem[$x]}_${1}_${fpartitionName}.clientSlotChildren.dat"
    clientSriovLogportFile="${WORK_AREA}${ManagedSystem[$x]}_${1}_${fpartitionName}.clientSriovLogport.dat"
    clientSize_y="$(grep "CLIENTSIZEY,${partitionName}," $helpFile | cut -f 3 -d ",")"

    if [ $client_x -lt $startx ]; then
      client_x=800
    fi 
    if ( [ "${1}" == "STORAGE" ] || [ "${1}" == "ALL" ] ) && [ $(((b+1)%2)) -gt 0 ]; then
      drawFcsCon "CLIENT" $client_y
      drawIscsiCon "CLIENT" $client_y
    fi
    # write out the virtual switch names
    if ( [ "${1}" == "NETWORK" ] || [ "${1}" == "ALL" ] ) && [ $(((b+4)%4)) -eq 0 ]; then
      sCount=0
      while [ ${sCount} -lt ${#switchArray[*]} ]
      do
        sName="$(echo "${switchArray[${sCount}]}" | cut -f 1 -d ",")"
        sXoffset="$(echo "${switchArray[${sCount}]}" | cut -f 2 -d ",")"
        sColor="$(echo "${switchArray[${sCount}]}" | cut -f 3 -d ",")"
        sAttributelist="$(echo "${switchArray[${sCount}]}" | cut -f4- -d ",")"
        echo '<text x="'$(((sXoffset+10)))'" y="'$client_y'" style="fill:'${sColor}';font-size:10px;writing-mode:tb;text-orientation:upright;" onclick="displayAttributes(evt, '\'${sName}%${client_y}\'')" onmouseover="show(evt, '\'${sName}%${client_y}\'')" onmouseout="hide(evt, '\'${sName}%${client_y}\'')">'${sName}'</text>' >> $pictureFile
        addpopup "${sName}%${client_y}" "$(((sXoffset+10)))" "${client_y}" "antiquewhite" "${sAttributelist}"
        #addpopup "${sName}%${client_y}" "$(((sXoffset+10)))" "${client_y}" "${sColor}" "${sAttributelist}"
        ((sCount+=1))
      done
    fi
    # write out the SRIOV physical ports
    if ( [ "${1}" == "NETWORK" ] || [ "${1}" == "VNIC" ] || [ "${1}" == "ALL" ] ) && [ $(((b+4)%4)) -eq 0 ]; then
      grep "SRIOVPHYSPORT:" ${sriovPhysportHelpFile} | while read sriovphysportEntry
      do
        sriovphysportData="$(echo "${sriovphysportEntry}" | cut -f 2 -d ":")"
        sName="$(echo "${sriovphysportData}" | cut -f 1 -d ",")"
        sXoffset="$(echo "${sriovphysportData}" | cut -f 2 -d ",")"
        sColor="$(echo "${sriovphysportData}" | cut -f 3 -d ",")"
        sAttributelist="$(echo "${sriovphysportData}" | cut -f4- -d ",")"
        echo '<text x="'$(((sXoffset+10)))'" y="'$client_y'" style="fill:'${sColor}';font-size:10px;writing-mode:tb;text-orientation:upright;" onclick="displayAttributes(evt, '\'${sName}%${client_y}\'')" onmouseover="show(evt, '\'${sName}%${client_y}\'')" onmouseout="hide(evt, '\'${sName}%${client_y}\'')">'${sName}'</text>' >> $pictureFile
        addpopup "${sName}%${client_y}" "$(((sXoffset+10)))" "${client_y}" "antiquewhite" "${sAttributelist}"
      done
    fi
    echo '<rect rx="5" ry="5" x="'$client_x'" y="'$client_y'" width="'$clientSize_x'" height="'$clientSize_y'" fill="'${COLOR_CLIENT_PARTITION}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
    echo "client_x: ${client_x}" |${LOG}
    echo "client_y: ${client_y}" |${LOG}
    echo "${PDRAW_CLIENTLPAR},${partitionName},$(((client_x+60))),$(((client_y+45)))" >> $userobjectFile
    ((text_x=client_x+5))
    ((text_y=client_y+12))
    echo '<text x="'$text_x'" y="'$text_y'" style="font-size:14px">partition: </text>' >> $pictureFile
    ((text_x=client_x+60))
    echo '<text x="'$text_x'" y="'$text_y'" style="font-size:14px" onclick="displayAttributes(evt, '\'${partitionName}\'')" onmouseover="show(evt, '\'${partitionName}\'')" onmouseout="hide(evt, '\'${partitionName}\'')">'${partitionName}'</text>' >> $pictureFile
    addpopup "${partitionName}" "${text_x}" "${text_y}" "${COLOR_CLIENT_PARTITION}" "${Client[$b]}"

    ((text_x=client_x+15))
    ((text_y=text_y+17))
    curr_profile="$(getValue "${Client[$b]}" "curr_profile")"
    if [ ${#curr_profile} -eq 0 ]; then
      curr_profile="$(getValue "${Client[$b]}" "default_profile")"
    fi
    echo '<text x="'$text_x'" y="'$text_y'" style="font-size:14px">profile:</text>' >> $pictureFile
    ((text_x=text_x+45))
    echo '<text x="'$text_x'" y="'$text_y'" style="font-size:14px" onclick="displayAttributes(evt, '\'${partitionName}_${curr_profile}\'')" onmouseover="show(evt, '\'${partitionName}_${curr_profile}\'')" onmouseout="hide(evt, '\'${partitionName}_${curr_profile}\'')">'${curr_profile}'</text>' >> $pictureFile
    attributeList="$(grep "${PDRAW_PROFILE},${ManagedSystem[$x]},${partitionName}:" $configFile | grep "name=${curr_profile}," | cut -f2- -d ':')"
    addpopup "${partitionName}_${curr_profile}" "${text_x}" "${text_y}" "${COLOR_CLIENT_PARTITION}" "${attributeList}"

    ((clientDev_x=client_x-15))
    ((clientDev_y=client_y+50))

    if [ -s ${clientVirtualFile} ]; then
      cat ${clientVirtualFile} | while read virtualEntry
      do
        DeviceType=""
	d_port_vlan_id=""
        fillcolor="greenyellow"
        DeviceType="$(getValue "${virtualEntry}" "DeviceType")"
        if [ "${DeviceType}" == "SCSI" ]; then
          fillcolor="${COLOR_VIRTUAL_SCSI}"
        elif [ "${DeviceType}" == "ETH" ]; then
          fillcolor="${COLOR_VIRTUAL_ETHERNET}"
        elif [ "${DeviceType}" == "FC" ]; then
          fillcolor="${COLOR_VIRTUAL_FC}"
        elif [ "${DeviceType}" == "VNIC" ]; then
          fillcolor="${COLOR_VIRTUAL_VNIC}"
        fi

        echo '<rect x="'$clientDev_x'" y="'$clientDev_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
        ((devText_x=clientDev_x+5))
        ((devText_y=clientDev_y+11))

        if [ "${DeviceType}" == "SCSI" ]; then
          ###########################################################################
          # draw vhost device rectangle
          ###########################################################################
          attributeList=""
          #((host_x=clientDev_x-120))
          echo '<rect x="'$host_x'" y="'$clientDev_y'" width="51" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          echo '<line x1="'$(((host_x+51)))'" y1="'$(((clientDev_y+5)))'" x2="'$clientDev_x'" y2="'$(((clientDev_y+5)))'" style="stroke:'${COLOR_VIRTUAL_SCSI}';stroke-width:1;" />' >> $pictureFile
          remote_slot_num="$(getValue "${virtualEntry}" "remote_slot_num")"
          remote_lpar_id="$(getValue "${virtualEntry}" "remote_lpar_id")"
          remote_lpar_name="$(getValue "${virtualEntry}" "remote_lpar_name")"
	  if [ ${#remote_lpar_name} -gt 0 ]; then
            vhostInfo="$(grep "${PDRAW_LSMAP_SCSI},${ManagedSystem[$x]},${remote_lpar_name}:" $configFile | grep "\\-V${remote_lpar_id}\\-C${remote_slot_num}," | cut -f 2 -d ":" | tr -d " ")"
	  else
	    # try to find it with server_loc_code as a backup when lpar is not active
            server_loc_code="$(getValue "${virtualEntry}" "server_loc_code")"
	    if [ ${#server_loc_code} -gt 0 ]; then
              vhostInfo="$(grep "${PDRAW_LSMAP_SCSI},${ManagedSystem[$x]}," $configFile | grep ",${server_loc_code}," | cut -f 2 -d ":" | tr -d " ")"
	    fi
	  fi
          fscsiList=""
          fscsiSep=""
          iscsiList=""
          iscsiSep=""
	  clientVhost=""
	  clientLuns=""
          echo "remote_slot_num: ${remote_slot_num} remote_lpar_id: ${remote_lpar_id} remote_lpar_name: ${remote_lpar_name} vhostInfo: ${vhostInfo}" |${LOG}
          if [ ${#vhostInfo} -gt 0 ]; then
            clientVhost="$(echo "${vhostInfo}" | cut -f 1 -d ",")"
            clientLuns="$(echo "${vhostInfo}" | cut -f4- -d ",")"
            sep=""
            #vtd status lun backing bdphysloc mirrored
            echo "${clientLuns}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i+=6) print Array[i],Array[i+1],Array[i+2],Array[i+3],Array[i+4],Array[i+5]}' | while read vtd status lun backingdevice bdphysloc mirrored 
            do
	      echo "backingdevice: ${backingdevice} lun: ${lun}" |${LOG}
              # look up fscsi backing device
              backingdevice="${backingdevice//" "/""}"
	      fscsibackingList=""
	      iscsibackingList=""
              if [ ${#backingdevice} -gt 0 ]; then
                fscsibackingList="$(grep "${PDRAW_DEVICE_FSCSICHILD},${ManagedSystem[$x]},${remote_lpar_name}:" $configFile | grep ",${backingdevice}:" | cut -f 2 -d "=" | cut -f 1 -d "," | tr "\n" ",")"
                grep "${PDRAW_LSPATH},${ManagedSystem[$x]},${remote_lpar_name}:" $configFile | grep "name=${backingdevice}," | cut -f2- -d ":" | while read iscsiEntry
		do
		  parent="$(getValue "${iscsiEntry}" "parent")"
		  connection="$(echo "$(getValue "${iscsiEntry}" "connection")" | cut -f 2 -d ",")"
		  iscsibackingList="${iscsibackingList},${parent}-${connection}"
		done
              fi
              iscsibackingList="${iscsibackingList%,}"
              fscsibackingList="${fscsibackingList%,}"
              fscsibackingList="${fscsibackingList//" "/""}"
              echo "fscsibackingList: [${fscsibackingList}]" |${LOG}
              if [ ${#fscsibackingList} -gt 0 ]; then
                fscsiList="${fscsiList}${fscsiSep}${fscsibackingList}"
                fscsiSep=","
              fi
              if [ ${#iscsibackingList} -gt 0 ]; then
                iscsiList="${iscsiList}${iscsiSep}${iscsibackingList}"
                iscsiSep=","
              fi
	      fscsibackingList="${fscsibackingList#,}"
	      fscsibackingList="${fscsibackingList//","/";"}"
	      iscsibackingList="${iscsibackingList#,}"
	      iscsibackingList="${iscsibackingList//","/";"}"
              attributeList="${attributeList}${sep}fscsi:${fscsibackingList},iscsi:${iscsibackingList},vtd:${vtd},status:${status},lun:${lun},backingdevice:${backingdevice},bdphysloc:${bdphysloc},mirrored:${mirrored}"
              sep=","
            done
            attributeList="vio=${remote_lpar_name},clientvhost=${clientVhost},${attributeList}"
          fi
          if [ ${#fscsiList} -gt 0 ]; then
            echo "fscsiList: ${fscsiList}" |${LOG}
            fcsList="$(echo "${fscsiList}" | tr "," "\n" | sort -u | tr "\n" "," | sed -e "s/"fscsi"/"fcs"/g")"
            fcsList=${fcsList%,}
            echo "fcsList: ${fcsList}" |${LOG}
            # print line connecting vscsi device to fcs device line
            echo "${fcsList}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read fcsDevice
            do
              clientVlan_x1="$(grep "${remote_lpar_name},${fcsDevice}," $helpFile | cut -f 5 -d ',')"
              color="$(grep "${remote_lpar_name},${fcsDevice}," $helpFile | cut -f 6 -d ',')"
	      # look for VIO ent or fcs devices that have the same y coordinate and make adjustment to y-coordinate to prevent connector overlap
	      echo "checking SCSI clientDev_y: ${clientDev_y}" |${LOG}
	      devInc=6
              test_y1="$(grep -E ",ent[0-9]*,[0-9]*,${clientDev_y},|,fcs[0-9]*,[0-9]*,$(((clientDev_y+6)))," $helpFile)"
	      if [ ${#test_y1} -gt 0 ]; then
	        offSet=3
	        checkFCS="$(echo "${test_y1}" | cut -f 2 -d "," | grep "fcs")"
	        if [ ${#checkFCS} -gt 0 ]; then
	          offSet=5
	        fi
	        devX="$(echo "${test_y1}" | cut -f ${offSet} -d ",")"
		echo "SCSI test_y1: ${test_y1}" |${LOG}
		echo "SCSI clientVlan_x1: ${clientVlan_x1} devX: ${devX}" |${LOG}
		if [ "${1}" == "ALL" ] && [ ${#checkFCS} -eq 0 ]; then
	          if [ ${devX} -lt ${clientVlan_x1} ]; then
	            devInc=12
	          fi
		else
	          if [ ${clientVlan_x1} -lt ${devX} ]; then
	            devInc=12
	          fi
		fi
	      fi
              ((clientVlan_y=clientDev_y+devInc))
	      groupID="g_${remote_lpar_name}_${fcsDevice}"
              echo ${groupID}:'<line x1="'$clientVlan_x1'" y1="'$clientVlan_y'" x2="'$host_x'" y2="'$clientVlan_y'" style="stroke:'${color}';stroke-width:1" />' >> $groupFile
              echo ${groupID}:'<circle cx="'$clientVlan_x1'" cy="'$clientVlan_y'" r="2" fill="'${color}'" />' >> $groupFile
            done 
          fi
          if [ ${#iscsiList} -gt 0 ]; then
            echo "iscsiList: ${iscsiList}" |${LOG}
	    iscsiConnSep=0
	    xconn_offset=0
            SiscsiList="$(echo "${iscsiList}" | tr "," "\n" | sort -u | tr "\n" ",")"
            SiscsiList=${SiscsiList#,}
            SiscsiList=${SiscsiList%,}
            echo "SiscsiList: ${SiscsiList}" |${LOG}
            # print line connecting vscsi device to iscsi device line
            echo "${SiscsiList}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read iscsiDevice
            do
              clientVlan_x1="$(grep "${remote_lpar_name},${iscsiDevice}," $helpFile | cut -f 5 -d ',')"
              color="$(grep "${remote_lpar_name},${iscsiDevice}," $helpFile | cut -f 6 -d ',')"
	      # look for VIO ent or iscsi devices that have the same y coordinate and make adjustment to y-coordinate to prevent connector overlap
	      echo "checking SCSI clientDev_y: ${clientDev_y}" |${LOG}
	      devInc=6
              test_y1="$(grep -E ",ent[0-9]*,[0-9]*,${clientDev_y},|,fcs[0-9]*,[0-9]*,$(((clientDev_y+6)))," $helpFile)"
	      if [ ${#test_y1} -gt 0 ]; then
	        offSet=3
	        checkFCS="$(echo "${test_y1}" | cut -f 2 -d "," | grep "fcs")"
	        if [ ${#checkFCS} -gt 0 ]; then
	          offSet=5
	        fi
	        devX="$(echo "${test_y1}" | cut -f ${offSet} -d ",")"
		echo "SCSI test_y1: ${test_y1}" |${LOG}
		echo "SCSI clientVlan_x1: ${clientVlan_x1} devX: ${devX}" |${LOG}
		if [ "${1}" == "ALL" ] && [ ${#checkFCS} -eq 0 ]; then
	          if [ ${devX} -lt ${clientVlan_x1} ]; then
	            devInc=12
	          fi
		else
	          if [ ${clientVlan_x1} -lt ${devX} ]; then
	            devInc=12
	          fi
		fi
	      fi
              ((clientVlan_y=clientDev_y+devInc+iscsiConnSep))
	      groupID="g_${remote_lpar_name}_${iscsiDevice}"
              echo ${groupID}:'<line x1="'$clientVlan_x1'" y1="'$clientVlan_y'" x2="'$((host_x-xconn_offset))'" y2="'$clientVlan_y'" style="stroke:'${color}';stroke-width:1" />' >> $groupFile
              echo ${groupID}:'<circle cx="'$clientVlan_x1'" cy="'$clientVlan_y'" r="2" fill="'${color}'" />' >> $groupFile
	      if [ ${iscsiConnSep} -gt 0 ]; then
                echo ${groupID}:'<line x1="'$((host_x-xconn_offset))'" y1="'$clientVlan_y'" x2="'$((host_x-xconn_offset))'" y2="'$((clientVlan_y-6))'" style="stroke:'${color}';stroke-width:1" />' >> $groupFile
		if [ ${xconn_offset} -eq 10 ]; then
	          echo ${groupID}:'<circle cx="'$((host_x-xconn_offset))'" cy="'$((clientVlan_y-6))'" r="2" fill="'${color}'" />' >> $groupFile
		fi
	      fi
	      xconn_offset=10
	      iscsiConnSep=$((iscsiConnSep+6))
            done 
          fi
	  if [ ${#clientVhost} -gt 0 ]; then
            ((vhostText_x=host_x+26))
            ((vhostText_y=clientDev_y+11))
            echo '<text x="'$vhostText_x'" y="'$vhostText_y'" style="text-anchor:middle;font-size:10px" onclick="displayAttributes(evt, '\'${partitionName}_${clientVhost}%${remote_lpar_name}\'')" onmouseover="show(evt, '\'${partitionName}_${clientVhost}%${remote_lpar_name}\'')" onmouseout="hide(evt, '\'${partitionName}_${clientVhost}%${remote_lpar_name}\'')">'${clientVhost}'</text>' >> $pictureFile
            addpopup "${partitionName}_${clientVhost}%${remote_lpar_name}" "${vhostText_x}" "${vhostText_y}" "${fillcolor}" "${attributeList}"
	  fi
        else
          ###########################################################################
          # draw en or fscsi device rectangle
          ###########################################################################
          en_x=$((clientDev_x-22))
          en_y=$((clientDev_y+12))
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          ((enText_x=en_x+5))
          ((enText_y=en_y+11))
        fi
        slot_search="slot_num"
        devIncrement=40
        clientDevSlot="$(getValue "${virtualEntry}" "${slot_search}")"
        clientDevLoc="$(echo "U$(getValue "${managedSystem}" "type_model").$(getValue "${managedSystem}" "serial_num")" | tr "-" ".")"
        vfcclientdrc="${clientDevLoc}-V${lpar_id}-C${clientDevSlot}"
        clientDevLoc="${clientDevLoc}-V${lpar_id}-C${clientDevSlot}-T1"
        d_clientDevLoc="$(echo "${clientDevLoc}" | cut -f3- -d ".")"
        if [ "${DeviceType}" == "ETH" ]; then
          clientDevVswitch="$(getValue "${virtualEntry}" "vswitch")"
          clientDevVlan="$(getValue "${virtualEntry}" "port_vlan_id")"
	  d_port_vlan_id=" (${clientDevVlan})"
          echo "ENT,${d_clientDevLoc},${devText_x},${devText_y},${fillcolor}" >> $userobjectFile
          echo "EN,${d_clientDevLoc},${enText_x},${enText_y},${fillcolor}" >> $userobjectFile
	  # check to see if we have a device_name in device attributes
          deviceName="$(getValue "${virtualEntry}" "device_name")"
	  if [ ${#deviceName} -gt 0 ]; then
            echo '<text x="'$devText_x'" y="'$devText_y'" style="text-anchor:start;font-size:10px">'$deviceName'</text>' >> $pictureFile
	    checkENT="$(echo "${deviceName}" | grep -i "ent")"
	    if [ ${#checkENT} -gt 0 ]; then
              echo '<text x="'$enText_x'" y="'$enText_y'" style="text-anchor:start;font-size:10px">en'$(echo "${deviceName}" | tr -d "[:alpha:]")'</text>' >> $pictureFile
	    fi
	  fi
        elif [ "${DeviceType}" == "VNIC" ]; then
          # v10.17
          clientDevVlan="$(getValue "${virtualEntry}" "port_vlan_id")"
	  d_port_vlan_id=" (${clientDevVlan})"
          echo "ENT,${d_clientDevLoc},${devText_x},${devText_y},${fillcolor}" >> $userobjectFile
          echo "EN,${d_clientDevLoc},${enText_x},${enText_y},${fillcolor}" >> $userobjectFile
          # v10.17
          deviceName="$(getValue "${virtualEntry}" "os_device_name")"
	  if [ ${#deviceName} -gt 0 ] && [ "${deviceName}" != "unavailable" ]; then
            echo '<text x="'$devText_x'" y="'$devText_y'" style="text-anchor:start;font-size:10px">'$deviceName'</text>' >> $pictureFile
	    checkENT="$(echo "${deviceName}" | grep -i "ent")"
	    if [ ${#checkENT} -gt 0 ]; then
              echo '<text x="'$enText_x'" y="'$enText_y'" style="text-anchor:start;font-size:10px">en'$(echo "${deviceName}" | tr -d "[:alpha:]")'</text>' >> $pictureFile
	    fi
	  fi
        elif [ "${DeviceType}" == "FC" ]; then
          echo "FCS,${d_clientDevLoc},${devText_x},${devText_y},${fillcolor}" >> $userobjectFile
          echo "FSCSI,${d_clientDevLoc},${enText_x},${enText_y},${fillcolor}" >> $userobjectFile
	  # check to see if we have topology
	  topologyEntry="$(grep "${PDRAW_VIRTUALFC},${ManagedSystem[$x]},${partitionName}:" $configFile | grep ",slot_num=${clientDevSlot}," | cut -f2- -d ':')"
	  if [ ${#topologyEntry} -gt 0 ]; then
	    topology="$(getValue "${topologyEntry}" "topology")"
	    if [ ${#topology} -gt 0 ] && [ "${topology}" != "unavailable" ]; then
	      echo "topology: ${topology}" |${LOG}
              deviceName="$(echo "${topology}" | cut -f 3 -d "/")"
	      if [ ${#deviceName} -gt 0 ] && [ "${deviceName}" != "unavailable" ]; then
                echo '<text x="'$devText_x'" y="'$devText_y'" style="text-anchor:start;font-size:10px">'$deviceName'</text>' >> $pictureFile
	        checkFCS="$(echo "${deviceName}" | grep -i "fcs")"
	        if [ ${#checkFCS} -gt 0 ]; then
                  echo '<text x="'$enText_x'" y="'$enText_y'" style="text-anchor:start;font-size:10px">fscsi'$(echo "${deviceName}" | tr -d "[:alpha:]")'</text>' >> $pictureFile
	        fi
	      fi
	    fi
	  fi
        elif [ "${DeviceType}" == "SCSI" ]; then
          echo "VSCSI,${d_clientDevLoc},${devText_x},${devText_y},${fillcolor}" >> $userobjectFile
	  # check to see if we have topology
	  topologyEntry="$(grep "${PDRAW_VIRTUALSCSI},${ManagedSystem[$x]},${partitionName}:" $configFile | grep ",slot_num=${clientDevSlot}," | cut -f2- -d ':')"
	  if [ ${#topologyEntry} -gt 0 ]; then
	    topology="$(getValue "${topologyEntry}" "topology")"
	    if [ ${#topology} -gt 0 ] && [ "${topology}" != "unavailable" ]; then
	      echo "topology: ${topology}" |${LOG}
              deviceName="$(echo "${topology}" | cut -f 3 -d "/")"
	      if [ ${#deviceName} -gt 0 ] && [ "${deviceName}" != "unavailable" ]; then
                echo '<text x="'$devText_x'" y="'$devText_y'" style="text-anchor:start;font-size:10px">'$deviceName'</text>' >> $pictureFile
	      fi
	    fi
	  fi
          devIncrement=30
        fi
        #((textLoc_x=clientDev_x+18))
        ((textLoc_x=client_x-5))
        ((textLoc_y=clientDev_y-3))
        echo '<text x="'$textLoc_x'" y="'$textLoc_y'" style="text-anchor:end;font-size:10px" onclick="displayAttributes(evt, '\'${d_clientDevLoc}\'')" onmouseover="show(evt, '\'${d_clientDevLoc}\'')" onmouseout="hide(evt, '\'${d_clientDevLoc}\'')">'${d_clientDevLoc}${d_port_vlan_id}'</text>' >> $pictureFile
        addpopup "${d_clientDevLoc}" "${textLoc_x}" "${textLoc_y}" "${fillcolor}" "${virtualEntry}"


        if [ "${DeviceType}" == "ETH" ]; then
          clientVlanData=$(grep 'addvlan='${clientDevVswitch}',' $helpFile | cut -f2- -d ',' | sort -u)
          if [ ${#clientVlanData} -eq 0 ]; then 
            clientVlanData=$(grep 'lan='${clientDevVlan}',' $helpFile | cut -f3- -d ',' | sort -u)
          fi
	  clientVlan_x1="$(echo "${clientVlanData}" | cut -f 1 -d ",")"
	  vswitchColor="$(echo "${clientVlanData}" | cut -f 2 -d ",")"
	  # look for VIO ent or fcs devices that have the same y coordinate and make adjustment to y-coordinate to prevent connector overlap
	  echo "checking clientDev_y: ${clientDev_y}" |${LOG}
 	  devInc=6
          test_y1="$(grep -E ",ent[0-9]*,[0-9]*,${clientDev_y},|,fcs[0-9]*,[0-9]*,$(((clientDev_y+6)))," $helpFile)"
	  if [ ${#test_y1} -gt 0 ]; then
	    echo "ETH test_y1: ${test_y1}" |${LOG}
	    checkFCS="$(echo "${test_y1}" | cut -f 2 -d "," | grep "fcs")"
	    if [ ${#checkFCS} -gt 0 ]; then
	      devX="$(echo "${test_y1}" | cut -f 5 -d ",")"
	      echo "ETH clientVlan_x1: ${clientVlan_x1} devX: ${devX}" |${LOG}
	      if [ ${devX} -lt ${clientVlan_x1} ]; then
	        devInc=12
	      fi
	    else
	      offSet=6
	      checkCTL="$(echo "${test_y1}" | grep -E ",ctl=[0-9]*,")"
	      if [ ${#checkCTL} -gt 0 ]; then
	        offSet=7
	      fi
	      switchX="$(echo "${test_y1}" | cut -f ${offSet} -d "," | cut -f 2 -d "=")"
	      echo "ETH clientDevVswitch: ${clientDevVswitch} switchX: ${switchX}" |${LOG}
	      if [ "${clientDevVswitch}" != "${switchX}" ]; then
	        devInc=12
	      fi
	    fi
	  fi
          ((clientVlan_y=clientDev_y+devInc))
	  # find pvid of adapter
          #echo 'UBvlan='${vlanDataEntry}','$vlan_x2',vswitch='${switchName}',' >> $helpFile
	  UBpvidEntry="$(grep "UBvlan=${clientDevVlan}," $helpFile | head -1 | grep ",vswitch=${clientDevVswitch}," | cut -f 2 -d ",")"
	  pvidEntry="$(grep ",vlan=${clientDevVlan}," $helpFile | grep ",vswitch=${clientDevVswitch}," | grep -v ",ctl=" | head -1 | cut -f 4 -d "," | cut -f 2 -d "=")"
	  TMPclientVlan_x1=${clientVlan_x1}
	  if [ ${#UBpvidEntry} -gt 0 ]; then
	    TMPclientVlan_x1=${UBpvidEntry}
	    groupID="g_${clientDevVswitch}_BM"
	  elif [ ${#pvidEntry} -gt 0 ]; then
	    groupID="g_${clientDevVswitch}_${pvidEntry}"
	  else
	    groupID="g_${clientDevVswitch}_${clientDevVlan}"
	  fi
          echo ${groupID}:'<line x1="'$TMPclientVlan_x1'" y1="'$clientVlan_y'" x2="'$clientDev_x'" y2="'$clientVlan_y'" style="stroke:'${vswitchColor}';stroke-width:1" />' >> $groupFile
          echo ${groupID}:'<circle cx="'$TMPclientVlan_x1'" cy="'$clientVlan_y'" r="2" fill="'${vswitchColor}'" />' >> $groupFile
        elif [ "${DeviceType}" == "VNIC" ]; then
          #echo "${VioHostname[$a]},$logical_port_id,$vnicLine_x,$vnicLine_y,${vnicCon_x},${VNICshade}" >> $helpFile
          slot_num="$(getValue "${virtualEntry}" "slot_num")"
          auto_priority_failover="$(getValue "${virtualEntry}" "auto_priority_failover")"
	  connectorID="${lpar_id}${slot_num}"
	  vnicsave_y=0
          backing_devices="$(getValue "${virtualEntry}" "backing_devices")"
	  sorted_backing_devices="$(echo "${backing_devices}" | tr ',' '\n' | sort -n -t/ -k9 | tr '\n' ',')"
	  sorted_backing_devices=${sorted_backing_devices%,}
	  echo "sorted_backing_devices: ${sorted_backing_devices}" |${LOG}
	  backing_device_states="$(echo "$(getValue "${virtualEntry}" "backing_device_states")" | tr ',' '\n')"
	  vnicSummary="connectorID=${connectorID},partition=${partitionName},lpar_id:${lpar_id},slot:${slot_num},auto_priority_failover:${auto_priority_failover}"
	  vnicSummaryElement=""
	  vnicConnSep=0
          echo "${sorted_backing_devices}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print i,Array[i]}' | while read bkDataNum bkData
          do
            viobackingName="$(echo "${bkData}" | cut -f 2 -d "/")"
            adapter_id="$(echo "${bkData}" | cut -f 4 -d "/")"
            phys_port_id="$(echo "${bkData}" | cut -f 5 -d "/")"
            logical_port_id="$(echo "${bkData}" | cut -f 6 -d "/")" 
            failover_priority="$(echo "${bkData}" | cut -f 9 -d "/")" 
	    vnicSummaryElement="vio=${viobackingName}" 
            connectorData="$(grep ",${logical_port_id}," $helpFile)"
            if [ ${#connectorData} -gt 0 ]; then

	      is_active_color="black"
	      is_active_width="1"
	      stroke_dasharray=""
	      stateData="$(echo "${backing_device_states}" | grep "/${logical_port_id}/")"
	      echo "stateData: ${stateData}" |${LOG}
	      if [ ${#stateData} -gt 0 ]; then
                typeset -i state="$(echo "${stateData}" | cut -f 3 -d "/")"
                typeset -l status="$(echo "${stateData}" | cut -f 4 -d "/")"
		if [ "${status}" != "operational" ]; then
		  is_active_color="red"
		fi
		if [ ${state} -eq 1 ] && [ "${status}" == "operational" ]; then
		  is_active_color="green"
		fi
		connection_type="backup"
		if [ ${bkDataNum} -eq 1 ]; then
	          is_active_width="1"
		  connection_type="primary"
		else
	          stroke_dasharray=";stroke-dasharray:6"
		fi
	        vnicSummaryElement="${vnicSummaryElement},connection_type:${connection_type},status:${status},state:${state},failover_priority:${failover_priority}" 
	      fi

              vnicLine_y="$(echo "${connectorData}" | cut -f 4 -d ",")"
              vnicCon_x="$(echo "${connectorData}" | cut -f 5 -d ",")"
              colorCon="$(echo "${connectorData}" | cut -f 6 -d ",")"
	      if [ "${colorCon}" != "black" ] && [ "${is_active_color}" != "red" ]; then
	        is_active_color="${colorCon}"
	      fi
              d_logport="$(echo "${connectorData}" | cut -f 7 -d ",")"
              ((clientVlan_y=clientDev_y+6))
	      groupID="g_${partitionName}_${connectorID}"
              port_groupID="g_SRIOVPHYSPORT_${adapter_id}_${phys_port_id}"

              echo ${groupID}:'<line x1="'$vnic_x'" y1="'$clientVlan_y'" x2="'$clientDev_x'" y2="'$clientVlan_y'" style="stroke:'${colorCon}';stroke-width:1" />' >> $groupFile
              echo ${port_groupID}:'<line x1="'$vnic_x'" y1="'$clientVlan_y'" x2="'$clientDev_x'" y2="'$clientVlan_y'" style="stroke:'${colorCon}';stroke-width:1" />' >> $groupFile
	      # find physical port x coordinate
	      physportData="$(grep "SRIOVPHYSPORT:" $sriovPhysportHelpFile | grep "adapter_id=${adapter_id}," | grep "phys_port_id=${phys_port_id},")"
	      physport_xcoordinate="$(echo "${physportData}" | cut -f 2 -d ",")"
	      echo "physport_xcoordinate: ${physport_xcoordinate}" |${LOG}

              echo ${groupID}:'<line x1="'$vnicCon_x'" y1="'$vnicLine_y'" x2="'$physport_xcoordinate'" y2="'$vnicLine_y'" style="stroke:'${is_active_color}';stroke-width:'${is_active_width}${stroke_dasharray}'" />' >> $groupFile
	      echo ${groupID}:'<circle cx="'$physport_xcoordinate'" cy="'$vnicLine_y'" r="2" />' >> $groupFile
              echo ${groupID}:'<line x1="'$physport_xcoordinate'" y1="'$vnicLine_y'" x2="'$physport_xcoordinate'" y2="'$((clientVlan_y+vnicConnSep))'" style="stroke:'${is_active_color}';stroke-width:'${is_active_width}${stroke_dasharray}'" />' >> $groupFile
              echo ${port_groupID}:'<line x1="'$vnicCon_x'" y1="'$vnicLine_y'" x2="'$physport_xcoordinate'" y2="'$vnicLine_y'" style="stroke:'${is_active_color}';stroke-width:'${is_active_width}${stroke_dasharray}'" />' >> $groupFile
	      echo ${port_groupID}:'<circle cx="'$physport_xcoordinate'" cy="'$vnicLine_y'" r="2" />' >> $groupFile
              echo ${port_groupID}:'<line x1="'$physport_xcoordinate'" y1="'$vnicLine_y'" x2="'$physport_xcoordinate'" y2="'$((clientVlan_y+vnicConnSep))'" style="stroke:'${is_active_color}';stroke-width:'${is_active_width}${stroke_dasharray}'" />' >> $groupFile

              echo ${groupID}:'<line x1="'$physport_xcoordinate'" y1="'$((clientVlan_y+vnicConnSep))'" x2="'$vnic_x'" y2="'$((clientVlan_y+vnicConnSep))'" style="stroke:'${is_active_color}';stroke-width:'${is_active_width}${stroke_dasharray}'" />' >> $groupFile
	      echo ${groupID}:'<circle cx="'$physport_xcoordinate'" cy="'$((clientVlan_y+vnicConnSep))'" r="2" />' >> $groupFile
              echo ${port_groupID}:'<line x1="'$physport_xcoordinate'" y1="'$((clientVlan_y+vnicConnSep))'" x2="'$vnic_x'" y2="'$((clientVlan_y+vnicConnSep))'" style="stroke:'${is_active_color}';stroke-width:'${is_active_width}${stroke_dasharray}'" />' >> $groupFile
	      echo ${port_groupID}:'<circle cx="'$physport_xcoordinate'" cy="'$((clientVlan_y+vnicConnSep))'" r="2" />' >> $groupFile

              echo '<text x="'$(((vnicCon_x-2)))'" y="'$(((vnicLine_y-2)))'" style="text-anchor:end;font-size:10px" onclick="displayAttributes(evt, '\'${fpartitionName}_${d_logport}\'')" onmouseover="show(evt, '\'${fpartitionName}_${d_logport}\'')" onmouseout="hide(evt, '\'${fpartitionName}_${d_logport}\'')">'${connectorID}'</text>' >> $pictureFile
              addpopup "${fpartitionName}_${d_logport}" "$(((vnicCon_x)))" "$(((vnicLine_y)))" "antiquewhite" "connectorID=${connectorID},partition=${partitionName},lpar_id:${lpar_id},slot:${slot_num},auto_priority_failover:${auto_priority_failover},${vnicSummaryElement}"
	      if [ ${vnicsave_y} -eq 0 ]; then
	        echo ${groupID}:'<circle cx="'$vnic_x'" cy="'$clientVlan_y'" r="2" />' >> $groupFile
	        echo ${port_groupID}:'<circle cx="'$vnic_x'" cy="'$clientVlan_y'" r="2" />' >> $groupFile
                echo '<text x="'$(((vnic_x+4)))'" y="'$(((clientVlan_y-2)))'" style="text-anchor:right;font-size:10px" onclick="displayAttributes(evt, '\'${fpartitionName}_${d_clientDevLoc}\'')" onmouseover="show(evt, '\'${fpartitionName}_${d_clientDevLoc}\'')" onmouseout="hide(evt, '\'${fpartitionName}_${d_clientDevLoc}\'')">'${connectorID}'</text>' >> $pictureFile
	      fi
	      if [ ${vnicConnSep} -gt 0 ]; then
                echo ${groupID}:'<line x1="'$vnic_x'" y1="'$((clientVlan_y+vnicConnSep-8))'" x2="'$vnic_x'" y2="'$((clientVlan_y+vnicConnSep))'" style="stroke:'${colorCon}';stroke-width:1" />' >> $groupFile
                echo ${port_groupID}:'<line x1="'$vnic_x'" y1="'$((clientVlan_y+vnicConnSep-8))'" x2="'$vnic_x'" y2="'$((clientVlan_y+vnicConnSep))'" style="stroke:'${colorCon}';stroke-width:1" />' >> $groupFile
	        echo ${groupID}:'<circle cx="'$vnic_x'" cy="'$((clientVlan_y+vnicConnSep))'" r="2" />' >> $groupFile
	        echo ${port_groupID}:'<circle cx="'$vnic_x'" cy="'$((clientVlan_y+vnicConnSep))'" r="2" />' >> $groupFile
	      fi
	      vnicsave_y=${clientVlan_y}
	      vnicSummary="${vnicSummary},${vnicSummaryElement}"
            fi
	    vnicConnSep=$((vnicConnSep+8))
          done
          addpopup "${fpartitionName}_${d_clientDevLoc}" "$(((vnic_x)))" "$(((clientVlan_y)))" "antiquewhite" "${vnicSummary}"
        elif [ "${DeviceType}" == "FC" ] || [ "${DeviceType}" == "SCSI" ]; then
          remote_slot_num="$(getValue "${virtualEntry}" "remote_slot_num")"
          remote_lpar_id="$(getValue "${virtualEntry}" "remote_lpar_id")"
          remote_lpar_name="$(getValue "${virtualEntry}" "remote_lpar_name")"
          lparName="$(getValue "${virtualEntry}" "lpar_name")"
          if [ "${DeviceType}" == "FC" ]; then
            fcsDeviceData="$(grep "${PDRAW_LSMAP_NPIV},${ManagedSystem[$x]},${remote_lpar_name}:" $configFile | grep "\\-V${remote_lpar_id}\\-C${remote_slot_num}," | cut -f 2 -d ":")"
            #cat "${lsmapnpivFile}" | awk -F, -v vs=${PDRAW_LSMAP_NPIV} -v ms=${managedsystem} -v vio=${VioHostname[$y]} '{print (vs","ms","vio":name="$1",physloc="$2",clntid="$3",fc="$4",fcphysloc="$5)}' >> $configFile 
            fcsDevice="$(echo $(getValue "${fcsDeviceData}" "fc") | tr -d " ")"
            clientVfchost="$(getValue "${fcsDeviceData}" "name")" 
            echo "remote_slot_num: ${remote_slot_num} remote_lpar_id: ${remote_lpar_id} remote_lpar_name: ${remote_lpar_name} fcsDevice: ${fcsDevice} lparName: ${lparName} clientVfchost: ${clientVfchost}" |${LOG}
            if [ ${#fcsDevice} -gt 0 ]; then
              clientVlan_x1="$(grep "${remote_lpar_name},${fcsDevice}," $helpFile | cut -f 5 -d ',')"
              color="$(grep "${remote_lpar_name},${fcsDevice}," $helpFile | cut -f 6 -d ',')"
	      # look for VIO ent or fcs devices that have the same y coordinate and make adjustment to y-coordinate to prevent connector overlap
	      echo "checking FC clientDev_y: ${clientDev_y}" |${LOG}
 	      devInc=6
              test_y1="$(grep -E ",ent[0-9]*,[0-9]*,${clientDev_y},|,fcs[0-9]*,[0-9]*,$(((clientDev_y+6)))," $helpFile)"
	      if [ ${#test_y1} -gt 0 ]; then
	        offSet=3
	        checkFCS="$(echo "${test_y1}" | cut -f 2 -d "," | grep "fcs")"
	        if [ ${#checkFCS} -gt 0 ]; then
	          offSet=5
	        fi
	        devX="$(echo "${test_y1}" | cut -f ${offSet} -d ",")"
		echo "FC test_y1: ${test_y1}" |${LOG}
		echo "FC clientVlan_x1: ${clientVlan_x1} devX: ${devX}" |${LOG}
		if [ "${1}" == "ALL" ] && [ ${#checkFCS} -eq 0 ]; then
	          if [ ${devX} -lt ${clientVlan_x1} ]; then
	            devInc=12
	          fi
		else
	          if [ ${clientVlan_x1} -lt ${devX} ]; then
	            devInc=12
	          fi
		fi
	      fi
              ((clientVlan_y=clientDev_y+devInc))
	      groupID="g_${remote_lpar_name}_${fcsDevice}"
              echo ${groupID}:'<line x1="'$clientVlan_x1'" y1="'$clientVlan_y'" x2="'$host_x'" y2="'$clientVlan_y'" style="stroke:'${color}';stroke-width:1" />' >> $groupFile
              echo ${groupID}:'<circle cx="'$clientVlan_x1'" cy="'$clientVlan_y'" r="2" fill="'${color}'" />' >> $groupFile
            fi
            if [ ${#clientVfchost} -gt 0 ]; then
              ((vfchostText_x=host_x+26))
              ((vfchostText_y=clientDev_y+11))
              echo '<rect x="'$host_x'" y="'$clientDev_y'" width="51" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
              echo '<text x="'$vfchostText_x'" y="'$vfchostText_y'" style="text-anchor:middle;font-size:10px" onclick="displayAttributes(evt, '\'${remote_lpar_name}_${clientVfchost}\'')" onmouseover="show(evt, '\'${remote_lpar_name}_${clientVfchost}\'')" onmouseout="hide(evt, '\'${remote_lpar_name}_${clientVfchost}\'')">'${clientVfchost}'</text>' >> $pictureFile
              ((clientVlan_y=clientDev_y+6))
              #echo ${groupID}:'<line x1="'$(((host_x+51)))'" y1="'$clientVlan_y'" x2="'$clientDev_x'" y2="'$clientVlan_y'" style="stroke:'${color}';stroke-width:1" />' >> $groupFile
              echo '<line x1="'$(((host_x+51)))'" y1="'$clientVlan_y'" x2="'$clientDev_x'" y2="'$clientVlan_y'" style="stroke:'${color}';stroke-width:1" />' >> $pictureFile
              addpopup "${remote_lpar_name}_${clientVfchost}" "${vfchostText_x}" "${vfchostText_y}" "${fillcolor}" "${fcsDeviceData}"
	    fi
          fi
        fi
        ((clientDev_y=clientDev_y+devIncrement))
      done
    fi

    # process SRIOV logical ports
    if [ "${1}" == "NETWORK" ] || [ "${1}" == "ALL" ]; then
      if [ -s ${clientSriovLogportFile} ]; then
        devIncrement=40
        cat ${clientSriovLogportFile} | while read logportEntry
        do
          echo "logportEntry: ${logportEntry}" | ${LOG}
          fillcolor="${COLOR_SRIOV_LOGPORT}"

	  # ent device
          echo '<rect x="'$clientDev_x'" y="'$clientDev_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          ((devText_x=clientDev_x+5))
          ((devText_y=clientDev_y+11))

	  # en device
          en_x=$((clientDev_x-22))
          en_y=$((clientDev_y+12))
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          ((enText_x=en_x+5))
          ((enText_y=en_y+11))

          clientDevLoc="$(getValue "${logportEntry}" "location_code")"
          d_clientDevLoc="$(echo "${clientDevLoc}" | cut -f3- -d ".")"
          ((textLoc_x=client_x-5))
          ((textLoc_y=clientDev_y-3))
          port_vlan_id="$(getValue "${logportEntry}" "port_vlan_id")"

          echo '<text x="'$textLoc_x'" y="'$textLoc_y'" style="text-anchor:end;font-size:10px" onclick="displayAttributes(evt, '\'${d_clientDevLoc}\'')" onmouseover="show(evt, '\'${d_clientDevLoc}\'')" onmouseout="hide(evt, '\'${d_clientDevLoc}\'')">'$d_clientDevLoc' ('$port_vlan_id')</text>' >> $pictureFile
          addpopup "${d_clientDevLoc}" "${textLoc_x}" "${textLoc_y}" "${fillcolor}" "${logportEntry}"

	  # write to user object file for userdata setting
          echo "ENT,${d_clientDevLoc},${devText_x},${devText_y},${fillcolor}" >> $userobjectFile
          echo "EN,${d_clientDevLoc},${enText_x},${enText_y},${fillcolor}" >> $userobjectFile

	  # create connector line
	  # find physical port x coordinate
          adapter_id="$(getValue "${logportEntry}" "adapter_id")"
          phys_port_id="$(getValue "${logportEntry}" "phys_port_id")"
	  physportData="$(grep "SRIOVPHYSPORT:" $sriovPhysportHelpFile | grep "adapter_id=${adapter_id}," | grep "phys_port_id=${phys_port_id},")"
	  physport_xcoordinate="$(echo "${physportData}" | cut -f 2 -d ",")"
	  echo "physport_xcoordinate: ${physport_xcoordinate}" |${LOG}
	  groupID="g_SRIOVPHYSPORT_${adapter_id}_${phys_port_id}"
	  is_active_color="black"
	  functional_state="$(getValue "${logportEntry}" "functional_state")"
	  echo "functional_state: ${functional_state}" |${LOG}
	  if [ "${functional_state}" == "1" ]; then
	    is_active_color="green"
	  else
	    is_active_color="red"
          fi
          echo ${groupID}:'<line x1="'$clientDev_x'" y1="'$((clientDev_y+5))'" x2="'$physport_xcoordinate'" y2="'$((clientDev_y+5))'" style="stroke:'${is_active_color}';stroke-width:1" />' >> $groupFile
          echo ${groupID}:'<circle cx="'$physport_xcoordinate'" cy="'$((clientDev_y+5))'" r="2" />' >> $groupFile

          ((clientDev_y=clientDev_y+devIncrement))
        done
      fi
    fi

    # variables for right hand side of client for physical ports
    ((r_clientDev_x=client_x+clientSize_x-15))
    ((r_clientDev_y=client_y+50))

    # process slotchildren
    if [ -s ${clientSlotChildrenFile} ]; then
      devIncrement=40
      cat ${clientSlotChildrenFile} | while read slotChildren
      do
        echo "slotChildEntry: ${slotChildEntry}" | ${LOG}
	DeviceType=""
	fillcolor=""
	phys_loc="$(getValue "${slotChildren}" "phys_loc")"
	description="$(getValue "${slotChildren}" "description")"
	echo "phys_loc: ${phys_loc} description: ${description}" | ${LOG}
	# look for mac_address= or wwpn= to determone if ETH or FC device
	mac_address="$(echo "${slotChildren}" | grep ",mac_address=")"
	wwpn="$(echo "${slotChildren}" | grep ",wwpn=")"
	if [ ${#mac_address} -gt 0 ]; then
	  echo "phys_loc: ${phys_loc} is an ETH device" |${LOG}
	  DeviceType="ETH"
	  dev1="ENT"
	  dev2="EN"
	  fillcolor="${COLOR_ETHERNET_PHYSPORT}"
	elif [ ${#wwpn} -gt 0 ]; then
	  echo "phys_loc: ${phys_loc} is an FC device" |${LOG}
	  DeviceType="FC"
	  dev1="FCS"
	  dev2="FSCSI"
	  fillcolor="${COLOR_FC_PHYSPORT}"
	else
	  echo "phys_loc: ${phys_loc} is unknown" |${LOG}
	fi
	#if ( [ "${DeviceType}" == "ETH" ] && [ "${1}" == "NETWORK" ] ) || ( [ "${DeviceType}" == "FC" ] && [ "${1}" == "STORAGE" ] ) || [ "${1}" == "ALL" ]; then
	if [ "${DeviceType}" == "ETH" ] || [ "${DeviceType}" == "FC" ]; then
	  # ent/fcs device
          echo '<rect x="'$r_clientDev_x'" y="'$r_clientDev_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          ((devText_x=r_clientDev_x+5))
          ((devText_y=r_clientDev_y+11))

	  # en/fscsi device
          en_x=$((r_clientDev_x+18))
          en_y=$((r_clientDev_y+12))
          echo '<rect x="'$en_x'" y="'$en_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
          ((enText_x=en_x+5))
          ((enText_y=en_y+11))

          d_clientDevLoc="$(echo "${phys_loc}" | cut -f3- -d ".")"
          ((textLoc_x=client_x+clientSize_x+5))
          ((textLoc_y=r_clientDev_y-3))
          echo '<text x="'$textLoc_x'" y="'$textLoc_y'" style="text-anchor:start;font-size:10px" onclick="displayAttributes(evt, '\'${d_clientDevLoc}\'')" onmouseover="show(evt, '\'${d_clientDevLoc}\'')" onmouseout="hide(evt, '\'${d_clientDevLoc}\'')">'$d_clientDevLoc'</text>' >> $pictureFile
          addpopup "${d_clientDevLoc}" "${textLoc_x}" "${textLoc_y}" "${fillcolor}" "DeviceType=${DeviceType},${slotChildren}"

	  # write to user object file for userdata setting
          echo "${dev1},${d_clientDevLoc},${devText_x},${devText_y},${fillcolor},right" >> $userobjectFile
          echo "${dev2},${d_clientDevLoc},${enText_x},${enText_y},${fillcolor},right" >> $userobjectFile
          ((r_clientDev_y=r_clientDev_y+devIncrement))
	fi
      done
    fi

    # process slotphysical
    if [ -s ${clientSlotPhysicalFile} ]; then
      devIncrement=30
      cat ${clientSlotPhysicalFile} | while read slotPhysical
      do
        echo "slotPhysical: ${slotPhysical}" | ${LOG}
	drc_name="$(getValue "${slotPhysical}" "drc_name")"
	description="$(getValue "${slotPhysical}" "description")"
	echo "drc_name: ${drc_name} description: ${description}" | ${LOG}
	fillcolor="${COLOR_IOSLOT}"
        echo '<rect x="'$r_clientDev_x'" y="'$r_clientDev_y'" width="35" height="12" fill="'${fillcolor}'" style="stroke:black;stroke-width:1px"/>' >> $pictureFile
        ((devText_x=r_clientDev_x+5))
        ((devText_y=r_clientDev_y+11))

        d_clientDevLoc="$(echo "${drc_name}" | cut -f3- -d ".")"
        ((textLoc_x=client_x+clientSize_x+5))
        ((textLoc_y=r_clientDev_y-3))
        echo '<text x="'$textLoc_x'" y="'$textLoc_y'" style="text-anchor:start;font-size:10px" onclick="displayAttributes(evt, '\'${d_clientDevLoc}\'')" onmouseover="show(evt, '\'${d_clientDevLoc}\'')" onmouseout="hide(evt, '\'${d_clientDevLoc}\'')">'$d_clientDevLoc'</text>' >> $pictureFile
        addpopup "${d_clientDevLoc}" "${textLoc_x}" "${textLoc_y}" "${fillcolor}" "DeviceType=IOSLOT,${slotPhysical}"

	# write to user object file for userdata setting
        echo "IOSLOT,${d_clientDevLoc},${devText_x},${devText_y},${fillcolor},right" >> $userobjectFile
        ((r_clientDev_y=r_clientDev_y+devIncrement))
      done
    fi

    ((b=b+1))
    # stagger clients
    if [ $((b%2)) -gt 0 ]; then
      ((client_x=vlan_x2+client_x_offset+(clientSize_x/2)))
    else
      ((client_x=vlan_x2+client_x_offset))
    fi
    ((client_y=client_y+clientSize_y+10))
  done
  echo "<-- drawClient ${1}, RC=${RC}" |${LOG}
}

# v10.17
#########################################################################
# Function to draw SRIOV physical ports and connect logical ports from clients						#
#########################################################################
drawSRIOVPhysports () {
  echo "--> drawSRIOVPhysports" |${LOG}

  #fillcolor="${COLOR_SRIOV_PHYSPORT}"
  fillcolor="black"
  ((vlan_y2=pictureSize_y-50))
  ####################################################################################
  # draw sriov physports
  ####################################################################################
  text_y1=$((starty-12))
  ((pv_x1=startx+sizeViox+20))
  #((pv_x2=pv_x1+80))
  #((pv_x2=pv_x1+100))
  pvVlanx_min=5000
  pvVlanx_max=0
  # create file to sort based on phys_port_label
  physportlabelFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_physportlabel"
  grep "${PDRAW_SRIOVPHYSPORT},${ManagedSystem[$x]}:" $configFile | grep "adapter_id=" | cut -f 2 -d ":" | while read sriovPhysportsEntry
  do
    phys_port_label="$(getValue "${sriovPhysportsEntry}" "phys_port_label")"
    echo "${phys_port_label}:${sriovPhysportsEntry}" >> $physportlabelFile
  done

  if [ -f ${physportlabelFile} ]; then
    cat ${physportlabelFile} | sort -t: -k1 | cut -f 2 -d ":" | while read sriovPhysportsEntry
    do
      phys_port_loc="$(echo "$(getValue "${sriovPhysportsEntry}" "phys_port_loc")" | cut -f 3 -d ".")"
      phys_port_label="$(getValue "${sriovPhysportsEntry}" "phys_port_label")"
      adapter_id="$(getValue "${sriovPhysportsEntry}" "adapter_id")"
      phys_port_id="$(getValue "${sriovPhysportsEntry}" "phys_port_id")"
      echo "add phys_port_loc: ${phys_port_loc} phys_port_label: ${phys_port_label}" |${LOG}
      echo "SRIOVPHYSPORT:${phys_port_label}--${phys_port_loc},${devCon_x},${fillcolor},${sriovPhysportsEntry}" >> $sriovPhysportHelpFile
      groupID="g_SRIOVPHYSPORT_${adapter_id}_${phys_port_id}"
      echo "GROUP:${groupID}" >>$groupFile

      echo ${groupID}:'<line x1="'$devCon_x'" y1="'$starty'" x2="'$devCon_x'" y2="'$vlan_y2'" style="stroke:'${fillcolor}';stroke-width:1" />' >> $groupFile
      # process SRIOVLOGPORT data and draw lines and circles
      grep "SRIOVLOGPORT:${adapter_id}:${phys_port_id}:" $sriovPhysportHelpFile | while read SRIOVLOGPORT_entry
      do
        xcoord="$(echo "${SRIOVLOGPORT_entry}" | cut -f 4 -d ":")"
        ycoord="$(echo "${SRIOVLOGPORT_entry}" | cut -f 5 -d ":")"
        is_active_color="$(echo "${SRIOVLOGPORT_entry}" | cut -f 6 -d ":")"
        echo ${groupID}:'<line x1="'$xcoord'" y1="'$ycoord'" x2="'$devCon_x'" y2="'$ycoord'" style="stroke:'${is_active_color}';stroke-width:1;" />' >> $groupFile
        echo ${groupID}:'<circle cx="'$devCon_x'" cy="'$ycoord'" r="2" />' >> $groupFile	
      done
      if [ $devCon_x -lt $pvVlanx_min ]; then
        pvVlanx_min=$devCon_x
      fi
      if [ $pvVlanx_max -lt $devCon_x ]; then
        pvVlanx_max=$devCon_x
      fi
      ((devCon_x=devCon_x+30))

    done
    echo '<text x="'$pvVlanx_min'" y="'$text_y1'" style="font-size:12px">'SRIOV Ports'</text>' >> $pictureFile
    vlan_x2=${devCon_x}

    clientStart_x=${vlan_x2}
  fi

  echo "<-- drawSRIOVPhysports, RC=${RC}" |${LOG}
}

#=============================================================================
# FUNCTION NAME:        addpopup
#        inputs:        $1 object name
#                       $2 x-coordinate
#                       $3 y-coordinate
#                       $4 background color
#                       $5 comma separated list of variables to display
#                       $6 userdata dataType
#=============================================================================
function addpopup {
  echo "addpopup ->"                                                                                  |${LOG}
  RC=0
  objName="$1"
  xPos="$2"
  yPos="$3"
  bColor="$4"
  aList="$5"
  pDataType="$6"
  # look for user specified data to process
  if [ -f ${ALLUSERDATA} ]; then
    # filter out the data based on objName
    grep "USERDATA,${ManagedSystem[$x]},${objName}," ${ALLUSERDATA} | grep -iE ",ADD,|,ASC," > ${ALLUSERDATA}.tmp
    if [ -f ${ALLUSERDATA}.tmp ]; then
      echo "processing user defined data" |${LOG}
      cat ${ALLUSERDATA}.tmp | while read entry
      do
	userData="$(echo "${entry}" | cut -f 1 -d ":" | cut -f2- -d ",")"
	userAttr="$(echo "${entry}" | cut -f2- -d ":")"
	echo "userData: ${userData} userAttr: ${userAttr}" |${LOG}
        typeset -u userOp="$(echo "${userData}" | cut -f 3 -d ",")"
	echo "userOp: ${userOp}" |${LOG}
	if [ "${userOp}" == "ASC" ]; then
	  userName="$(echo "${userData}" | cut -f 4 -d ",")"
	  typeset -i userRelx="$(echo "${userData}" | cut -f 5 -d ",")"
	  typeset -i userRely="$(echo "${userData}" | cut -f 6 -d ",")"
          typeset -u dataType="$(echo "${userData}" | cut -f 7 -d ",")"
          userObjName="$(echo "${objName}_${userName}" | tr " " "_")"
          echo "create ASC userObjName: ${userObjName} attributes: ${userAttr}" |${LOG}
	  # calculate position to display text
	  if [ ${userRelx} -eq 0 ]; then
	    ascText_x=$((xPos+((${#objName}*6))))
	  else
	    ascText_x=$((xPos+userRelx))
	  fi
	  if [ ${userRely} -eq 0 ]; then
	    ascText_y=${yPos}
	  else
	    ascText_y=$((yPos+userRely))
	  fi
	  if [ "${dataType}" == "URL" ]; then
	    echo '<a xlink:href="'$userAttr'" target="_blank"><text x="'$ascText_x'" y="'$ascText_y'" style="fill:'${COLOR_USER_DATA}';font-size:12px" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text></a>' >> $pictureFile
	  else
	    echo '<text x="'$ascText_x'" y="'$ascText_y'" style="fill:'${COLOR_USER_DATA}';font-size:12px" onclick="displayAttributes(evt, '\'${userObjName}\'')" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text>' >> $pictureFile
	  fi
	  echo "${userObjName},${ascText_x},${ascText_y},${COLOR_USER_DATA},${dataType},${userAttr}" >> ${addpopupDataFile}
	else
          aList="${userAttr},${aList}"
          echo "updated objName: ${objName} attributelist: ${aList}" |${LOG}
	fi
      done
    else
      echo "no user defined data for objName: ${objName}" |${LOG}
    fi
  fi
  echo "${objName},${xPos},${yPos},${bColor},${pDataType},${aList}" >> ${addpopupDataFile}

  echo "addpopup <- rc=${RC}"                                                                         |${LOG}
  return ${RC}
}  # end of addpopup

#=============================================================================
# FUNCTION NAME:        processaddpopup
#       file format:    $1 object name
#                       $2 x-coordinate
#                       $3 y-coordinate
#                       $4 background color
#                       $5 dataType ("", URL)
#                       $6 comma separated list of variables to display
#=============================================================================
function processaddpopup {
  echo "processaddpopup ->"                                                                                  |${LOG}
  RC=0
  sedCmdFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}.sedCmd"
  cat ${addpopupDataFile} | while read popupLine 
  do
    attrHelp=${WORK_AREA}'attrHelp'
    attrResults=${WORK_AREA}'attrResults'
    vfcHelp=${WORK_AREA}'vfcHelp'
    objName="$(echo "${popupLine}" | cut -f 1 -d ",")"
    xPos="$(echo "${popupLine}" | cut -f 2 -d ",")"
    yPos="$(echo "${popupLine}" | cut -f 3 -d ",")"
    # check to see if the object has already been created in the picturePopupFile and make adjustments to positioning for this view
    objNameCheck=""
    if [ -s ${picturePopupFile} ]; then
      objNameCheck="$(grep "id=\"${objName}\"" ${picturePopupFile})"
    fi
    if [ ${#objNameCheck} -gt 0 ]; then
      old_translate="$(echo "${objNameCheck}" | cut -f 6 -d '"')"
      new_translate="translate(${xPos},${yPos})"
      echo "adjust objName: ${objName} old_translate: ${old_translate} new_translate: ${new_translate}" |${LOG}
      # <g id="ttvxi704a_fcs0" display="none"  transform="translate(370,211)"
      echo "s|g id=\"${objName}\" display=\"none\"  transform=\"${old_translate}\"|g id=\"${objName}\" display=\"none\"  transform=\"${new_translate}\"|" >> ${sedCmdFile}
    else 
      bColor="$(echo "${popupLine}" | cut -f 4 -d ",")"
      dataType="$(echo "${popupLine}" | cut -f 5 -d ",")"
      aList="$(echo "${popupLine}" | cut -f6- -d ",")"
      # clean out files
      > $attrHelp
      > $attrResults

      rectWidth=0
      rectHeight=0
      numAttr=0
      numattrSave=0
      echo "objName: ${objName} displayName: ${displayName} dataType: ${dataType} attributelist: ${aList}" |${LOG}
      if [ "${dataType}" == "URL" ]; then
        echo "${aList}" > $attrHelp
        rectWidth=${#aList}
        rectWidth=$((rectWidth+1))
        echo "1,${rectWidth}" > $attrResults
      else
        echo "${aList}" | awk -v attrResults=${attrResults} -v logfile=${LOG_FILE} \
        '{\
          numP=split($0, tmpArray, "=");\
          newAttrNum=0;\
          rectWidth=0;\
          entrywidth=0;\
          for(i=1; i<numP; i++) {\
            numkey=split(tmpArray[i], keyArray, ",");\
            numvalue=split(tmpArray[i+1], valueArray, ",");\
            key=(keyArray[numkey]);\
            value="";\
            sep="";\
            if (  (i+1) == numP ) {\
              print ("numvalue: "numvalue) >> logfile
              numvalue+=1;\
            }\
            for (j=1; j<numvalue; j++) {\
              print ("j: "j" numvalue:"numvalue) >> logfile
              value=(value sep valueArray[j]);\
              sep=",";\
            }\
            print ("i: "i" numP: "numP" key: ["key"] value: ["value"]") >> logfile
            if ((key == "vhost") && (value != "none")) {\
              numAttr=split(value, a, ",");\
              key=a[1];\
              print (key"=");\
              if ( entrywidth < (length(key)+1) ) {\
                entrywidth=length(key)+1;\
        	    }\
              for(k=2; k<=numAttr-1; k+=6) {\
                pvar="*" a[k] "," a[k+1] "," a[k+2] "," a[k+3];\
                gsub(":", "=", pvar);\
                print (pvar);\
                if ( entrywidth < length(pvar) ) {\
                  entrywidth=length(pvar);\
        	      }\
                if (((i+newAttrNum)%30) == 0) {\
                  print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                  rectWidth=rectWidth+entrywidth;\
                  entrywidth=0;\
                }\
        	      newAttrNum=newAttrNum+1;\
                pvar="," a[k+4] "," a[k+5];\
                gsub(":", "=", pvar);\
                print (pvar);\
                if ( entrywidth < length(pvar) ) {\
                  entrywidth=length(pvar);\
        	      }\
                if (((i+newAttrNum)%30) == 0) {\
                  print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                  rectWidth=rectWidth+entrywidth;\
                  entrywidth=0;\
                }\
        	      newAttrNum=newAttrNum+1;\
              }\
            } else if ((key == "clientvhost") && (value != "none")) {\
              numAttr=split(value, a, ",");\
              key=a[1];\
              print (key"=");\
              if ( entrywidth < (length(key)+1) ) {\
                entrywidth=length(key)+1;\
        	    }\
              for(k=2; k<=numAttr-1; k+=8) {\
                pvar="*" a[k] "," a[k+1] "," a[k+2] "," a[k+3];\
                gsub(":", "=", pvar);\
                gsub(";", ",", pvar);\
                print (pvar);\
                if ( entrywidth < length(pvar) ) {\
                  entrywidth=length(pvar);\
        	      }\
                if (((i+newAttrNum)%30) == 0) {\
                  print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                  rectWidth=rectWidth+entrywidth;\
                  entrywidth=0;\
                }\
        	      newAttrNum=newAttrNum+1;\
                pvar="," a[k+4] "," a[k+5] "," a[k+6] "," a[k+7];\
                gsub(":", "=", pvar);\
                print (pvar);\
                if ( entrywidth < length(pvar) ) {\
                  entrywidth=length(pvar);\
        	      }\
                if (((i+newAttrNum)%30) == 0) {\
                  print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                  rectWidth=rectWidth+entrywidth;\
                  entrywidth=0;\
                }\
        	      newAttrNum=newAttrNum+1;\
              }\
            } else if ((key == "virtual_fc_adapters") && (value != "none")) {\
              print (key"=");\
              if ( entrywidth < (length(key)+1) ) {\
                entrywidth=length(key)+1;\
        	    }\
              numAttr=split(value, a, "/");\
              for(k=1; k<=numAttr-1; k+=6) {\
                if (substr(a[k],2,1) == ",") {\
                  pvar=substr(a[k],3,length(a[k])-2) "/" a[k+1] "/" a[k+2] "/" a[k+3] "/" a[k+4] "/" a[k+5] "/" substr(a[k+6],1,1);\
                  print ("*"pvar);\
                } else {\
                  pvar=a[k] "/" a[k+1] "/" a[k+2] "/" a[k+3] "/" a[k+4] "/" a[k+5] "/" substr(a[k+6],1,1);\
                  print ("*"pvar);\
                }\
                if ( entrywidth < (length(pvar)+1) ) {\
                  entrywidth=length(pvar)+1;\
        	      }\
                if (((i+newAttrNum)%30) == 0) {\
                  print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                  rectWidth=rectWidth+entrywidth;\
                  entrywidth=0;\
                }\
        	      newAttrNum=newAttrNum+1;\
              }\
            } else if (((key == "slpipaddrs") || \
                        (key == "ipv6addrlpar") || \
                        (key == "networkmask") || \
                        (key == "ipaddr") || \
                        (key == "ipaddrlpar") || \
                        (key == "networkmasklpar") || \
                        (key == "clients") || \
                        (key == "virtual_scsi_adapters") || \
              	        (key == "virtual_serial_adapters") || \
              	        (key == "topology") || \
              	        (key == "io_slots")) && \
              	        (value != "none")) {\
              print (key"=");\
              if ( entrywidth < length(key)+1 ) {\
                entrywidth=length(key)+1;\
        	    }\
              numAttr=split(value, a, ",");\
              for(k=1; k<=numAttr; k+=1) {\
                print ("*"a[k]);\
                if ( entrywidth < length(a[k])+1 ) {\
                  entrywidth=length(a[k])+1;\
        	      }\
                if (((i+newAttrNum)%30) == 0) {\
                  print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                  rectWidth=rectWidth+entrywidth;\
                  entrywidth=0;\
                }\
        	      newAttrNum=newAttrNum+1;\
              }\
            } else if ((key == "vswitch") && \
                       (value != "none")) {\
              numAttr=split(value, a, ",");\
              print (key"="a[1]);\
              if ( entrywidth < length(key)+length(a[1])+1 ) {\
                entrywidth=length(key)+length(a[1])+1;\
        	    }\
              for(k=2; k<=numAttr; k+=1) {\
                print ("*"a[k]);\
                if ( entrywidth < length(a[k])+1 ) {\
                  entrywidth=length(a[k])+1;\
        	      }\
                if (((i+newAttrNum)%30) == 0) {\
                  print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                  rectWidth=rectWidth+entrywidth;\
                  entrywidth=0;\
                }\
        	      newAttrNum=newAttrNum+1;\
              }\
            } else if ((key == "virtual_eth_adapters") && (value != "none")) {\
              print (key"=");\
              if ( entrywidth < length(key)+1 ) {\
                entrywidth=length(key)+1;\
        	    }\
              numAttr=split(value, a, "/");\
              if ((numAttr % 9) == 1) {\
                for(k=1; k<=numAttr-1; k+=9) {\
        	        begCommaLoc=index(a[k], ",");\
        	        endCommaLoc=index(a[k+9], ",");\
        	        if (endCommaLoc == 0) {\
        	          endCommaLoc=length(a[k+9]);\
        	        } else {\
        	          endCommaLoc=endCommaLoc-1;\
        	        }\
                  pvar=substr(a[k],begCommaLoc+1,length(a[k])-begCommaLoc) "/" a[k+1] "/" a[k+2] "/" a[k+3] "/" a[k+4] "/" a[k+5] "/" a[k+6] "/" a[k+7] "/" a[k+8] "/" substr(a[k+9],1,endCommaLoc);\
                  print ("*"pvar);\
                  if ( entrywidth < length(pvar)+1 ) {\
                    entrywidth=length(pvar)+1;\
         	        }\
                  if (((i+newAttrNum)%30) == 0) {\
                    print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                    rectWidth=rectWidth+entrywidth;\
                    entrywidth=0;\
                  }\
        	        newAttrNum=newAttrNum+1;\
        	      }\
              } else if ((numAttr % 6) == 1) {\
                for(k=1; k<=numAttr-1; k+=6) {\
        	        begCommaLoc=index(a[k], ",");\
        	        endCommaLoc=index(a[k+6], ",");\
        	        if (endCommaLoc == 0) {\
        	          endCommaLoc=length(a[k+6]);\
        	        } else {\
        	          endCommaLoc=endCommaLoc-1;\
        	        }\
                  pvar=substr(a[k],begCommaLoc+1,length(a[k])-begCommaLoc) "/" a[k+1] "/" a[k+2] "/" a[k+3] "/" a[k+4] "/" a[k+5] "/" substr(a[k+6],1,endCommaLoc);\
                  print ("*"pvar);\
                  if ( entrywidth < length(pvar)+1 ) {\
                    entrywidth=length(pvar)+1;\
        	        }\
                  if (((i+newAttrNum)%30) == 0) {\
                    print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                    rectWidth=rectWidth+entrywidth;\
                    entrywidth=0;\
                  }\
        	        newAttrNum=newAttrNum+1;\
        	      }\
              } else if ((numAttr % 5) == 1) {\
                for(k=1; k<=numAttr-1; k+=5) {\
        	        begCommaLoc=index(a[k], ",");\
        	        endCommaLoc=index(a[k+5], ",");\
        	        if (endCommaLoc == 0) {\
        	          endCommaLoc=length(a[k+5]);\
        	        } else {\
        	          endCommaLoc=endCommaLoc-1;\
        	        }\
                  pvar=substr(a[k],begCommaLoc+1,length(a[k])-begCommaLoc) "/" a[k+1] "/" a[k+2] "/" a[k+3] "/" a[k+4] "/" substr(a[k+5],1,endCommaLoc);\
                  print ("*"pvar);\
                  if ( entrywidth < length(pvar)+1 ) {\
                    entrywidth=length(pvar)+1;\
        	        }\
                  if (((i+newAttrNum)%30) == 0) {\
                    print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                    rectWidth=rectWidth+entrywidth;\
                    entrywidth=0;\
                  }\
        	        newAttrNum=newAttrNum+1;\
        	      }\
              }\
            } else {\
              print (key"="value);\
              if ( entrywidth < length(key)+length(value)+1 ) {\
                entrywidth=length(key)+length(value)+1;\
              }\
              if (((i+newAttrNum)%30) == 0) {\
                print (key" --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
                rectWidth=rectWidth+entrywidth;\
                entrywidth=0;\
              }\
            }\
          }\
          # get last column
          print ("last column check --> newAttrNum: "newAttrNum" numP: "numP) >> logfile
          if (((newAttrNum+numP-1)%30) > 0) {\
            print ("last column --> rectWidth: "rectWidth" entrywidth: "entrywidth) >> logfile
            rectWidth=rectWidth+entrywidth;\
          }\
          print ("i: "i" newAttrNum: "newAttrNum" numP: "numP" rectWidth: "rectWidth) >> logfile
          print (newAttrNum+numP","rectWidth) > attrResults
          print ("last i: "i" numP: "numP) >> logfile
        }' 1>$attrHelp
      fi

      # get results from file
      read -r results<${attrResults}
      numAttr=$(echo "${results}" | cut -f 1 -d ",")
      rectWidth=$(echo "${results}" | cut -f 2 -d ",")
      echo "numAttr: ${numAttr} rectWidth: ${rectWidth}" |${LOG}

      tHeight=15
      if [ ${numAttr} -eq 1 ]; then
        tHeight=20
      fi
      rectHeight=$((numAttr*tHeight))
      rectWidth=$((rectWidth*7))

      # adjust display if over 30 attributes
      numCols=$((numAttr/30))
      if [ $((numAttr%30)) -gt 0 ]; then
        numCols=$((numCols+1))
      fi
      echo "numCols: ${numCols}" |${LOG}
      if [ ${numCols} -gt 1 ]; then
        rectHeight=$((30*15))
      fi
      rectWidth=$(((numCols*30)+rectWidth))

      # create element to display
      outData="<g id=\"${objName}\" display=\"none\"  transform=\"translate($((xPos+40)),$((yPos+10)))\" >"
      outData="${outData} <rect id=\"${objName}_rect\" x=\"0\" y=\"0\" width=\"${rectWidth}\" height=\"${rectHeight}\" fill=\"${bColor}\" />"
      outData="${outData} <text x=\"220\" y=\"15\" font-size=\"12\" font-family=\"monospace\" fill=\"black\">"
      dy=""
      xOffset="5"
      element=1
      maxElement=0
      cat "${attrHelp}" | while read entry
      do
        if [ ${element} -gt 30 ] && [ $((element%30)) -eq 1 ]; then
          xOffset=$((xOffset+25+(maxElement*7)))
          maxElement=0
          echo "xOffset: $xOffset" |${LOG}
          dy=" y=\"15\""
        fi
        entry="$(echo "${entry}" | sed -e "s/&/&amp;/g" -e "s/</&lt;/g" -e "s/>/&gt;/g")"
        outData="${outData} <tspan text-anchor=\"start\" x=\"${xOffset}\"${dy}>${entry}</tspan>"
        dy=" dy=\"1.2em\""
        if [ ${maxElement} -lt ${#entry} ]; then
          maxElement=${#entry}
        fi
        element=$((element+1))
      done
      outData="${outData} </text>"
      outData="${outData} </g>"
      echo "${outData}" >>$picturePopupFile
    fi
  done

  checkRC=0
  if [ -s ${sedCmdFile} ]; then
    echo "Substitute transform"                              |${LOG}
    fromOffset=1
    toOffset=999
    typeset -i fSize="$(cat ${sedCmdFile} | wc -l)"
    if [ ${fSize} -lt 999 ]; then
      toOffset=${fSize}
    fi
    echo "fSize: ${fSize}" |${LOG}
    while [ ${toOffset} -le ${fSize} ]
    do
      echo "fromOffset: ${fromOffset} toOffset: ${toOffset}" |${LOG}
      sed -n ${fromOffset},${toOffset}p ${sedCmdFile} > ${sedCmdFile}.tmp
      sed -f ${sedCmdFile}.tmp ${picturePopupFile} > ${picturePopupFile}.sed
      checkRC=${?}
      if [ ${checkRC} -eq 0 ]; then
        cp ${picturePopupFile}.sed ${picturePopupFile}
      else
        errorInfo "Error: running sed -f ${sedCmdFile} ${picturePopupFile} > ${picturePopupFile}.sed, rc=${checkRC}"
      fi
      fromOffset=$((fromOffset+999))
      if [ ${fSize} -gt 999 ] && [ $((fSize-fromOffset)) -gt 999 ]; then
        toOffset=$((toOffset+999))
      elif [ ${toOffset} -lt ${fSize} ]; then
        toOffset=${fSize}
      else
        toOffset=$((fSize+1))
      fi   
    done
    RC=${checkRC}
  fi

  echo "processaddpopup <- rc=${RC}"                                                                         |${LOG}
  return ${RC}

}  # end of processaddpopup
                                                                                          
#=============================================================================            
# FUNCTION NAME:        fileReadClean
#   Description:        Reads file and removes duplicate spaces, tabs, DOS EOL chars, and comments
#        inputs:        $1 input file
#        inputs:        $2 output file
#=============================================================================            
function fileReadClean {
  echo "fileReadClean ->"                                              |${LOG}
  
  RC=0
  isep=""
  #            DOS EOL      tab                  comments       lead trailing spaces   dup spaces 
  cat "${1}" | tr -d '\r' | tr '\t' ' ' | sed -e 's/#.*$//;/^$/d;s/^[ ]*//;s/[ ]*$//' | tr -s ' ' >"${2}.preinclude"
 
 
  # process all the INCLUDE variables
  > "${2}.include"
  cat "${2}.preinclude" | while read line || [ -n "${line}" ]
  do
    keyWord=$(echo ${line} | cut -f1 -d " ")
    data=$(echo ${line} | cut -f2- -d " ")
    case $keyWord in                                                 
      $PDRAW_INCLUDE)
        if [ -f ${data} ]; then
	  INCLUDEfiles="${INCLUDEfiles}${isep}${data}"
	  isep=","
	  cat ${data} >>"${2}.include"
	else
	  RC=${RC_MISSINGINCLUDE}
	  echo "Error: could not locate include file: ${data}, rc=${RC}" |${LOGBOTH}
	  errorInfo "Error: could not locate include file: ${data}, rc=${RC}"
	fi
      ;;
      *)
        echo "${line}" >> "${2}.include"
      ;;
    esac
  done
 
  cat "${2}.include" | tr -d '\r' | tr '\t' ' ' | sed -e 's/#.*$//;/^$/d;s/^[ ]*//;s/[ ]*$//' | tr -s ' ' >>"${2}"
 
  echo "fileReadClean <- rc=${RC}"                                     |${LOG}
  return ${RC}
}

#########################################################################
# Function to capture				 			#
#########################################################################
capture () {
  echo "--> capture, RC=${RC}" |${LOG}
  RC=0
  gotHMC=0

  system="${WORK_AREA}${HMCNAME}_lssyscfg.out"
  ###################################################
  # collect CONFIG information
  ###################################################
  if [ ${DEBUG} -eq 0 ]; then
    ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lssyscfg -r sys | tr -d '"' | sort > $system 2>>${WORK_AREA}getlan.err
  fi
  test=0
  x=0
  creationdate="$(date)"
  echo "${PDRAW_CREATIONDATE}:${creationdate}" >> $configFile	
  cat $system | while read managedsystemEntry
  do
    managedsystem="$(getValue "${managedsystemEntry}" "name")"
    testMS="found"
    if [ ${#MANAGEDSYSTEMS} -gt 0 ]; then
      testMS="$(echo ",${MANAGEDSYSTEMS}," | grep ",${managedsystem},")"
    fi
    if [ ${#testMS} -gt 0 ]; then
      echo "************************************************************************" |${LOGBOTH}
      echo 'Get configuration for managed system: '${managedsystem}                   |${LOGBOTH}
      lpar="${WORK_AREA}${HMCNAME}_${managedsystem}_lpar.out"
      prof="${WORK_AREA}${HMCNAME}_${managedsystem}_prof.out"
      virtualIO="${WORK_AREA}${HMCNAME}_${managedsystem}_virtualIO.out"
      virtualFC="${WORK_AREA}${HMCNAME}_${managedsystem}_virtualFC.out"
      virtualSCSI="${WORK_AREA}${HMCNAME}_${managedsystem}_virtualSCSI.out"
      virtualVNIC="${WORK_AREA}${HMCNAME}_${managedsystem}_virtualVNIC.out"
      virtualVNICBKDEV="${WORK_AREA}${HMCNAME}_${managedsystem}_virtualVNICBKDEV.out"
      io="${WORK_AREA}${HMCNAME}_${managedsystem}_io.out"
      slotchildren="${WORK_AREA}${HMCNAME}_${managedsystem}_slotchildren.out"
      vnetwork="${WORK_AREA}${HMCNAME}_${managedsystem}_vnetwork.out"
      vswitch="${WORK_AREA}${HMCNAME}_${managedsystem}_vswitch.out"
      HMCvpdfile="${WORK_AREA}${HMCNAME}_${managedsystem}_HMCvpd.out"
      HMCnetworkfile="${WORK_AREA}${HMCNAME}_${managedsystem}_HMCnetwork.out"
      CAPABILITIESfile="${WORK_AREA}${HMCNAME}_${managedsystem}.lssyscfg.capabilities.dat"

      if [ ${DEBUG} -eq 0 ]; then
        ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lssyscfg -r sys -m ${managedsystem} -F capabilities 1>${CAPABILITIESfile} 2>>${WORK_AREA}getlan.err
        ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lssyscfg -r lpar -m ${managedsystem} | tr -d '"' > $lpar 2>>${WORK_AREA}getlan.err
        ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lssyscfg -r prof -m ${managedsystem} | tr -d '"' > $prof 2>>${WORK_AREA}getlan.err
        ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r io --rsubtype slot -m ${managedsystem} | tr -d '"' > $io	 2>>${WORK_AREA}getlan.err
        ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r io --rsubtype slotchildren -m ${managedsystem} | tr -d '"' > $slotchildren	 2>>${WORK_AREA}getlan.err
        ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype vnetwork -m ${managedsystem} -F vswitch,is_tagged,vlan_id | tr -d '"' > $vnetwork	 2>>${WORK_AREA}getlan.err
        ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype vswitch -m ${managedsystem} | tr -d '"' > $vswitch	 2>>${WORK_AREA}getlan.err
      fi
      if [ ${gotHMC} -eq 0 ]; then
        gotHMC=1
        if [ ${DEBUG} -eq 0 ]; then
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshmc -v > $HMCvpdfile 2>>${WORK_AREA}getlan.err
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshmc -n | tr -d '"' > $HMCnetworkfile 2>>${WORK_AREA}getlan.err
	fi
        hmcVersion="$(cat "${HMCvpdfile}" | grep "*RM " | sed -e "s/*RM //g")"
        hmcMtm="$(cat "${HMCvpdfile}" | grep "*TM " | sed -e "s/*TM //g")"
        echo "hmcVersion: ${hmcVersion}" |${LOG}
        echo "hmcMtm: ${hmcMtm}" |${LOG}
        cat "${HMCnetworkfile}" | awk -v vs=${PDRAW_HMC} -v hmc=${HMCNAME} -v hv=${hmcVersion} -v hmtm=${hmcMtm} '{print (vs","hmc":version="hv",type_model="hmtm","$0)}' >> $configFile  
      fi
      # add the managedsystem info
      echo "${PDRAW_MANAGEDSYSTEM},${managedsystem}:${managedsystemEntry}" >> $configFile

      # add the managedsystem capabilities info
      cat "${CAPABILITIESfile}" | tr -d '"' | awk -v vs=${PDRAW_CAPABILITIES} -v ms=${managedsystem} '{print (vs","ms":"$0)}' >> $configFile

      # add the PHYSICALIO info
      cat "${io}" | awk -v vs=${PDRAW_PHYSICALIO} -v ms=${managedsystem} '{print (vs","ms":"$0)}' >> $configFile  

      # add the SLOTCHILDREN info
      cat "${slotchildren}" | awk -v vs=${PDRAW_SLOTCHILDREN} -v ms=${managedsystem} '{print (vs","ms":"$0)}' >> $configFile  
    	
      # add the vswitch and vnetwork info
      # check vnetwork file for "invalid value are --rsubtype" which mean old hmc and use vswitch file to generate the same information
      check_old_hmc="$(grep "invalid value are --rsubtype" ${vnetwork})"
      if [ ${#check_old_hmc} -eq 0 ]; then
        echo "process vnetwork file: ${vnetwork}" |${LOG}
        cat ${vnetwork} | sort -t, -k 1 -k 2 | awk -F, '{a[$1]=(a[$1])?a[$1]",tagged:"$2" vlan:"$3:$1",tagged:"$2" vlan:"$3}END{for (i in a){print a[i]}}' | awk -v vs=${PDRAW_VSWITCH} -v ms=${managedsystem} '{print (vs","ms","substr($0,0,index($0,",")-1)":vswitch="$0)}' >> $configFile
      fi

      unset VioHostname
      saveIFS=${IFS}
      IFS=$'\n'
      set -A VioHostname $(grep 'lpar_env=vioserver' $lpar | cut -f 1 -d ',' | cut -f 2 -d '=' | sort)
      IFS=${saveIFS}
      VioHostname_count=$(grep 'lpar_env=vioserver' $lpar | wc | awk '{print $1}')
      y=0
      cat "${lpar}" | grep "lpar_env=vioserver" | while read entry
      do
        VioConfig[${y}]="$(echo ${entry} | tr -d '"')"
        y=$((y+1))
      done

      unset ClientHostname
      y=0
      cat "${lpar}" | grep -v "lpar_env=vioserver" | sort | while read entry
      do
        testClient="found"
        if [ ${#PARTITIONLIST} -gt 0 ]; then
         name="$(getValue "${entry}" "name")"
         testClient="$(echo ",${PARTITIONLIST}," | grep ",${name},")"
        fi
        if [ ${#testClient} -gt 0 ]; then
          ClientHostname[${y}]="$(echo ${entry} | tr -d '"')"
          y=$((y+1))
        fi
      done
      ClientHostname_count=${#ClientHostname[*]}

      ###################################
      # virtual ethernet devices
      ###################################
      if [ ${DEBUG} -eq 0 ]; then
        if [ ${EXTENDEDATTR} -eq 1 ]; then
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype eth --level lpar -m ${managedsystem} -F --header | tr -d ' ' | awk 'BEGIN{FS=",";firstPass=0}{varElement=0;dataElement="";for(i=1;i<=NF;i++)if (firstPass == 0) {numV=split($0, varArray, ","); firstPass=1;} else {flag=1;str=$i;if(sub(/^"/,"",$i)==1 && sub(/"$/," ",$i)==0){while(flag==1){i=i+1;str=str","$i;if(sub(/"$/," ",$i)==1){flag=0}}};if (NR > 1) {sep=",";varElement=varElement+1;if (varElement==1) sep=""; dataElement= dataElement sep varArray[varElement] "=" str; if (varElement==numV) print dataElement}}}' > $virtualIO 2>>${WORK_AREA}getlan.err
        else
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype eth --level lpar -m ${managedsystem} | tr -d '"' > $virtualIO 2>>${WORK_AREA}getlan.err
	fi
      fi
      unset ConfHwresEth
      saveIFS=${IFS}
      IFS=$'\n'
      set -A ConfHwresEth $(cat $virtualIO)
      IFS=${saveIFS}
      y=0
      while [ $y -lt ${#ConfHwresEth[*]} ]
      do
        if [ ${EXTENDEDATTR} -eq 1 ]; then
          echo "${PDRAW_VIRTUALIO},${managedsystem},$(getValue "${ConfHwresEth[$y]}" "lpar_name"):DeviceType=ETH,$(echo ${ConfHwresEth[$y]} | tr -d '"')" >> $configFile
	else
          echo "${PDRAW_VIRTUALIO},${managedsystem},$(getValue "${ConfHwresEth[$y]}" "lpar_name"):DeviceType=ETH,${ConfHwresEth[$y]}" >> $configFile
	fi
        ((y=y+1))
      done

      ##################################################################################################
      # generate VSWITCH information using data from VIRTUALIO to determine if vlan is tagged or not.
      ##################################################################################################
      if [ ${#check_old_hmc} -gt 0 ]; then
        echo "process vswitch file: ${vswitch}" |${LOG}
	vnetwork_tmp="${vnetwork}_tmp"
	if [ -f ${vnetwork_tmp} ]; then
	  rm ${vnetwork_tmp}
	fi
	cat ${vswitch} | while read vswitchEntry
	do
	  vswitch="$(getValue "${vswitchEntry}" "vswitch")"
	  vswitch="$(echo "${vswitch}" | cut -f 1 -d "(")"
	  vlan_ids="$(getValue "${vswitchEntry}" "vlan_ids")"
	  echo "${vlan_ids}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read vlanEntry
	  do
	    tagged="0"
	    grep "${PDRAW_VIRTUALIO},${managedsystem}," ${configFile} | grep "ieee_virtual_eth=1," | grep "vswitch=${vswitch}," | while read taggedEntry
	    do
	      addl_vlan_ids="$(getValue "${taggedEntry}" "addl_vlan_ids")"
	      echo "checking for vlanEntry: ${vlanEntry} in addl_vlan_ids: ${addl_vlan_ids}" |${LOG}
	      testTagged="$(echo ",${addl_vlan_ids}," | grep ",${vlanEntry},")"
	      if [ ${#testTagged} -gt 0 ]; then
	        tagged="1"
		break
	      fi
	    done
	    echo "${vswitch},${tagged},${vlanEntry}" >>${vnetwork_tmp}
	  done
	done
        cat ${vnetwork_tmp} | sort -t, -k 1 -k 2 | awk -F, '{a[$1]=(a[$1])?a[$1]",tagged:"$2" vlan:"$3:$1",tagged:"$2" vlan:"$3}END{for (i in a){print a[i]}}' | awk -v vs=${PDRAW_VSWITCH} -v ms=${managedsystem} '{print (vs","ms","substr($0,0,index($0,",")-1)":vswitch="$0)}' >> $configFile
      fi

      ###################################
      # fibre channel devices
      ###################################
      if [ ${DEBUG} -eq 0 ]; then
        if [ ${EXTENDEDATTR} -eq 1 ]; then
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype fc --level lpar -m ${managedsystem} -F --header | tr -d ' ' | awk 'BEGIN{FS=",";firstPass=0}{varElement=0;dataElement="";for(i=1;i<=NF;i++)if (firstPass == 0) {numV=split($0, varArray, ","); firstPass=1;} else {flag=1;str=$i;if(sub(/^"/,"",$i)==1 && sub(/"$/," ",$i)==0){while(flag==1){i=i+1;str=str","$i;if(sub(/"$/," ",$i)==1){flag=0}}};if (NR > 1) {sep=",";varElement=varElement+1;if (varElement==1) sep=""; dataElement= dataElement sep varArray[varElement] "=" str; if (varElement==numV) print dataElement}}}' > $virtualFC 2>>${WORK_AREA}getlan.err
        else
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype fc --level lpar -m ${managedsystem} | tr -d '"' > $virtualFC 2>>${WORK_AREA}getlan.err
	fi
      fi
      unset ConfHwresFC
      saveIFS=${IFS}
      IFS=$'\n'
      set -A ConfHwresFC $(cat $virtualFC)
      IFS=${saveIFS}
      y=0
      while [ $y -lt ${#ConfHwresFC[*]} ]
      do
        if [ ${EXTENDEDATTR} -eq 1 ]; then
          echo "${PDRAW_VIRTUALFC},${managedsystem},$(getValue "${ConfHwresFC[$y]}" "lpar_name"):DeviceType=FC,$(echo ${ConfHwresFC[$y]} | tr -d '"')" >> $configFile
	else
          echo "${PDRAW_VIRTUALFC},${managedsystem},$(getValue "${ConfHwresFC[$y]}" "lpar_name"):DeviceType=FC,${ConfHwresFC[$y]}" >> $configFile
	fi
        ((y=y+1))
      done

      ###################################
      # scsi devices
      ###################################
      if [ ${DEBUG} -eq 0 ]; then
        if [ ${EXTENDEDATTR} -eq 1 ]; then
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype scsi --level lpar -m ${managedsystem} -F --header | tr -d ' ' | awk 'BEGIN{FS=",";firstPass=0}{varElement=0;dataElement="";for(i=1;i<=NF;i++)if (firstPass == 0) {numV=split($0, varArray, ","); firstPass=1;} else {flag=1;str=$i;if(sub(/^"/,"",$i)==1 && sub(/"$/," ",$i)==0){while(flag==1){i=i+1;str=str","$i;if(sub(/"$/," ",$i)==1){flag=0}}};if (NR > 1) {sep=",";varElement=varElement+1;if (varElement==1) sep=""; dataElement= dataElement sep varArray[varElement] "=" str; if (varElement==numV) print dataElement}}}' > $virtualSCSI 2>>${WORK_AREA}getlan.err
        else
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype scsi --level lpar -m ${managedsystem} | tr -d '"' > $virtualSCSI 2>>${WORK_AREA}getlan.err
	fi
      fi
      unset ConfHwresSCSI
      saveIFS=${IFS}
      IFS=$'\n'
      set -A ConfHwresSCSI $(cat $virtualSCSI)
      IFS=${saveIFS}
      y=0
      while [ $y -lt ${#ConfHwresSCSI[*]} ]
      do
        if [ ${EXTENDEDATTR} -eq 1 ]; then
          echo "${PDRAW_VIRTUALSCSI},${managedsystem},$(getValue "${ConfHwresSCSI[$y]}" "lpar_name"):DeviceType=SCSI,$(echo ${ConfHwresSCSI[$y]} | tr -d '"')" >> $configFile
	else
          echo "${PDRAW_VIRTUALSCSI},${managedsystem},$(getValue "${ConfHwresSCSI[$y]}" "lpar_name"):DeviceType=SCSI,${ConfHwresSCSI[$y]}" >> $configFile
	fi
        ((y=y+1))
      done

      SRIOVcapable="$(grep -w "${CAPABILITIES_SRIOV}" ${CAPABILITIESfile})"
      if [ ${#SRIOVcapable} -gt 0 ]; then
        ###################################
        # vnic devices
        ###################################
        if [ ${DEBUG} -eq 0 ]; then
          if [ ${EXTENDEDATTR} -eq 1 ]; then
            ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype vnic --level lpar -m ${managedsystem} -F --header | tr -d ' ' | awk 'BEGIN{FS=",";firstPass=0}{varElement=0;dataElement="";for(i=1;i<=NF;i++)if (firstPass == 0) {numV=split($0, varArray, ","); firstPass=1;} else {flag=1;str=$i;if(sub(/^"/,"",$i)==1 && sub(/"$/," ",$i)==0){while(flag==1){i=i+1;str=str","$i;if(sub(/"$/," ",$i)==1){flag=0}}};if (NR > 1) {sep=",";varElement=varElement+1;if (varElement==1) sep=""; dataElement= dataElement sep varArray[varElement] "=" str; if (varElement==numV) print dataElement}}}' > $virtualVNIC 2>>${WORK_AREA}getlan.err
	  else
            ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype vnic --level lpar -m ${managedsystem} | tr -d '"' > $virtualVNIC 2>>${WORK_AREA}getlan.err
	  fi
	fi
        unset ConfHwresVNIC
        saveIFS=${IFS}
        IFS=$'\n'
        set -A ConfHwresVNIC $(cat $virtualVNIC)
        IFS=${saveIFS}
        y=0
        while [ $y -lt ${#ConfHwresVNIC[*]} ]
        do
          if [ ${EXTENDEDATTR} -eq 1 ]; then
            echo "${PDRAW_VIRTUALVNIC},${managedsystem},$(getValue "${ConfHwresVNIC[$y]}" "lpar_name"):DeviceType=VNIC,$(echo ${ConfHwresVNIC[$y]} | tr -d '"')" >> $configFile
          else
            echo "${PDRAW_VIRTUALVNIC},${managedsystem},$(getValue "${ConfHwresVNIC[$y]}" "lpar_name"):DeviceType=VNIC,${ConfHwresVNIC[$y]}" >> $configFile
	  fi
          ((y=y+1))
        done
        ###################################
        # vnicbkdev devices
        ###################################
        if [ ${DEBUG} -eq 0 ]; then
          if [ ${EXTENDEDATTR} -eq 1 ]; then
            ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype vnicbkdev -m ${managedsystem} -F --header | tr -d ' ' | awk 'BEGIN{FS=",";firstPass=0}{varElement=0;dataElement="";for(i=1;i<=NF;i++)if (firstPass == 0) {numV=split($0, varArray, ","); firstPass=1;} else {flag=1;str=$i;if(sub(/^"/,"",$i)==1 && sub(/"$/," ",$i)==0){while(flag==1){i=i+1;str=str","$i;if(sub(/"$/," ",$i)==1){flag=0}}};if (NR > 1) {sep=",";varElement=varElement+1;if (varElement==1) sep=""; dataElement= dataElement sep varArray[varElement] "=" str; if (varElement==numV) print dataElement}}}' > $virtualVNICBKDEV 2>>${WORK_AREA}getlan.err
	  else
            ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} lshwres -r virtualio --rsubtype vnicbkdev -m ${managedsystem} | tr -d '"' > $virtualVNICBKDEV 2>>${WORK_AREA}getlan.err
	  fi
	fi
        unset ConfHwresVNICBKDEV
        saveIFS=${IFS}
        IFS=$'\n'
        set -A ConfHwresVNICBKDEV $(cat $virtualVNICBKDEV)
        IFS=${saveIFS}
        y=0
        while [ $y -lt ${#ConfHwresVNICBKDEV[*]} ]
        do
          if [ ${EXTENDEDATTR} -eq 1 ]; then
            echo "${PDRAW_VIRTUALVNICBKDEV},${managedsystem},$(getValue "${ConfHwresVNICBKDEV[$y]}" "lpar_name"):DeviceType=VNICBKDEV,$(echo ${ConfHwresVNICBKDEV[$y]} | tr -d '"')" >> $configFile
          else
            echo "${PDRAW_VIRTUALVNICBKDEV},${managedsystem},$(getValue "${ConfHwresVNICBKDEV[$y]}" "lpar_name"):DeviceType=VNICBKDEV,${ConfHwresVNICBKDEV[$y]}" >> $configFile
	  fi
          ((y=y+1))
        done
        sriovAdapterFile="${WORK_AREA}${HMCNAME}_${managedsystem}.lshwres.sriov.adapter.dat"
        if [ ${DEBUG} -eq 0 ]; then
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} "lshwres -r sriov -m ${managedsystem} --rsubtype adapter" 1>${sriovAdapterFile} 2>>${LOG_FILE}
	fi
        RC=${?}
        if [ ${RC} -eq 0 ]; then
          cat "${sriovAdapterFile}" | tr -d '"' | awk -v vs=${PDRAW_SRIOVADAPTER} -v ms=${managedsystem} '{print (vs","ms":DeviceType="vs","$0)}' >> $configFile
          sriovPhysportEthFile="${WORK_AREA}${HMCNAME}_${managedsystem}.lshwres.sriov.physport.eth.dat"
          if [ ${DEBUG} -eq 0 ]; then
            ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} "lshwres -r sriov -m ${managedsystem} --rsubtype physport --level eth" 1>${sriovPhysportEthFile} 2>>${LOG_FILE}
	  fi
          RC=${?}
          if [ ${RC} -eq 0 ]; then
            sriovPhysportEthFile="${WORK_AREA}${HMCNAME}_${managedsystem}.lshwres.sriov.physport.eth.dat"
            if [ ${DEBUG} -eq 0 ]; then
              ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} "lshwres -r sriov -m ${managedsystem} --rsubtype physport --level roce" 1>>${sriovPhysportEthFile} 2>>${LOG_FILE}
              ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} "lshwres -r sriov -m ${managedsystem} --rsubtype physport --level ethc" 1>>${sriovPhysportEthFile} 2>>${LOG_FILE}
	    fi
            RC=${?}
            if [ ${RC} -eq 0 ]; then
              cat "${sriovPhysportEthFile}" | tr -d '"' | awk -v vs=${PDRAW_SRIOVPHYSPORT} -v ms=${managedsystem} '{print (vs","ms":DeviceType="vs","$0)}' >> $configFile
              sriovLogportFile="${WORK_AREA}${HMCNAME}_${managedsystem}.lshwres.sriov.logport.dat"
              if [ ${DEBUG} -eq 0 ]; then
                ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} "lshwres -r sriov -m ${managedsystem} --rsubtype logport" 1>${sriovLogportFile} 2>>${LOG_FILE}
	      fi
              RC=${?}
              if [ ${RC} -eq 0 ]; then
                # pick up any active ports
                sriovLogportFile="${WORK_AREA}${HMCNAME}_${managedsystem}.lshwres.sriov.logport.dat"
                if [ ${DEBUG} -eq 0 ]; then
                  ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} "lshwres -r sriov -m ${managedsystem} --rsubtype logport --level eth" 1>>${sriovLogportFile} 2>>${LOG_FILE}
		fi
                RC=${?}
                if [ ${RC} -eq 0 ] || [ ${RC} -eq 1 ]; then
                  cat "${sriovLogportFile}" | tr -d '"' | awk -v vs=${PDRAW_SRIOVLOGPORT} -v ms=${managedsystem} '{print (vs","ms":DeviceType="vs","$0)}' >> $configFile
      	          RC=0
        	  echo "successfully loaded all files for SRIOV" |${LOG}
                else
                  errorInfo "Error: running ssh ${HMCUSER}@${HMCNAME} \"lshwres -r sriov -m ${managedsystem} --rsubtype logport --level eth\" >${sriovLogportFile}, rc=${RC}"
                fi
              else
                errorInfo "Error: running ssh ${HMCUSER}@${HMCNAME} \"lshwres -r sriov -m ${managedsystem} --rsubtype logport\" >${sriovLogportFile}, rc=${RC}"
              fi
            else
              errorInfo "Error: running ssh ${HMCUSER}@${HMCNAME} \"lshwres -r sriov -m ${managedsystem} --rsubtype physport --level ethc\" >${sriovPhysportEthFile}, rc=${RC}"
            fi
          else
            errorInfo "Error: running ssh ${HMCUSER}@${HMCNAME} \"lshwres -r sriov -m ${managedsystem} --rsubtype physport --level eth\" >${sriovPhysportEthFile}, rc=${RC}"
          fi
        else
          errorInfo "Error: running ssh ${HMCUSER}@${HMCNAME} \"lshwres -r sriov -m ${managedsystem} --rsubtype adapter\" >${sriovAdapterFile}, rc=${RC}"
        fi
      fi
    	
      y=0
      while [ $y -lt $ClientHostname_count ]
      do
        hostname="$(getValue "${ClientHostname[$y]}" "name")"
        lparId="$(getValue "${ClientHostname[$y]}" "lpar_id")"
        string="${PDRAW_CLIENTLPAR},${managedsystem},${hostname}:${ClientHostname[$y]}"
        echo $string >> $configFile
        curr_profile="$(getValue "${ClientHostname[$y]}" "curr_profile")"
        if [ ${#curr_profile} -eq 0 ]; then
          curr_profile="$(getValue "${ClientHostname[$y]}" "default_profile")"
        fi
        echo "  partition: ${hostname} lpar_id: ${lparId} profile: ${curr_profile}" |${LOGBOTH}
        curr_profile_entry="$(cat ${prof} | grep "lpar_name=${hostname}," | grep "name=${curr_profile}," | tr -d '"')"
        string="${PDRAW_PROFILE},${managedsystem},${hostname}:${curr_profile_entry}"
        echo $string >> $configFile
        hostname=$(echo ${ClientHostname[$y]} | cut -f 1 -d ',' | cut -f 2 -d '=')
        lparId=$(echo ${ClientHostname[$y]} | cut -f 2 -d ',' | cut -f 2 -d '=')
    	
        unset adapAll	
        saveIFS=${IFS}
        IFS=$'\n'
        set -A adapAll $(cat $io | grep "lpar_id=${lparId}," | tr " " "_")
        IFS=${saveIFS}
        string="${PDRAW_IOSLOTS},${managedsystem},${hostname}:"
        z=0
        tsep=""
        while [ $z -lt ${#adapAll[*]} ]
        do
          description="$(getValue "${adapAll[$z]}" "description")"
  	  drc_name="$(getValue "${adapAll[$z]}" "drc_name")"
          string="${string}${tsep}io_adapter${z}=${drc_name},${description}"
  	  tsep=","
          ((z=z+1))
        done
        if [ ${z} -gt 0 ]; then
          echo "${string}" >> $configFile
        fi
        ((y=y+1))
	# check to see if client profile has virtual_fc_adapters and they are not in config_file as VIRTUALFC because the partition has not been activated
	virtual_fc_adapters="$(getValue "${curr_profile_entry}" "virtual_fc_adapters")"
	if [ ${#virtual_fc_adapters} -gt 0 ] && [ "${virtual_fc_adapters}" != "none" ]; then
	  checkVIRTUALFC="$(grep "${PDRAW_VIRTUALFC},${managedsystem},${hostname}:" ${configFile})"
	  if [ ${#checkVIRTUALFC} -eq 0 ]; then
	    echo "partition has virtual_fc_adapters but not present in VIRTUALFC: partition: ${hostname} virtual_fc_adapters: ${virtual_fc_adapters}" |${LOG}
            echo "${virtual_fc_adapters}" | awk \
	      '{ \
                numAttr=split($0, a, "/");\
                for(k=1; k<=numAttr-1; k+=6) {\
                  if (substr(a[k],2,1) == ",") {\
                    pvar=substr(a[k],3,length(a[k])-2) "/" a[k+1] "/" a[k+2] "/" a[k+3] "/" a[k+4] "/" a[k+5] "/" substr(a[k+6],1,1);\
                    print (pvar);\
                  } else {\
                    pvar=a[k] "/" a[k+1] "/" a[k+2] "/" a[k+3] "/" a[k+4] "/" a[k+5] "/" substr(a[k+6],1,1);\
                    print (pvar);\
                  }\
                }\
	      }' | while read vfcEntry
	      do
	        slot_num="slot_num=$(echo "${vfcEntry}" | cut -f 1 -d "/")"
	        adapter_type="adapter_type=$(echo "${vfcEntry}" | cut -f 2 -d "/")"
		remote_lpar_id="remote_lpar_id=$(echo "${vfcEntry}" | cut -f 3 -d "/")"
		remote_lpar_name="remote_lpar_name=$(echo "${vfcEntry}" | cut -f 4 -d "/")"
		remote_slot_num="remote_slot_num=$(echo "${vfcEntry}" | cut -f 5 -d "/")"
		wwpns="wwpns=$(echo "${vfcEntry}" | cut -f 6 -d "/")"
		is_required="is_required=$(echo "${vfcEntry}" | cut -f 7 -d "/")"
		echo "${PDRAW_VIRTUALFC},${managedsystem},${hostname}:DeviceType=FC,lpar_name=${hostname},lpar_id=${lparId},${slot_num},${adapter_type},state=0,${is_required},${remote_lpar_id},${remote_lpar_name},${remote_slot_num},${wwpns},topology=unavailable" >> $configFile
	      done
	  fi
	fi
      done

      y=0
      while [ $y -lt $VioHostname_count ]
      do
        hostname="$(getValue "${VioConfig[$y]}" "name")"
        lparId="$(getValue "${VioConfig[$y]}" "lpar_id")"

        string="${PDRAW_VIOLPAR},${managedsystem},${hostname}:${VioConfig[$y]}"
        echo "${string}" >> $configFile	
      	
        curr_profile="$(getValue "${VioConfig[$y]}" "curr_profile")"
        if [ ${#curr_profile} -eq 0 ]; then
          curr_profile="$(getValue "${VioConfig[$y]}" "default_profile")"
        fi
        echo "        VIO: ${hostname} lpar_id: ${lparId} profile: ${curr_profile}" |${LOGBOTH}
        curr_profile_entry="$(cat ${prof} | grep "lpar_name=${hostname}," | grep "name=${curr_profile},")"
        echo "curr_profile_entry: ${curr_profile_entry}" |${LOG}
        string="${PDRAW_PROFILE},${managedsystem},${hostname}:$(echo "${curr_profile_entry}" | tr -d '"')"
        echo "${string}" >> $configFile

	unset adapAll
        saveIFS=${IFS}
        IFS=$'\n'
        set -A adapAll $(cat $io | grep "lpar_id=${lparId}," | tr " " "_")
        IFS=${saveIFS}
        string="${PDRAW_IOSLOTS},${managedsystem},${hostname}:"
        z=0
        tsep=""
        while [ $z -lt ${#adapAll[*]} ]
        do
          description="$(getValue "${adapAll[$z]}" "description")"
  	  drc_name="$(getValue "${adapAll[$z]}" "drc_name")"
          string="${string}${tsep}io_adapter${z}=${drc_name},${description}"
  	  tsep=","
          ((z=z+1))
        done
        if [ ${z} -gt 0 ]; then
          echo "${string}" >> $configFile
        fi
    			
        adapter="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_adapter.out"
        tcpip="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_tcpip.out"

        if [ ${DEBUG} -eq 0 ]; then
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} viosvrcmd -m ${managedsystem} -p ${VioHostname[$y]} -c '"lsdev -field name physLoc description -fmt ':'"' | tr -d '"' > $adapter 2>>${WORK_AREA}getlan.err
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} viosvrcmd -m ${managedsystem} -p ${VioHostname[$y]} -c '"lstcpip -interfaces"' | tr -d '"' > $tcpip		 2>>${WORK_AREA}getlan.err
	fi
        ######################################################
        # ent, en, fcs, fscsi, iscsi device attributes
        ######################################################
        for device in ${PDRAW_DEVICE_ENT}:ent ${PDRAW_DEVICE_EN}:en ${PDRAW_DEVICE_FCS}:fcs ${PDRAW_DEVICE_FSCSI}:fscsi ${PDRAW_DEVICE_ISCSI}:iscsi
        do
          deviceType="$(echo "${device}" | cut -f 1 -d ":")"
          deviceName="$(echo "${device}" | cut -f 2 -d ":")"
          vioCmdFile="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_vioCmd_${deviceName}.out"
  	  deviceAttrFile="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_${deviceName}.out"
	  unset VioDev
          saveIFS=${IFS}
          IFS=$'\n'
          set -A VioDev $(cat $adapter | grep -E "^${deviceName}[0-9]*:" | cut -f 1 -d ':')
          IFS=${saveIFS}
          if [ ${#VioDev[*]} -gt 0 ]; then
            z=0
            while [ $z -lt ${#VioDev[*]} ]
            do
              echo "echo \"\"" >> $vioCmdFile 
              echo "echo \"Device=${VioDev[$z]};\"" >> $vioCmdFile
              echo "viosvrcmd -m ${managedsystem} -p ${VioHostname[$y]} -c \"lsdev -dev ${VioDev[$z]} -attr\" | grep -v attribute | sed '/^$/d'" >> $vioCmdFile
              ((z=z+1))
            done
            echo "echo \"\"" >> $vioCmdFile 
	    if [ ${DEBUG} -eq 0 ]; then
              ssh ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} < $vioCmdFile >> $deviceAttrFile 2>>${WORK_AREA}getlan.err
	    fi
            z=0
            while [ $z -lt ${#VioDev[*]} ]
            do
              #devAttributes="$(grep -p "Device="${VioDev[$z]}";" $deviceAttrFile | grep -v "Device="${VioDev[$z]}";" | awk '{if (length($1) > 0) print ($1"="$2)}' | tr "\n" ",")"
	      searchString="Device=${VioDev[$z]};"
              devAttributes="$(sed -e "/./{H;$!d;}" -e "x;/${searchString}/!d" $deviceAttrFile | grep -v "Device="${VioDev[$z]}";" | awk '{if (length($1) > 0) print ($1"="$2)}' | tr "\n" ",")"
              devAttributes="${devAttributes%,}"
              DevType=$(cat $adapter | grep -E "^${VioDev[$z]}:" | cut -f 3 -d ':')
              DevLoc=$(cat $adapter | grep -E "^${VioDev[$z]}:" | cut -f 2 -d ':')
              echo "${deviceType},${managedsystem},${VioHostname[$y]}:DeviceName=${VioDev[$z]},DeviceType=${DevType},PhysLoc=${DevLoc},${devAttributes}" >> $configFile
	      # pick up children for FSCSI
	      if [ "${deviceType}" == "${PDRAW_DEVICE_FSCSI}" ]; then
	        vioChildFile="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_vioChild_${deviceName}.out"
	        if [ ${DEBUG} -eq 0 ]; then
	          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} viosvrcmd -m ${managedsystem} -p ${VioHostname[$y]} -c \"lsdev -dev ${VioDev[$z]} -child\" | grep -v name | sed '/^$/d' >$vioChildFile
		fi
                devChild="$(cat $vioChildFile | awk '{if (length($1) > 0) print ($1":"$2)}' | tr "\n" ",")"
                devChild="${devChild%,}"
                echo "${PDRAW_DEVICE_FSCSICHILD},${managedsystem},${VioHostname[$y]}:DeviceName=${VioDev[$z]},DeviceType=FSCSICHILD,PhysLoc=${DevLoc},${devChild}" >> $configFile
	      fi   			
              ((z=z+1))
            done
          fi
        done	

        ###########################
        # iscsi data
        ###########################
        lsiscsiFile="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_lsiscsi.out"
        if [ ${DEBUG} -eq 0 ]; then
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} viosvrcmd -m ${managedsystem} -p ${VioHostname[$y]} -c '"lsiscsi -F name,port,address,target_name" --admin' > $lsiscsiFile		 2>>${WORK_AREA}lsiscsi.err
	fi
        cat "${lsiscsiFile}" | tr -d " " | awk -F, -v vs=${PDRAW_ELEMENT_ISCSI} -v ms=${managedsystem} -v vio=${VioHostname[$y]} '{if ($1 != ":") print (vs","ms","vio":name="$1",port="$2",address="$3",target_name="$4)}' >> $configFile 

        ###########################
        # lspath data
        ###########################
        lspathFile="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_lspath.out"
        if [ ${DEBUG} -eq 0 ]; then
          ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} viosvrcmd -m ${managedsystem} -p ${VioHostname[$y]} -c '"lspath -field name parent status connection -fmt ="' > $lspathFile		 2>>${WORK_AREA}lspath.err
	fi
        cat "${lspathFile}" | tr -d " " | awk -F= -v vs=${PDRAW_LSPATH} -v ms=${managedsystem} -v vio=${VioHostname[$y]} '{print (vs","ms","vio":name="$1",parent="$2",status="$3",connection="$4)}' >> $configFile 

        IOSCLI="ssh -n ${SSHOPTIONS} ${HMCUSER}@${HMCNAME} viosvrcmd -m ${managedsystem} -p ${VioHostname[$y]} -c"
        ###########################
        # lsmap npiv data
        ###########################
        lsmapnpivFile="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_lsmapnpiv.out"
        if [ ${DEBUG} -eq 0 ]; then
          $IOSCLI \"lsmap -all -npiv -field name physloc clntid fc fcphysloc vfcclient vfcclientdrc -fmt ,\" 1>${lsmapnpivFile} 2>>${WORK_AREA}getlan.err
	fi
        cat "${lsmapnpivFile}" | tr -d " " | awk -F, -v vs=${PDRAW_LSMAP_NPIV} -v ms=${managedsystem} -v vio=${VioHostname[$y]} '{print (vs","ms","vio":name="$1",physloc="$2",clntid="$3",fc="$4",fcphysloc="$5",vfcclient="$6",vfcclientdrc="$7)}' >> $configFile 

        ###########################
        # lsmap vscsi data
        ###########################
        lsmapscsiFile="${WORK_AREA}${HMCNAME}_${managedsystem}_${VioHostname[$y]}_lsmapscsi.out"
        if [ ${DEBUG} -eq 0 ]; then
          $IOSCLI \"lsmap -all -field svsa physloc clientid vtd status lun backing bdphysloc mirrored -fmt ,\" 1>${lsmapscsiFile} 2>>${WORK_AREA}getlan.err
	fi
        cat "${lsmapscsiFile}" | awk -v vs=${PDRAW_LSMAP_SCSI} -v ms=${managedsystem} -v vio=${VioHostname[$y]} '{print (vs","ms","vio":"$0)}' >> $configFile 


        #rm $adapter
        #rm $entAdap
        #rm $tcpip
        #rm $hmc2
        #rm $hmc3
      		
        ((y=y+1)) 
      done		
    else
      echo "do not collect data for managedsystem: ${managedsystem}" |${LOG}
    fi
  done

  # rm $system
  # rm $lpar
  # rm $virtualIO
  # rm $io
  if [ ${RC} -eq 0 ]; then
    ##############################################################################
    # copy to draw_captures
    ##############################################################################
    cp -f -p "${configFile}" "${DRAW_CAPTURES}${OUTPUTNAME}" 1>>${LOG_FILE} 2>>${LOG_FILE}
    RC=${?}
    if [ ${RC} -eq 0 ]; then
      successInfo "Created capture file: ${DRAW_CAPTURES}${OUTPUTNAME}, rc=${saveRC}"
    else
      saveRC=${RC}
      errorInfo "Failed to create capture file: ${DRAW_CAPTURES}${OUTPUTNAME}, rc=${saveRC}"
    fi
    RC=${saveRC}
  fi
	 

  echo "<-- capture, RC=${RC}" |${LOG}
}

#########################################################################
# Function to draw				 			#
#########################################################################
draw () {
  echo "--> draw, RC=${RC}" |${LOG}
  RC=0
  managedSystem=""
	
  unset ManagedSystem
  set -A ManagedSystem $(grep "${PDRAW_MANAGEDSYSTEM}," $configFile | cut -f2 -d "," | cut -f1 -d ":" | sort -u)
  # draw one picture for each Managed System managed by this HMC
  ################################################################
  for viewType in ${DRAWOPS}
  do
    echo "************************************************************************" |${LOGBOTH}
    echo "Generating $viewType graphics files"                                       |${LOGBOTH}
    x=0
    while [ $x -lt ${#ManagedSystem[*]} ]
    do
      vlan_x2=0
      testMS="found"
      if [ ${#MANAGEDSYSTEMS} -gt 0 ]; then
        testMS="$(echo ",${MANAGEDSYSTEMS}," | grep ",${ManagedSystem[$x]},")"
      fi
      if [ ${#testMS} -gt 0 ]; then
        colorFcsNum=1
        colorIscsiNum=1
        colorVnicNum=1
        colorVswitchNum=1
        colorVswitchInternalNum=1
        echo "  processing managed system: ${ManagedSystem[$x]}"                           |${LOGBOTH}
        managedSystem="$(grep "${PDRAW_MANAGEDSYSTEM},${ManagedSystem[$x]}:" $configFile | cut -f2- -d ':')"
        # define files
        ################################################################
        helpFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_help"
        sriovPhysportHelpFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_sriovphysporthelp"
        pictureFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_temp.svg"
        groupFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_group.svg"
        addpopupDataFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_addpopup.data"
        #picturePopupFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_temppopup.svg"
        picturePopupFile="${WORK_AREA}${ManagedSystem[$x]}_temppopup.svg"
        ethHelp="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_ethHelp"
        seaHelp="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_seaHelp"
        vlanHelp="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_vlanHelp"
        vioHelp="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_vioHelp"
        userobjectFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_userobject"
        #htmlFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}.html"
        lanPicture="${WORK_AREA}${ManagedSystem[$x]}_${viewType}.svg"
        > $vioHelp
        > $sriovPhysportHelpFile
        > $lanPicture
        > $pictureFile
        #> $picturePopupFile
        > $helpFile
        #> $htmlFile
        > $vlanHelp
        > $seaHelp
        > $ethHelp
        > $userobjectFile

        ######################################################################
        # variables for this Managed System 
        ######################################################################
        sizePicturex=1300
        sizePicturey=$starty
        vlan_count=0
        #x-offset for device connectors
        ((devCon_x=startx+sizeViox+140))
        devCon_x_save=${devCon_x}
        #x-offset for fcs connector
        #((fcsCon_x=startx+sizeViox+140))
        #fcsCon_x_save=${fcsCon_x}
        #beginning shade for FCS connections
        #x-offset for vNIC connectors
        vnicCon_x=0
        #vnicCon_x_save=${vnicCon_x}
        clientStart_x=0

        if [ ${setByVnic} -eq 1 ]; then
	  setByVnic=0
          PARTITIONLIST=""
	fi
	unset VioHostname
        saveIFS=${IFS}
        IFS=$'\n'
        if [ ${#PARTITIONLIST} -gt 0 ]; then
          tmpPARTITIONLIST=",$(echo "${PARTITIONLIST}" | sed -e "s/,/\:\|,/g"):"
          set -A VioHostname $(grep "${PDRAW_VIOLPAR},${ManagedSystem[$x]}," $configFile | grep -E "${tmpPARTITIONLIST}" | cut -f 3 -d ',' | cut -f 1 -d ":" | sort -u)
        else
          set -A VioHostname $(grep "${PDRAW_VIOLPAR},${ManagedSystem[$x]}," $configFile | cut -f 3 -d ',' | cut -f 1 -d ":" | sort -u)
        fi
        IFS=${saveIFS}
        VioHostname_count=${#VioHostname[*]}
	# we have a partition list with only client partitions so filter VIOs being used by partitions
	if [ ${VioHostname_count} -eq 0 ] && [ ${#PARTITIONLIST} -gt 0 ]; then
	  echo "Determine VIO list used by partitions: ${PARTITIONLIST}" |${LOG}
	  echo "tmpPARTITIONLIST: ${tmpPARTITIONLIST}" |${LOG}
	  vioEntryFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_vioEntry"
	  #
	  # check VIRTUALFC and VIRTUALSCSI
	  #
	  if [ "${viewType}" == "STORAGE" ] || [ "${viewType}" == "ALL" ]; then
	    echo "looking for STORAGE VIOs relating to partitions" |${LOG}
            grep -E "${PDRAW_VIRTUALFC},|${PDRAW_VIRTUALSCSI},${ManagedSystem[$x]}," $configFile | grep -E "${tmpPARTITIONLIST}" | cut -f2- -d ":" | while read checkEntry
	    do
	      echo "checkEntry: ${checkEntry}" |${LOG}
	      remote_lpar_name="$(getValue "${checkEntry}" "remote_lpar_name")"
	      echo "remote_lpar_name: ${remote_lpar_name}" |${LOG}
	      if [ ${#remote_lpar_name} -gt 0 ]; then
	        echo "${remote_lpar_name}" >>${vioEntryFile}
	      fi
	    done
	  fi
	  #
	  # check Network
	  #
	  if [ "${viewType}" == "NETWORK" ] || [ "${viewType}" == "VNIC" ] || [ "${viewType}" == "ALL" ]; then
	    echo "looking for NETWORK VIOs realting to partitions" |${LOG}
            grep "${PDRAW_VIOLPAR},${ManagedSystem[$x]}," $configFile | cut -f3 -d "," | cut -f 1 -d ":"| while read vioEntry
	    do
              grep "${PDRAW_VIRTUALIO},${ManagedSystem[$x]},${vioEntry}:" $configFile | cut -f2- -d ":" | while read checkEntry
	      do
	        echo "checkEntry: ${checkEntry}" |${LOG}
	        vswitch="$(getValue "${checkEntry}" "vswitch")"
	        echo "VIO: ${vioEntry} vswitch: ${vswitch}" |${LOG}
                checkClientVswitch="$(grep "${PDRAW_VIRTUALIO},${ManagedSystem[$x]}" $configFile | grep -E "${tmpPARTITIONLIST}" | grep ",vswitch=${switch},")"
	        if [ ${#checkClientVswitch} ]; then
	          echo "${vioEntry}" >>${vioEntryFile}
		fi
	      done
            done
	  fi
	  if [ -s ${vioEntryFile} ]; then
	    sort -u -o ${vioEntryFile}.sort ${vioEntryFile}
            saveIFS=${IFS}
            IFS=$'\n'
            set -A VioHostname $(cat ${vioEntryFile}.sort)
            IFS=${saveIFS}
	  fi
	  echo "VioHostname[*]: ${VioHostname[*]}" |${LOG}
	elif [ ${VioHostname_count} -eq 0 ]; then
          saveIFS=${IFS}
          IFS=$'\n'
          set -A VioHostname $(grep "${PDRAW_VIOLPAR},${ManagedSystem[$x]}," $configFile | cut -f 3 -d ',' | cut -f 1 -d ":" | sort -u)
          IFS=${saveIFS}
	fi
        VioHostname_count=${#VioHostname[*]}

        # if VNIC then set partitionlist to only those partitions that use it
        if [ ${#PARTITIONLIST} -eq 0 ] && [ "${viewType}" == "VNIC" ]; then
          PARTITIONLIST="$(grep "${PDRAW_VIRTUALVNIC},${ManagedSystem[$x]}," $configFile | cut -f 3 -d "," | cut -f 1 -d ":" | sort -u | tr "\n" ",")"
          PARTITIONLIST="${PARTITIONLIST%,}"
          setByVnic=1
        fi

        unset Client
        saveIFS=${IFS}
        IFS=$'\n'
        if [ ${#PARTITIONLIST} -gt 0 ]; then
          tmpPARTITIONLIST=",$(echo "${PARTITIONLIST}" | sed -e "s/,/\:\|,/g"):"
          set -A Client $(grep "${PDRAW_CLIENTLPAR},${ManagedSystem[$x]}," $configFile | grep -E "${tmpPARTITIONLIST}" | cut -f2- -d ":")
        else
          set -A Client $(grep "${PDRAW_CLIENTLPAR},${ManagedSystem[$x]}," $configFile | cut -f2- -d ":")
        fi
        IFS=${saveIFS}
        Client_count=${#Client[*]}
              
        echo "VioHostname: ${VioHostname[*]}" |${LOG}
        echo "VioHostname_count: ${VioHostname_count}" |${LOG}
        echo "Client: ${Client[*]}" |${LOG}
        echo "Client_count: ${Client_count}" |${LOG}
        #########################################################################
        # calculate height of all Clients
        #########################################################################
        y=0
        totalClientSize_y=$starty
        while [ $y -lt $Client_count ]
        do
          partitionName="$(getValue "${Client[$y]}" "name")"
          fpartitionName="$(echo "${partitionName}" | tr " " "_" | tr "/" "_")"
          lpar_id="$(getValue "${Client[$y]}" "lpar_id")"
          echo "partitionName: ${partitionName} fpartitionName: ${fpartitionName} lpar_id: ${lpar_id}" |${LOG}
          clientVirtualFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_${fpartitionName}.clientVirtual.dat"
          clientPhysicalFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_${fpartitionName}.clientPhysical.dat"
          clientSlotPhysicalFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_${fpartitionName}.clientSlotPhysical.dat"
          clientSlotChildrenFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_${fpartitionName}.clientSlotChildren.dat"
          clientSriovLogportFile="${WORK_AREA}${ManagedSystem[$x]}_${viewType}_${fpartitionName}.clientSriovLogport.dat"
          clientPhys="$(grep "${PDRAW_IOSLOTS},${ManagedSystem[$x]},${partitionName}:" $configFile | cut -f2- -d ':')" 	
          charstr="$(echo "${clientPhys}" | sed -e "s/[^=]//g")"
          clientPhys_count=${#charstr}
          if [ ${clientPhys_count} -gt 0 ]; then
            grep "${PDRAW_IOSLOTS},${ManagedSystem[$x]},${partitionName}:" $configFile | cut -f2- -d ":" | awk -F, '{for(i = 1; i <= NF; ++i) { n = index($i, "="); if(n) { vars[substr($i, 1, n - 1)] = substr($i, n + 1); curVar=substr($i, 1, n - 1) } else { vars[curVar]=(vars[curVar]","substr($i, n + 1)) } } } { for (i in vars) print (i"="vars[i])}' >> ${clientPhysicalFile}
          fi
          if [ "${viewType}" == "NETWORK" ] || [ "${viewType}" == "ALL" ]; then
            grep "${PDRAW_VIRTUALIO},${ManagedSystem[$x]},${partitionName}:" $configFile | cut -f2- -d ':' | sort >> ${clientVirtualFile}
            grep "${PDRAW_VIRTUALVNIC},${ManagedSystem[$x]},${partitionName}:" $configFile | cut -f2- -d ':' | sort >> ${clientVirtualFile}
            grep "${PDRAW_SRIOVLOGPORT},${ManagedSystem[$x]}:" $configFile | grep ",lpar_name=${partitionName}," | grep "is_vnic_backing_device=0" | cut -f2- -d ':' | sort >> ${clientSriovLogportFile}
          fi
          if [ "${viewType}" == "STORAGE" ] || [ "${viewType}" == "ALL" ]; then
            grep -E "${PDRAW_VIRTUALFC},|${PDRAW_VIRTUALSCSI}," $configFile | grep ",${ManagedSystem[$x]}," | grep ",lpar_name=${fpartitionName}," | cut -f2- -d ':' | sort >> ${clientVirtualFile}
            slot_search="slot_num"
          fi
          if [ "${viewType}" == "VNIC" ]; then
            grep "${PDRAW_VIRTUALVNIC},${ManagedSystem[$x]},${partitionName}:" $configFile | cut -f2- -d ':' | sort >> ${clientVirtualFile}
            grep "${PDRAW_SRIOVLOGPORT},${ManagedSystem[$x]}:" $configFile | grep ",lpar_name=${partitionName}," | grep "is_vnic_backing_device=0" | cut -f2- -d ':' | sort >> ${clientSriovLogportFile}
          fi 
          clientNumVirtuals=$(cat ${clientVirtualFile} | wc -l)
          ((clientSize_y=clientNumVirtuals*40))
          if [ "${viewType}" == "STORAGE" ] || [ "${viewType}" == "ALL" ]; then
            # make adjustment for VSCSI
            SCSIcount=$(cat ${clientVirtualFile} | tr "," "\n" | grep "DeviceType=SCSI" | wc -l)
            echo "SCSIcount: ${SCSIcount}" |${LOG}
            ((clientSize_y=clientSize_y-(SCSIcount*10)))
          fi

          # calculate space for SRIOV logical ports on right hand side of client
	  if [ "${viewType}" == "NETWORK" ] || [ "${viewType}" == "ALL" ]; then
            clientSizeLogports_y=0
            if [ -s ${clientSriovLogportFile} ]; then
              sriovLogportCount=$(cat ${clientSriovLogportFile} | wc -l)
              ((clientSizeLogports_y=sriovLogportCount*40))
            fi
            ((clientSize_y=clientSize_y+clientSizeLogports_y))
	  fi

          # process physical slots on right hand side of client
          clientSizePhys_y=0
          if [ -s ${clientPhysicalFile} ]; then
            devIncrement=40
            cat ${clientPhysicalFile} | while read physicalEntry
            do
              echo "physicalEntry: ${physicalEntry}" | ${LOG}
              slotPhysloc="$(echo "${physicalEntry}" | cut -f 2 -d "=" | cut -f 1 -d ",")"
              echo "slotPhysloc: ${slotPhysloc}" | ${LOG}
              # look for slotchildren
              unset slotChildren
              saveIFS=${IFS}
              IFS=$'\n'
              set -A slotChildren $(grep "${PDRAW_SLOTCHILDREN},${ManagedSystem[$x]}:" $configFile | grep ",lpar_name=${partitionName}," | grep ",parent=${slotPhysloc}" | cut -f2- -d ":")
              IFS=${saveIFS}
              if [ ${#slotChildren[*]} -gt 0 ]; then
                slotCount=0
                while [ ${slotCount} -lt ${#slotChildren[*]} ]
                do
                  slotChildEntry="${slotChildren[${slotCount}]}"
                  echo "slotChildEntry: ${slotChildEntry}" | ${LOG}
	          DeviceType=""
	          # look for mac_address= or wwpn= to determone if ETH or FC device
	          mac_address="$(echo "${slotChildren}" | grep ",mac_address=")"
	          wwpn="$(echo "${slotChildren}" | grep ",wwpn=")"
	          if [ ${#mac_address} -gt 0 ]; then
	            echo "phys_loc: ${phys_loc} is an ETH device" |${LOG}
	            DeviceType="ETH"
	          elif [ ${#wwpn} -gt 0 ]; then
	            echo "phys_loc: ${phys_loc} is an FC device" |${LOG}
	            DeviceType="FC"
	          else
	            echo "phys_loc: ${phys_loc} is unknown" |${LOG}
	          fi
	          if ( [ "${DeviceType}" == "ETH" ] && [ "${viewType}" == "NETWORK" ] ) || ( [ "${DeviceType}" == "FC" ] && [ "${viewType}" == "STORAGE" ] ) || [ "${viewType}" == "ALL" ]; then
                    echo "${slotChildren[${slotCount}]}" >>${clientSlotChildrenFile}
                    ((clientSizePhys_y+=40))
	          fi
                  ((slotCount+=1))
                done
              else
                echo "slotPhysloc: ${slotPhysloc} has no children, get physicalio location" | ${LOG}
                slotData="$(grep "${PDRAW_PHYSICALIO},${ManagedSystem[$x]}:" $configFile | grep ",drc_name=${slotPhysloc}," | cut -f2- -d ":")"
                if [ ${#slotData} -gt 0 ]; then
                  echo "${slotData}" >>${clientSlotPhysicalFile}
                  ((clientSizePhys_y+=30))
                else
                  echo "coud not locate PHYSICALIO data for slotPhysloc: ${slotPhysloc}" |${LOG}
                fi
             fi
            done
          fi

          # check to see which side is larger
          ((rightSideClient_y=clientSizePhys_y))
          if [ $clientSize_y -lt $rightSideClient_y ]; then
            clientSize_y=$rightSideClient_y
          fi
          ((clientSize_y+=50))
	  # write out size of client to helpfile so draawclient can pick it up
	  echo "CLIENTSIZEY,${partitionName},${clientSize_y}" >> $helpFile
          ((totalClientSize_y+=clientSize_y+10))
          ((y=y+1))
	done

        ##########################################################################
        # call function to draw Virtual I/O server
        ##########################################################################
        drawVio ${viewType}
        #########################################################################	
        # calculate height of picture
        #########################################################################	
	unset allVioY
        set -A allVioY $(grep ${ManagedSystem[$x]} $vioHelp | cut -f 3 -d ',')
        allVioY_count=$(grep -c ${ManagedSystem[$x]} $vioHelp)
        pictureSize_y=0
        y=0
        while [ $y -lt $allVioY_count ]
        do
          if [ $pictureSize_y -lt ${allVioY[$y]} ]; then
            pictureSize_y=${allVioY[$y]}
          fi
          ((y=y+1))
        done
        if [ $pictureSize_y -lt $totalClientSize_y ]; then
          pictureSize_y=$totalClientSize_y
        fi
        ((pictureSize_y=pictureSize_y+offsety))	
        
        if [ "${viewType}" == "NETWORK" ] || [ "${viewType}" == "ALL" ]; then
          ##########################################################################
          # call functions to draw virtual LANs and Clients
          ##########################################################################
	  clientStart_x=0
          drawVlan
	  # v10.17
          drawSRIOVPhysports
	fi
        if [ "${viewType}" == "VNIC" ]; then
          ##########################################################################
          # call functions to draw virtual LANs and Clients
          ##########################################################################
	  clientStart_x=0
          drawSRIOVPhysports
	fi
        if [ "${viewType}" == "STORAGE" ] || [ "${viewType}" == "ALL" ]; then
          drawFcsCon "VIO"
          drawIscsiCon "VIO"
        fi

        ##########################################################################
        # process clients
        ##########################################################################
        drawClient ${viewType}

        #########################################################################
        # calculate page width
        #########################################################################
        ((sizePic_x=client_x+startx+100))       	
        if [ $sizePicturex -lt $sizePic_x ]; then
          sizePicturex=$sizePic_x
        fi

        #########################################################################
        # write header to SVG file
        #########################################################################
        echo "<?xml version=\"1.0\" standalone=\"no\" ?>" >> $lanPicture
        echo "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\" >" >> $lanPicture
        echo "<svg width=\""$((sizePicturex+500))"\" height=\""$((pictureSize_y+500))"\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" >" >> $lanPicture

	if [ -f ${ALLUSERDATA} ]; then
	  graphicData="$(grep "${PDRAW_GRAPHIC}," ${ALLUSERDATA})"
	  if [ ${#graphicData} -gt 0 ]; then
            customerImageFile="$(echo "${graphicData}" | cut -f 2 -d ",")"
            if [ ${#customerImageFile} -gt 0 ]; then
              echo "<image xlink:href=\"${customerImageFile}\" x=\"$((startx-80))\" y=\"$((starty-100))\" height=\"75px\" width=\"75px\"/>" >> $lanPicture
            fi
	  fi
	fi
        #########################################################################
        # write javascript to SVG file
        #########################################################################
        echo "<script>" >> $lanPicture
        echo "<![CDATA[" >> $lanPicture

	echo "" >> $lanPicture
	echo "var nodeClicked = \"\";" >> $lanPicture
	echo "" >> $lanPicture

        echo "function show(evt, node)" >> $lanPicture
        echo "{" >> $lanPicture
        echo "        var svgdoc = evt.target.ownerDocument;" >> $lanPicture
        echo "        var obj = svgdoc.getElementById(node);" >> $lanPicture
        echo "        obj.setAttribute(\"display\", \"inline\");" >> $lanPicture
        echo "}" >> $lanPicture
        echo "" >> $lanPicture
        echo "function hide(evt, node)" >> $lanPicture
        echo "{" >> $lanPicture
        echo "        var svgdoc = evt.target.ownerDocument;" >> $lanPicture
        echo "        var obj = svgdoc.getElementById(node);" >> $lanPicture
        echo "        obj.setAttribute(\"display\" , \"none\");" >> $lanPicture
        echo "}" >> $lanPicture
        echo "" >> $lanPicture

	echo "function clickgroup(evt, node)                                 " >> $lanPicture
	echo "{                                                              " >> $lanPicture
	echo "        var svgdoc = evt.target.ownerDocument;                 " >> $lanPicture
	echo "        var obj = svgdoc.getElementById(node);                 " >> $lanPicture
        echo "        var a = [\":\", node, \":\"];                          " >> $lanPicture
        echo "        var b = a.reduce(function(pre, next) {                 " >> $lanPicture
        echo "          return pre + next;                                   " >> $lanPicture
        echo "        });                                                    " >> $lanPicture
        echo "        var checkNode = nodeClicked.search(b);                 " >> $lanPicture
        echo "        if ( checkNode < 0 ) {                                 " >> $lanPicture
	echo "          for (const child of obj.children) {                  " >> $lanPicture
	echo "            child.style.strokeWidth = \"5\";                   " >> $lanPicture
	echo "          }       				             " >> $lanPicture
        echo "          var result = nodeClicked.concat(\":\", node, \":\"); " >> $lanPicture
        echo "          nodeClicked = result;                                " >> $lanPicture                      
	echo "        } else {  				             " >> $lanPicture
	echo "          for (const child of obj.children) {                  " >> $lanPicture
	echo "            child.style.strokeWidth = \"1\";                   " >> $lanPicture
	echo "          }       				             " >> $lanPicture
        echo "          var result = nodeClicked.replace(b, \"\");           " >> $lanPicture
        echo "          nodeClicked = result;   		             " >> $lanPicture
	echo "        } 					             " >> $lanPicture
	echo "}                                                              " >> $lanPicture
        echo "" >> $lanPicture

	echo "function highlight(evt, node)                        " >> $lanPicture
	echo "{                                                    " >> $lanPicture
	echo "        var svgdoc = evt.target.ownerDocument;       " >> $lanPicture
	echo "        var obj = svgdoc.getElementById(node);       " >> $lanPicture
	echo "        for (const child of obj.children) {          " >> $lanPicture
	echo "          child.style.strokeWidth = \"5\";           " >> $lanPicture
	echo "        }                                            " >> $lanPicture
	echo "}                                                    " >> $lanPicture
        echo "" >> $lanPicture

	echo "function unhighlight(evt, node)                      " >> $lanPicture
	echo "{                                                    " >> $lanPicture
	echo "        var svgdoc = evt.target.ownerDocument;       " >> $lanPicture
	echo "        var obj = svgdoc.getElementById(node);       " >> $lanPicture
        echo "        var a = [\":\", node, \":\"];                " >> $lanPicture
        echo "        var b = a.reduce(function(pre, next) {       " >> $lanPicture
        echo "          return pre + next;                         " >> $lanPicture
        echo "        });                                          " >> $lanPicture
        echo "        var checkNode = nodeClicked.search(b);       " >> $lanPicture
        echo "        if ( checkNode < 0 ) {                       " >> $lanPicture
	echo "          for (const child of obj.children) {        " >> $lanPicture
	echo "            child.style.strokeWidth = \"1\";         " >> $lanPicture
	echo "          }                                          " >> $lanPicture
	echo "        }                                            " >> $lanPicture
	echo "}                                                    " >> $lanPicture
        echo "" >> $lanPicture

        echo "function displayAttributes(evt, node)" >> $lanPicture
        echo "{" >> $lanPicture
        echo "  var svgdoc = evt.target.ownerDocument;" >> $lanPicture
        echo "  var obj = svgdoc.getElementById(node);" >> $lanPicture
        echo "  console.log(obj.outerHTML);" >> $lanPicture
        echo "  var rectobj = svgdoc.getElementById(node.concat(\"_rect\"));" >> $lanPicture
        echo "  console.log(rectobj);" >> $lanPicture
        echo "  var width = Number(rectobj.getAttribute(\"width\"));" >> $lanPicture
        echo "  if (width < 400) {" >> $lanPicture
        echo "    width = 420;" >> $lanPicture
        echo "  } else {" >> $lanPicture
        echo "    width += 20;" >> $lanPicture
        echo "  }" >> $lanPicture
        echo "  var height = Number(rectobj.getAttribute("height"));" >> $lanPicture
        echo "  if (height < 400) {" >> $lanPicture
        echo "    height = 500;" >> $lanPicture
        echo "  } else {" >> $lanPicture
        echo "    height += 55;" >> $lanPicture
        echo "  }" >> $lanPicture
        echo "  console.log(\"width:\", width, \" height:\", height);" >> $lanPicture
        echo "  var rectwh = \"width=\";" >> $lanPicture
        echo "  rectwh = rectwh.concat(width, \",height=\", height);" >> $lanPicture
        echo "  console.log(\"rectwh:\", rectwh);" >> $lanPicture
	echo "  var res1 = node.split(\"%\");" >> $lanPicture
	echo "  var res = res1[0].split(\"#\");" >> $lanPicture
        echo "  var myWindow = window.open(\"\", node, rectwh);" >> $lanPicture
        echo "  myWindow.document.write(\"<h4>\", res[0], \"</h4>\");" >> $lanPicture
        echo "  myWindow.document.write(\"<svg width=\", width, \" height=\", height, \" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" >\");" >> $lanPicture
        echo "  myWindow.document.write(obj.outerHTML);" >> $lanPicture
        echo "  myWindow.document.write(\"</svg>\");" >> $lanPicture
        echo "  var newobj = myWindow.document.getElementById(node);" >> $lanPicture
        echo "  newobj.setAttribute(\"display\" , \"inline\");" >> $lanPicture
        echo "  newobj.style.transform=\"translate(0,0)\";" >> $lanPicture
        echo "  myWindow.focus();" >> $lanPicture
        echo "  myWindow.document.close();" >> $lanPicture
        echo "}" >> $lanPicture
        echo "]]></script>" >> $lanPicture


        ##############################################################################	
        # write title to SVG file
        ##############################################################################	
        name="$(getValue "${managedSystem}" "name")"
        msMtm="$(getValue "${managedSystem}" "type_model")"
        msSerial="$(getValue "${managedSystem}" "serial_num")"
        creationDate="$(grep "${PDRAW_CREATIONDATE}:" $configFile | cut -f2- -d ":")"
        echo "creationDate: ${creationDate}" |${LOG} 
	displayMSname="${name} (${msMtm} / ${msSerial})"
        	 
        ((title_y=starty-100))
        echo '<text x="'$startx'" y="'$title_y'" style="font-size:25px;font-weight:bold;text-decoration:underline">'${viewType}' Configuration</text>' >> $lanPicture
        ((title_x=startx+10))
        ((title_y=title_y+25))
        echo '<text x="'$title_x'" y="'$title_y'" style="font-size:15px;font-weight:bold">Managed System:</text>' >> $lanPicture
        ((title_x=startx+130))
        echo '<text x="'$title_x'" y="'$title_y'" style="font-size:15px" onclick="displayAttributes(evt, '\'${name}\'')" onmouseover="show(evt, '\'${name}\'')" onmouseout="hide(evt, '\'${name}\'')">'$displayMSname'</text>' >> $lanPicture
        addpopup "${name}" "${title_x}" "${title_y}" "lightgray" "${managedSystem}"
        ((title_x=startx+10))
        ((title_y=title_y+20))
        attributeList="$(grep "${PDRAW_HMC},${HMCNAME}:" $configFile | cut -f2- -d ":")"
	echo "HMC attributeList: [${attributeList}]" |${LOG}
        hmcVersion="$(getValue "${attributeList}" "version")"
	echo "hmcVersion: [${hmcVersion}]" |${LOG}
        hmcMtm="$(getValue "${attributeList}" "type_model")"
        echo '<text x="'$title_x'" y="'$title_y'" style="font-size:15px;font-weight:bold">HMC:</text>' >> $lanPicture
        ((title_x=startx+55))
        echo '<text x="'$title_x'" y="'$title_y'" style="font-size:15px" onclick="displayAttributes(evt, '\'${HMCNAME}\'')" onmouseover="show(evt, '\'${HMCNAME}\'')" onmouseout="hide(evt, '\'${HMCNAME}\'')">'$HMCNAME' ('${hmcMtm}' / '${hmcVersion}')</text>' >> $lanPicture
        addpopup "${HMCNAME}" "${title_x}" "${title_y}" "lightgray" "${attributeList}"

        ((title_x=startx+10))
        ((title_y=title_y+20))
        echo '<text x="'$title_x'" y="'$title_y'" style="font-size:15px;font-weight:bold">Captured:</text>' >> $lanPicture
        ((title_x=startx+80))
        echo '<text x="'$title_x'" y="'$title_y'" style="font-size:15px">'$creationDate'</text>' >> $lanPicture

        ############################################################################# 
        # draw legend to SVG file
        ############################################################################# 
        ((legend_x=startx+30+(${#displayMSname}*11)))
        ((legend_y=starty-100))
	((text_x_base=legend_x+30))
	((text_y_base=legend_y+20))

	legendCount=0
	((text_x=text_x_base+(legendCount/3*150)))
	((text_y=text_y_base+((legendCount%3)*20)))
	((box_x=text_x-20))
	((box_y=text_y-10))
        echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">User Defined Data</text>' >> $lanPicture
        echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_USER_DATA}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
        ((legendCount=legendCount+1))

	((text_x=text_x_base+(legendCount/3*150)))
	((text_y=text_y_base+((legendCount%3)*20)))
	((box_x=text_x-20))
	((box_y=text_y-10))
        echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Logical Partition</text>' >> $lanPicture
        echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_CLIENT_PARTITION}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
        ((legendCount=legendCount+1))

	((text_x=text_x_base+(legendCount/3*150)))
	((text_y=text_y_base+((legendCount%3)*20)))
	((box_x=text_x-20))
	((box_y=text_y-10))
        echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">IO Slot</text>' >> $lanPicture
        echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_IOSLOT}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
        ((legendCount=legendCount+1))

        if [ "${viewType}" == "NETWORK" ] || [ "${viewType}" == "ALL" ]; then
	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Physical Ethernet Port</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_ETHERNET_PHYSPORT}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Ether Channel Adapter</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_ETHERCHANNEL}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Shared Ethernet Adapter</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_SEA}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">VLAN Adapter</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_VLAN}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Virtual Ethernet Adapter</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_VIRTUAL_ETHERNET}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Control Channel Adapter</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_CONTROL_CHANNEL}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))
        fi 
        if [ "${viewType}" == "VNIC" ] || [ "${viewType}" == "NETWORK" ] || [ "${viewType}" == "ALL" ]; then
	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">SR-IOV Adapter</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_SRIOV_ADAPTER}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">SR-IOV Physical Port</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_SRIOV_PHYSPORT}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">vNIC Backing Device</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_VNIC_BKDEV}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))
        fi 
        if [ "${viewType}" == "STORAGE" ] || [ "${viewType}" == "ALL" ]; then
	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Partition VSCSI Mapping</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_CLIENT_VHOST}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Physical FCS/FSCSI Device</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_FC_PHYSPORT}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Virtual FCS/FSCSI Adapter</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_VIRTUAL_FC}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))

	  ((text_x=text_x_base+(legendCount/3*150)))
	  ((text_y=text_y_base+((legendCount%3)*20)))
	  ((box_x=text_x-20))
	  ((box_y=text_y-10))
          echo '<text x="'$text_x'" y="'$text_y'" style="font-size:10px">Virtual SCSI Adapter</text>' >> $lanPicture
          echo '<rect x="'$box_x'" y="'$box_y'" width="10" height="10" fill="'${COLOR_VIRTUAL_SCSI}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
          ((legendCount=legendCount+1))
        fi 

	# draw box around legend
        echo '<text x="'$legend_x'" y="'$(((legend_y-5)))'" style="font-size:15px;font-weight:bold">Legend</text>' >> $lanPicture
        echo '<rect x="'$legend_x'" y="'$legend_y'" width="'$(((text_x-legend_x+125)))'" height="70" fill="none" style="stroke:black;stroke-width:1px"/>' >> $lanPicture
        ############################################################################
        # draw VIO LPAR to SVG file
        ############################################################################
        vio_y=$starty
        y=0
        while [ $y -lt $VioHostname_count ]
        do
          if ( [ "${viewType}" == "STORAGE" ] || [ "${viewType}" == "ALL" ] ) && [ ${vio_y} -gt ${totalClientSize_y} ]; then
            drawFcsCon "CLIENT" $vio_y
            drawIscsiCon "CLIENT" $vio_y
          fi
          # write out the virtual switch names
          if ( [ "${viewType}" == "NETWORK" ] || [ "${viewType}" == "ALL" ] ) && [ ${vio_y} -gt ${totalClientSize_y} ]; then
            sCount=0
            while [ ${sCount} -lt ${#switchArray[*]} ]
            do
              sName="$(echo "${switchArray[${sCount}]}" | cut -f 1 -d ",")"
              sXoffset="$(echo "${switchArray[${sCount}]}" | cut -f 2 -d ",")"
              sColor="$(echo "${switchArray[${sCount}]}" | cut -f 3 -d ",")"
              sAttributelist="$(echo "${switchArray[${sCount}]}" | cut -f4- -d ",")"
              echo '<text x="'$(((sXoffset+10)))'" y="'$vio_y'" style="fill:'${sColor}';font-size:10px;writing-mode:tb;text-orientation:upright;" onclick="displayAttributes(evt, '\'${sName}%${vio_y}\'')" onmouseover="show(evt, '\'${sName}%${vio_y}\'')" onmouseout="hide(evt, '\'${sName}%${vio_y}\'')">'${sName}'</text>' >> $pictureFile
              addpopup "${sName}%${vio_y}" "$(((sXoffset+10)))" "${vio_y}" "antiquewhite" "${sAttributelist}"
              #addpopup "${sName}%${vio_y}" "$(((sXoffset+10)))" "${vio_y}" "${sColor}" "${sAttributelist}"
              ((sCount+=1))
            done
          fi
          sizeVioy=$(grep ${VioHostname[$y]}',' $vioHelp | cut -f 3 -d ',')
          ((hightVio=sizeVioy-vio_y))
          echo '<rect rx="5" ry="5" x="'$startx'" y="'$vio_y'" width="'$sizeViox'" height="'$hightVio'" fill="'${COLOR_VIO_PARTITION}'" style="stroke:black;stroke-width:1px"/>' >> $lanPicture

          echo "${PDRAW_VIOLPAR},${VioHostname[$y]},$(((startx+60))),$(((vio_y+45)))" >> $userobjectFile
          ((locText_x=startx+5))
          ((locText_y=vio_y+12))
          echo '<text x="'$locText_x'" y="'$locText_y'" style="font-size:14px">partition:</text>' >> $lanPicture
          attributeList="$(grep "${PDRAW_VIOLPAR},${ManagedSystem[$x]},${VioHostname[$y]}:" $configFile | cut -f2- -d ':')"
          ((locText_x=startx+60))
          echo '<text x="'$locText_x'" y="'$locText_y'" style="font-size:14px" onclick="displayAttributes(evt, '\'${VioHostname[$y]}\'')" onmouseover="show(evt, '\'${VioHostname[$y]}\'')" onmouseout="hide(evt, '\'${VioHostname[$y]}\'')">'${VioHostname[$y]}'</text>' >> $lanPicture
          addpopup "${VioHostname[$y]}" "${locText_x}" "${locText_y}" "${COLOR_VIO_PARTITION}" "${attributeList}"

          ((locText_x=startx+15))
          ((locText_y=locText_y+17))
          echo '<text x="'$locText_x'" y="'$locText_y'" style="font-size:14px">profile:</text>' >> $lanPicture
          curr_profile="$(getValue "${attributeList}" "curr_profile")"
          if [ ${#curr_profile} -eq 0 ]; then
            curr_profile="$(getValue "${attributeList}" "default_profile")"
          fi
          attributeList="$(grep "${PDRAW_PROFILE},${ManagedSystem[$x]},${VioHostname[$y]}:" $configFile | grep "name=${curr_profile}," | cut -f2- -d ':')"
          ((locText_x=startx+60))
          echo '<text x="'$locText_x'" y="'$locText_y'" style="font-size:14px" onclick="displayAttributes(evt, '\'${VioHostname[$y]}_${curr_profile}\'')" onmouseover="show(evt, '\'${VioHostname[$y]}_${curr_profile}\'')" onmouseout="hide(evt, '\'${VioHostname[$y]}_${curr_profile}\'')">'${curr_profile}'</text>' >> $lanPicture
          addpopup "${VioHostname[$y]}_${curr_profile}" "${locText_x}" "${locText_y}" "${COLOR_VIO_PARTITION}" "${attributeList}"

          ((vio_y=vio_y+hightVio+offsety))
          ((y=y+1))
        done

        ##########################################################################
        # process groupFile
        ##########################################################################
	if [ -f ${groupFile} ]; then
	  grep "GROUP:" ${groupFile} | sort -u | while read groupEntry
	  do
	    groupID="$(echo "${groupEntry}" | cut -f2 -d ":")"
            echo '<g id="'${groupID}'" class="line" onclick="clickgroup(evt, '\'${groupID}\'')" onmouseover="highlight(evt, '\'${groupID}\'')" onmouseout="unhighlight(evt, '\'${groupID}\'')">' >> $lanPicture
	    grep "${groupID}:" ${groupFile} | cut -f2- -d ":" >> $lanPicture
            echo '</g>' >> $lanPicture
	  done
	fi

        ##########################################################################
        # process user data new objects
        ##########################################################################
	unset clientlparOffset
        typeset -A clientlparOffset
        if [ -f ${ALLUSERDATA} ]; then
          # filter out the data based on type of object
	  > ${ALLUSERDATA}.tmp 
          grep "USERDATA,${ManagedSystem[$x]}," ${ALLUSERDATA} | grep -iE ",NEW,|,ENT,|,EN,|,FCS,|,FSCSI,|,VSCSI,|,${PDRAW_CLIENTLPAR},|,${PDRAW_VIOLPAR},|,IOSLOT," > ${ALLUSERDATA}.tmp
          if [ -f ${ALLUSERDATA}.tmp ]; then
            echo "processing ${viewType} user defined data" |${LOG}
            newStartx=$((startx-50))
            newStarty=$((starty-50))
            cat ${ALLUSERDATA}.tmp | while read entry
            do
              userData="$(echo "${entry}" | cut -f 1 -d ":" | cut -f2- -d ",")"
              userAttr="$(echo "${entry}" | cut -f2- -d ":")"
              echo "userData: ${userData} userAttr: ${userAttr}" |${LOG}
              objName="$(echo "${userData}" | cut -f 2 -d ",")"
              typeset -u userOp="$(echo "${userData}" | cut -f 3 -d ",")"
              userName="$(echo "${userData}" | cut -f 4 -d ",")"
              typeset -i userRelx="$(echo "${userData}" | cut -f 5 -d ",")"
              typeset -i userRely="$(echo "${userData}" | cut -f 6 -d ",")"
              typeset -u dataType="$(echo "${userData}" | cut -f 7 -d ",")"
              if [ "${userOp}" == "NEW" ]; then
                userObjName="$(echo "${userName}" | tr " " "_")"
                echo "create NEW userObjName: ${userObjName} attributes: ${userAttr}" |${LOG}
                # calculate position to display text
                if [ ${userRelx} -eq 0 ]; then
                  newText_x=${newStartx}
                else
                  newText_x=${userRelx}
       	        fi
                if [ ${userRely} -eq 0 ]; then
                  newText_y=${newStarty}
                else
                  newText_y=${userRely}
                fi

	        if [ "${dataType}" == "URL" ]; then
       	          echo '<a xlink:href="'$userAttr'" target="_blank"><text x="'$newText_x'" y="'$newText_y'" style="fill:'${COLOR_USER_DATA}';font-size:12px" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text></a>' >> $pictureFile
	        else
       	          echo '<text x="'$newText_x'" y="'$newText_y'" style="fill:'${COLOR_USER_DATA}';font-size:12px" onclick="displayAttributes(evt, '\'${userObjName}\'')" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text>' >> $pictureFile
		fi
                addpopup "${userObjName}" "${newText_x}" "${newText_y}" "${COLOR_USER_DATA}" "${userAttr}" "${dataType}"
                newStarty=$((newStarty+17))
              elif [ "${userOp}" == "ENT" ] || [ "${userOp}" == "EN" ] || [ "${userOp}" == "FCS" ] || [ "${userOp}" == "FSCSI" ] || [ "${userOp}" == "VSCSI" ] || [ "${userOp}" == "IOSLOT" ]; then
                userObjName="$(echo "${objName}_${userName}" | tr " " "_")"
                echo "create ${userOp} userObjName: ${userObjName} attributes: ${userAttr}" |${LOG}
                # calculate position to display text
                entEntry="$(grep "${userOp},${objName}" $userobjectFile)"
                if [ ${#entEntry} -gt 0 ]; then
                  typeset -i entText_x="$(echo "${entEntry}" | cut -f 3 -d ",")"
                  typeset -i entText_y="$(echo "${entEntry}" | cut -f 4 -d ",")"
                  fillcolor="$(echo "${entEntry}" | cut -f 5 -d ",")"
                  position="$(echo "${entEntry}" | cut -f 6 -d ",")"
	          if [ "${dataType}" == "URL" ]; then
       	            echo '<a xlink:href="'$userAttr'" target="_blank"><text x="'$entText_x'" y="'$entText_y'" style="fill:'${COLOR_USER_DATA}';font-size:10px" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text></a>' >> $pictureFile
	          else
       	            echo '<text x="'$entText_x'" y="'$entText_y'" style="fill:'${COLOR_USER_DATA}';font-size:10px" onclick="displayAttributes(evt, '\'${userObjName}\'')" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text>' >> $pictureFile
		  fi
                  addpopup "${userObjName}" "${entText_x}" "${entText_y}" "${fillcolor}" "${userAttr}" "${dataType}"
                  # get netaddr
                  if [ "${userOp}" == "EN" ]; then
                    netaddr="$(getValue "${userAttr}" "netaddr")"
                    if [ ${#netaddr} -gt 0 ]; then
		      if [ "${position}" == "right" ]; then
       	                echo '<text x="'$(((entText_x+35)))'" y="'$entText_y'" style="text-anchor:start;fill:'${COLOR_USER_DATA}';font-size:10px">'$netaddr'</text>' >> $pictureFile
		      else
       	                echo '<text x="'$(((entText_x-7)))'" y="'$entText_y'" style="text-anchor:end;fill:'${COLOR_USER_DATA}';font-size:10px">'$netaddr'</text>' >> $pictureFile
		      fi
                    fi
                  fi
                else
                  echo "could not locate \"${userOp},${objName}\" in userobjectFile: ${userobjectFile}" |${LOG}
                fi
              elif [ "${userOp}" == "${PDRAW_CLIENTLPAR}" ] || [ "${userOp}" == "${PDRAW_VIOLPAR}" ]; then
                userObjName="$(echo "${objName}_${userName}" | tr " " "_")"
                echo "create ${userOp} userObjName: ${userObjName} attributes: ${userAttr}" |${LOG}
                # calculate position to display text
                entEntry="$(grep "${userOp},${objName}," $userobjectFile)"
                if [ ${#entEntry} -gt 0 ]; then
                  typeset -i entText_x="$(echo "${entEntry}" | cut -f 3 -d ",")"
                  typeset -i entText_y="$(echo "${entEntry}" | cut -f 4 -d ",")"
                  typeset -i yCount=0
                  if [ ${#clientlparOffset["${objName}"]} ]; then
                    yCount=${clientlparOffset["${objName}"]}
                    clientlparOffset["${objName}"]=$((yCount+1))
                  else
                    clientlparOffset["${objName}"]=0
                  fi
                  echo "entText_y: ${entText_y}" |${LOG}
                  entText_y=$((entText_y+(yCount*15)))
                  echo "yCount: ${yCount}" |${LOG}
                  echo "entText_y: ${entText_y}" |${LOG}
	          if [ "${dataType}" == "URL" ]; then
       	            echo '<a xlink:href="'$userAttr'" target="_blank"><text x="'$entText_x'" y="'$entText_y'" style="fill:'${COLOR_USER_DATA}';font-size:10px" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text></a>' >> $pictureFile
	          else
       	            echo '<text x="'$entText_x'" y="'$entText_y'" style="fill:'${COLOR_USER_DATA}';font-size:10px" onclick="displayAttributes(evt, '\'${userObjName}\'')" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text>' >> $pictureFile
		  fi
                  addpopup "${userObjName}" "${entText_x}" "${entText_y}" "${COLOR_USER_DATA}" "${userAttr}" "${dataType}"
                else
                  echo "could not locate \"${userOp},${objName}\" in userobjectFile: ${userobjectFile}" |${LOG}
                fi
              fi
            done
          else
            echo "no user defined data for objName: ${objName}" |${LOG}
          fi
        fi

        ##########################################################################
        # process URL USERDATA
        ##########################################################################
	if [ -s ${ALLUSERDATA} ]; then
	  URLuserdataFile="${WORK_AREA}${ManagedSystem[$x]}_URLuserdata.dat"
          grep -E "^URL,?(CLIENTLPAR|VIOLPAR)," ${ALLUSERDATA}  > ${URLuserdataFile}
	  if [ -s ${URLuserdataFile} ]; then
	    cat ${URLuserdataFile} | while read userdataEntry
	    do
	      objectRef="$(echo "${userdataEntry}" | cut -f 2 -d ",")"
	      objectName="$(echo "${userdataEntry}" | cut -f 3 -d "," | cut -f 1 -d ":")"
	      objectData="$(echo "${userdataEntry}" | cut -f2- -d ":")"
	      urlref="$(getValue "${objectData}" "urlref")"
	      prefix="$(getValue "${objectData}" "prefix")"
	      suffix="$(getValue "${objectData}" "suffix")"
              # pick up all the client partitions and VIO servers
	      URLpartitionsFile="${WORK_AREA}${ManagedSystem[$x]}_URL_partitions.dat"
              grep -E "^${objectRef},?" ${configFile} | grep ",${ManagedSystem[$x]}," > ${URLpartitionsFile}
              if [ -s ${URLpartitionsFile} ]; then
                echo "processing ${viewType} user defined data" |${LOG}
                newStartx=$((startx-50))
                newStarty=$((starty-50))
                cat ${URLpartitionsFile} | while read entry
                do
                  objName="$(echo "${entry}" | cut -f 1 -d ":" | cut -f 3 -d ",")"
                  userName="${objectName}"
                  userObjName="$(echo "${objName}_${userName}" | tr " " "_")"
	          userAttr="${urlref%/}/${prefix}${objName}${suffix}"
                  echo "create ${objectRef} userObjName: ${userObjName}" |${LOG}
                  # calculate position to display text
                  entEntry="$(grep -E "^${objectRef},?" $userobjectFile | grep ",${objName},")"
                  if [ ${#entEntry} -gt 0 ]; then
                    typeset -i entText_x="$(echo "${entEntry}" | cut -f 3 -d ",")"
                    typeset -i entText_y="$(echo "${entEntry}" | cut -f 4 -d ",")"
                    typeset -i yCount=0
                    if [ ${#clientlparOffset["${objName}"]} ]; then
                      yCount=${clientlparOffset["${objName}"]}
                      clientlparOffset["${objName}"]=$((yCount+1))
                    else
                      clientlparOffset["${objName}"]=0
                    fi
                    echo "entText_y: ${entText_y}" |${LOG}
                    entText_y=$((entText_y+(yCount*15)))
                    echo "yCount: ${yCount}" |${LOG}
                    echo "entText_y: ${entText_y}" |${LOG}
       	            echo '<a xlink:href="'$userAttr'" target="_blank"><text x="'$entText_x'" y="'$entText_y'" style="fill:'${COLOR_USER_DATA}';font-size:10px" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text></a>' >> $pictureFile
                    addpopup "${userObjName}" "${entText_x}" "${entText_y}" "${COLOR_USER_DATA}" "${userAttr}" "URL"
                  else
                    echo "could not locate \"${objectRef},${objName}\" in userobjectFile: ${userobjectFile}" |${LOG}
                  fi
                done
              else
                echo "no URL partitions to process for managedsystem: ${ManagedSystem[$x]}" |${LOG}
              fi
	    done
	  fi
	fi
        ##########################################################################
        # process CPT reference for PDRAW_VIOLPAR and PDRAW_CLIENTLPAR
        ##########################################################################
	if [ ${#CPTHTMLREF} -gt 0 ]; then
	  echo "process CPTHTMLREF: ${CPTHTMLREF}" |${LOG}
          # pick up all the client partitions and VIO servers
	  CPTPARTITIONSDATA="${WORK_AREA}${ManagedSystem[$x]}_cpt_partitions.dat"
          grep -E "${PDRAW_VIOLPAR},|${PDRAW_CLIENTLPAR}," ${configFile} | grep ",${ManagedSystem[$x]}," > ${CPTPARTITIONSDATA}
          if [ -s ${CPTPARTITIONSDATA} ]; then
            echo "processing ${viewType} user defined data" |${LOG}
            newStartx=$((startx-50))
            newStarty=$((starty-50))
            cat ${CPTPARTITIONSDATA} | while read entry
            do
              objName="$(echo "${entry}" | cut -f 1 -d ":" | cut -f 3 -d ",")"
              userName="CPT-${objName}"
              userObjName="$(echo "${objName}_${userName}" | tr " " "_")"
	      userAttr="${CPTHTMLREF%/}/${objName}.htm"
              echo "create CLIENTLPAR userObjName: ${userObjName}" |${LOG}
              # calculate position to display text
              entEntry="$(grep -E "${PDRAW_VIOLPAR},|${PDRAW_CLIENTLPAR}," $userobjectFile | grep ",${objName},")"
              if [ ${#entEntry} -gt 0 ]; then
                typeset -i entText_x="$(echo "${entEntry}" | cut -f 3 -d ",")"
                typeset -i entText_y="$(echo "${entEntry}" | cut -f 4 -d ",")"
                typeset -i yCount=0
                if [ ${#clientlparOffset["${objName}"]} ]; then
                  yCount=${clientlparOffset["${objName}"]}
                  clientlparOffset["${objName}"]=$((yCount+1))
                else
                  clientlparOffset["${objName}"]=0
                fi
                echo "entText_y: ${entText_y}" |${LOG}
                entText_y=$((entText_y+(yCount*15)))
                echo "yCount: ${yCount}" |${LOG}
                echo "entText_y: ${entText_y}" |${LOG}
       	        echo '<a xlink:href="'$userAttr'" target="_blank"><text x="'$entText_x'" y="'$entText_y'" style="fill:'${COLOR_USER_DATA}';font-size:10px" onmouseover="show(evt, '\'${userObjName}\'')" onmouseout="hide(evt, '\'${userObjName}\'')">'$userName'</text></a>' >> $pictureFile
                addpopup "${userObjName}" "${entText_x}" "${entText_y}" "${COLOR_USER_DATA}" "${userAttr}" "URL"
              else
                echo "could not locate \"${PDRAW_CLIENTLPAR},${objName}\" in userobjectFile: ${userobjectFile}" |${LOG}
              fi
            done
          else
            echo "no CPT partitions to process for managedsystem: ${ManagedSystem[$x]}" |${LOG}
          fi
	fi

        ##############################################################################
        # write temp file to SVG
        ##############################################################################
        cat $pictureFile >> $lanPicture
	processaddpopup
        cat $picturePopupFile >> $lanPicture
        echo "</svg>" >> $lanPicture

        ##############################################################################
        # if output file specified rename file
        ##############################################################################
	outFile="${DRAW_GRAPHICS}${OUTPUTNAME}_${ManagedSystem[$x]}_${viewType}.svg"
        cp -f -p "${lanPicture}" "${outFile}" 1>>${LOG_FILE} 2>>${LOG_FILE}
        RC=${?}
        if [ ${RC} -eq 0 ]; then
          successInfo "Created graphics file: ${outFile}, rc=${saveRC}"
        else
          saveRC=${RC}
          errorInfo "Failed to create graphics file: ${outFile}, rc=${saveRC}"
        fi
        RC=${saveRC}

        #############################################################################
        # make html file
        #############################################################################
        # echo '<HTML><HEAD><TITLE></TITLE></HEAD>' > $htmlFile
        # echo '<embed src="'${ManagedSystem[$x]}'_${viewType}.svg" width="'$sizePicturex'" height="'$pictureSize_y'" type="image/svg+xml">' >> $htmlFile
        # echo '<BODY></BODY></HTML>' >> $htmlFile

        #############################################################################
        # delete help files
        #############################################################################
        #rm $vioHelp >> /dev/null 2>&1
        #rm $vlanHelp >> /dev/null 2>&1
        #rm $seaHelp >> /dev/null 2>&1
        #rm $ethHelp >> /dev/null 2>&1
        #rm $pictureFile >> /dev/null 2>&1
        #rm $helpFile >> /dev/null 2>&1
      else
        echo "do not generate graphics files for managedsystem: ${ManagedSystem[$x]}" |${LOG}
      fi
      ((x=x+1))
    done
  done 
  RC=${saveRC} 

  echo "<-- draw, RC=${RC}" |${LOG}
}

#=============================================================================
# FUNCTION NAME:        parse_program_parameters
#=============================================================================
function parse_program_parameters {
  saveRC=0
  ###################
  #  process flags  #
  ###################
  while getopts p:h:u:m:a:f:x:d:l:no:i:c:es: c 2>/dev/null ; do    # a : Implies a passed parm, while no : is a flag
    case $c in
      # Operation to execute capture,draw
      f) OPERATIONS=${OPTARG} ;
      ;;
      # draw profile
      p) DRAWPROFILE=${OPTARG};
      ;;
      # HMC name
      h) HMCNAME=${OPTARG};
      ;;
      # HMC username
      u) HMCUSER=${OPTARG};
      ;;
      # HMC username
      m) MANAGEDSYSTEMS=${OPTARG};
      ;;
      x) POSTSCRIPT=${OPTARG};
      ;;   
      # user defined attributes
      a) USERDATAFILES=${OPTARG};
      ;;   
      d) RUNID=${OPTARG};
         WORK_AREA="work_area/${RUNID}_"
         DEBUG=1
      ;;   
      i) CONFIGINPUTFILE=${OPTARG};
      ;;   
      o) OUTPUTNAME="${OPTARG}";
      ;;   
      l) PARTITIONLIST=${OPTARG};
      ;;   
      c) CPTHTMLREF=${OPTARG};
      ;;   
      e) EXTENDEDATTR=0;
      ;;   
      s) SSHOPTIONS="-i ${OPTARG}";
      ;;   
      n) RUNIT="Y" ;
         echo "invoked with noprompt option"
      ;;   
      # print usage
      *) echo $USAGE
         RC=${RC_BADPARM} 
      ;;
    esac
  done
  #####################################
  # check parms passed in on invocation
  #####################################
  if [ ${#OPERATIONS} -eq 0 ]; then
    saveRC=${RC_BADPARM}
    errorInfo "Missing -f command specification. Specify capture and/or draw, rc=${saveRC}"
  fi

  testCapture="$(echo "${OPERATIONS}" | grep -w "capture")"
  testDraw="$(echo "${OPERATIONS}" | grep -w "draw")"
  if [ ${#HMCNAME} -eq 0 ] && [ ${#testCapture} -gt 0 ]; then
    saveRC=${RC_BADPARM}
    errorInfo "Missing -h hmcName specification, rc=${saveRC}"
  fi

  if [ ${#CONFIGINPUTFILE} -gt 0 ]; then
    REALCONFIGINPUTFILE="${DRAW_CAPTURES}${CONFIGINPUTFILE}"
    if [ -f "${REALCONFIGINPUTFILE}" -gt 0 ]; then
      configFile="${REALCONFIGINPUTFILE}"
      # set HMCNAME from information in configFile
      HMCNAME="$(grep -E "${PDRAW_HMC},[[:print:]]*:" $configFile | cut -f 2 -d "," | cut -f 1 -d ":")"
      # build managedsystems list based on partitions
      if [ ${#PARTITIONLIST} -gt 0 ] && [ ${#MANAGEDSYSTEMS} -eq 0 ] &&  \
        ( [ "$(echo "draw" | grep -E "${OPERATIONS}")" == "draw" ] || \
        [ "$(echo "drawnetwork" | grep -E "${OPERATIONS}")" == "drawnetwork" ] || \
        [ "$(echo "drawstorage" | grep -E "${OPERATIONS}")" == "drawstorage" ] || \
        [ "$(echo "drawvnic" | grep -E "${OPERATIONS}")" == "drawvnic" ] || \
        [ "$(echo "drawall" | grep -E "${OPERATIONS}")" == "drawall" ] ); then
	tmpPARTITIONLIST=",$(echo "${PARTITIONLIST}" | sed -e "s/,/\:\|,/g"):"
        MANAGEDSYSTEMS="$(grep -E "${PDRAW_VIOLPAR},|${PDRAW_CLIENTLPAR}," $configFile | grep -E "${tmpPARTITIONLIST}" | cut -f 2 -d "," | sort -u | tr "\n" ",")"
	MANAGEDSYSTEMS="${MANAGEDSYSTEMS%,}"
	echo "tmpPARTITIONLIST: ${tmpPARTITIONLIST}" |${LOG}
	echo "MANAGEDSYSTEMS: ${MANAGEDSYSTEMS}" |${LOG}
	if [ ${#MANAGEDSYSTEMS} -eq 0 ]; then
          saveRC=${RC_COULD_NOT_LOCATE_CLEINT_PARTITION}
          errorInfo "Could not locate one or more of the specified partitions in the input configuration file: ${configFile} partion list: ${PARTITIONLIST}, rc=${saveRC}"
	fi
      fi
    else
      saveRC=${RC_COULD_NOT_LOCATE_CONFIGURATION_INPUT_FILE}
      errorInfo "Could not locate configuration input file: ${CONFIGINPUTFILE}, rc=${saveRC}"
    fi
  elif [ "${OPERATIONS}" == "draw" ]; then
    saveRC=${RC_BADPARM}
    errorInfo "Missing -i input capture file specification, rc=${saveRC}"
  fi

  if [ ${#OUTPUTNAME} -eq 0 ]; then
    saveRC=${RC_BADPARM}
    errorInfo "Missing -o output file name specification, rc=${saveRC}"
  fi

  if [ ${#USERDATAFILES} -gt 0 ]; then
    echo "${USERDATAFILES}" | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read userDataFile
    do
      if [ -f "${DRAW_USERDATA}${userDataFile}" ]; then
        fileReadClean "${DRAW_USERDATA}${userDataFile}" "${ALLUSERDATA}"
        RC=${?}
	if [ ${RC} -gt 0 ]; then
          errorInfo "Problem processing user data file in fileReadCLean: ${DRAW_USERDATA}${userDataFile}, rc=${RC}"
          saveRC=${RC}
	fi
      else
        # user defined data file does not exist.
        saveRC=${RC_COULD_NOT_LOCATE_USER_DEFINED_DATAFILE}
        errorInfo "The specified user defined data file does not exist: ${DRAW_USERDATA}${userDataFile}, rc=${saveRC}"
      fi
    done
    # set user specified colors
    if [ ${saveRC} -eq 0 ] && [ -s ${ALLUSERDATA} ]; then
      grep "${PDRAW_COLOR}," ${ALLUSERDATA} | while read colorLine
      do
        echo "${colorLine}" | cut -f2- -d "," | awk '{numP=split($0, Array, ","); for(i=1; i<=numP; i++) print Array[i]}' | while read colorEntry
	do
	  typeset -u colorKey="$(echo "${colorEntry}" | cut -f 1 -d "=")"
	  typeset -l colorValue="$(echo "${colorEntry}" | cut -f 2 -d "=")"
	  echo "colorKey: ${colorKey} colorValue: ${colorValue}" |${LOG}
	  if [ "${colorKey}" == "CLIENT_PARTITION" ]; then
	    COLOR_CLIENT_PARTITION="${colorValue}"
	  elif [ "${colorKey}" == "VIO_PARTITION" ]; then
	    COLOR_VIO_PARTITION="${colorValue}"
	  elif [ "${colorKey}" == "ETHERNET_PHYSPORT" ]; then
	    COLOR_ETHERNET_PHYSPORT="${colorValue}"
	  elif [ "${colorKey}" == "SEA" ]; then
	    COLOR_SEA="${colorValue}"
	  elif [ "${colorKey}" == "ETHERCHANNEL" ]; then
	    COLOR_ETHERCHANNEL="${colorValue}"
	  elif [ "${colorKey}" == "VIRTUAL_ETHERNET" ]; then
	    COLOR_VIRTUAL_ETHERNET="${colorValue}"
	  elif [ "${colorKey}" == "CONTROL_CHANNEL" ]; then
	    COLOR_CONTROL_CHANNEL="${colorValue}"
	  elif [ "${colorKey}" == "VLAN" ]; then
	    COLOR_VLAN="${colorValue}"
	  elif [ "${colorKey}" == "VIRTUAL_SCSI" ]; then
	    COLOR_VIRTUAL_SCSI="${colorValue}"
	  elif [ "${colorKey}" == "VIRTUAL_FC" ]; then
	    COLOR_VIRTUAL_FC="${colorValue}"
	  elif [ "${colorKey}" == "SRIOV_ADAPTER" ]; then
	    COLOR_SRIOV_ADAPTER="${colorValue}"
	  elif [ "${colorKey}" == "SRIOV_PHYSPORT" ]; then
	    COLOR_SRIOV_PHYSPORT="${colorValue}"
	  elif [ "${colorKey}" == "SRIOV_LOGPORT" ]; then
	    COLOR_SRIOV_LOGPORT="${colorValue}"
	  elif [ "${colorKey}" == "VNIC_BKDEV" ]; then
	    COLOR_VNIC_BKDEV="${colorValue}"
	  elif [ "${colorKey}" == "VIRTUAL_VNIC" ]; then
	    COLOR_VIRTUAL_VNIC="${colorValue}"
	  elif [ "${colorKey}" == "CLIENT_VHOST" ]; then
	    COLOR_CLIENT_VHOST="${colorValue}"
	  elif [ "${colorKey}" == "UNBRIDGED_VLANS" ]; then
	    COLOR_UNBRIDGED_VLANS="${colorValue}"
	  elif [ "${colorKey}" == "USER_DATA" ]; then
	    COLOR_USER_DATA="${colorValue}"
	  elif [ "${colorKey}" == "VSWITCH_CONNECTOR" ]; then
	    COLOR_VSWITCH_CONNECTOR="${colorValue}"
	  elif [ "${colorKey}" == "VSWITCH_INTERNAL_CONNECTOR" ]; then
	    COLOR_VSWITCH_INTERNAL_CONNECTOR="${colorValue}"
	  elif [ "${colorKey}" == "FC_CONNECTOR" ]; then
	    COLOR_FC_CONNECTOR="${colorValue}"
	  elif [ "${colorKey}" == "ISCSI_CONNECTOR" ]; then
	    COLOR_ISCSI_CONNECTOR="${colorValue}"
	  elif [ "${colorKey}" == "VNIC_CONNECTOR" ]; then
	    COLOR_VNIC_CONNECTOR="${colorValue}"
	  elif [ "${colorKey}" == "IOSLOT" ]; then
	    COLOR_IOSLOT="${colorValue}"
	  else
            # user defined data file does not exist.
            saveRC=${RC_USER_DEFINED_DATA_FOR_COLOR_INVALID}
            errorInfo "The specified user defined data for COLOR key is not valid: colorKey: ${colorKey}, rc=${saveRC}"
	  fi
	done 
      done
    fi
  fi

  if [ ${#POSTSCRIPT} -gt 0 ]; then
    which "${POSTSCRIPT}" 1>>${LOG_FILE} 2>>${LOG_FILE}
    RC=${?}
    if [ ${RC} -gt 0 ]; then
      # postscript does not exist.
      errorInfo "The specified postscript does not exist: ${POSTSCRIPT}, rc=${RC}"
      POSTSCRIPTRC=${RC}
      saveRC=${RC}
    fi
  fi  

  RC=${saveRC}  
  if [ ${saveRC} -gt 0 ] && [ ${saveRC} -eq ${RC_BADPARM} ]; then
    echo "\nYou entered:"
    echo "${PROGRAM} $*"
    echo "usage:"
    echo "${USAGE}"
  fi

  return $RC
}

##############################################################################
##############################################################################
#
# 	MAIN
#
#############################################################################
#############################################################################

  # Catch exit sigs
  trap 'vios_exit 99' 1 2 11 15

  ####################################################
  # make sure directories exist
  ####################################################
  if [ ! -d work_area ]; then
    echo "creating directory: work_area"
    mkdir work_area
  fi
  if [ ! -d draw_captures ]; then
    echo "creating directory: draw_captures"
    mkdir draw_captures
  fi
  if [ ! -d draw_graphics ]; then
    echo "creating directory: draw_graphics"
    mkdir draw_graphics
  fi
  if [ ! -d draw_userdata ]; then
    echo "creating directory: draw_userdata"
    mkdir draw_userdata
  fi

  ####################################################
  # set global variables
  ####################################################
  #startx=200
  startx=130
  starty=150
  offsety=100  
  sizeViox=250
  clientSize_x=300
  OPERATION=""
  typeset -l OPERATIONS=""
  operSep=""
  hmcVersion=""
  hmcMtm=""
  # v10.17
  sriov_physport_x=0
  sriov_physport_y=0
  typeset -A switchArray
  ####################################################
  # Parse command line options -- determine operation
  ####################################################
  parse_program_parameters $@ 
  RC=${?}
  if [ ${RC} -ne 0 ]; then
    vios_exit ${RC}
  fi

  PGMNAME=${0##*/}
  INSTALLDIR="$(pwd)"

  if [ ${#HMCUSER} -eq 0 ]; then
    HMCUSER="hscroot"
  fi

  echo "Start of drawframe DATE: (${RUNID}) VERSION: ${VERSION}"    |${LOGBOTH}
  echo "  program name: ${PGMNAME}"                                 |${LOGBOTH}
  echo "       profile: ${DRAWPROFILE}"                             |${LOGBOTH}
  echo "     operation: ${OPERATIONS}"                              |${LOGBOTH}
  echo "        run ID: ${RUNID}"                                   |${LOGBOTH}
  echo "      log file: ${LOG_FILE}"                                |${LOGBOTH}
  echo "       HMCNAME: ${HMCNAME}"                                 |${LOGBOTH}
  echo "       HMCUSER: ${HMCUSER}"                                 |${LOGBOTH}
  echo " input Capture: ${CONFIGINPUTFILE}"                         |${LOGBOTH}
  echo "     User Data: ${USERDATAFILES}"                           |${LOGBOTH}
  echo "    OUTPUTNAME: ${OUTPUTNAME}"                              |${LOGBOTH}
  echo " PARTITIONLIST: ${PARTITIONLIST}"                           |${LOGBOTH}
  echo "MANAGEDSYSTEMS: ${MANAGEDSYSTEMS}"                          |${LOGBOTH}
  echo "   post script: ${POSTSCRIPT}"                              |${LOGBOTH}
  echo "    SSHOPTIONS: ${SSHOPTIONS}"                              |${LOGBOTH}
  echo "         DEBUG: ${DEBUG}"                                   |${LOG}

  drawflag=0
  echo "${OPERATIONS}" | awk '{numops=split($0, opArray, ","); for(i=1; i<=numops; i++) print opArray[i]}' | while read opCommand
  do
    if [ ${opCommand} == "capture" ] ; then
      echo " EXTENDED ATTR: ${EXTENDEDATTR}"                            |${LOGBOTH}
      OPERATION="${OPERATION}${operSep}$opCommand"
    elif [ ${opCommand} == "draw" ] ; then
      DRAWOPS="NETWORK STORAGE VNIC ALL"
      OPERATION="${OPERATION}${operSep}$opCommand"
    elif [ ${opCommand} == "drawall" ] ; then
      DRAWOPS="${DRAWOPS}${DRAWOPSSEP}ALL"
      DRAWOPSSEP=" "
      drawflag=1
    elif [ ${opCommand} == "drawnetwork" ] ; then
      DRAWOPS="${DRAWOPS}${DRAWOPSSEP}NETWORK"
      DRAWOPSSEP=" "
      drawflag=1
    elif [ ${opCommand} == "drawstorage" ] ; then
      DRAWOPS="${DRAWOPS}${DRAWOPSSEP}STORAGE"
      DRAWOPSSEP=" "
      drawflag=1
    elif [ ${opCommand} == "drawvnic" ] ; then
      DRAWOPS="${DRAWOPS}${DRAWOPSSEP}VNIC"
      DRAWOPSSEP=" "
      drawflag=1
    else  
      echo "The specified frame command is not valid: ${opCommand}" |${LOGBOTH}
      echo "                                   usage: ${USAGE}"     |${LOGBOTH}
      RC=${RC_BADPARM};
    fi
    if [ ${#OPERATION} -gt 0 ]; then
      operSep="|"
    fi  
  done
  if [ ${drawflag} -eq 1 ]; then
    OPERATION="${OPERATION}${operSep}draw"
  fi
  echo "OPERATION: ${OPERATION}" |${LOG}

  cmdCount=0
  echo "${OPERATION}" | awk '{numops=split($0, opArray, "|"); for(i=1; i<=numops; i++) print opArray[i]}' | while read opCommand
  do
    commandArray[${cmdCount}]="${opCommand}"
    cmdCount=$((cmdCount+1))
  done
  cmdCount=0
  while [ ${cmdCount} -lt ${#commandArray[*]} ] && [ ${RC} -eq 0 ]
  do
    opCommand="${commandArray[${cmdCount}]}"
    case $opCommand in
      "capture")
         capture ||RC=$?
      ;;
      "draw")
         draw ||RC=$?
      ;;
      *) echo "Error: unrecognized operation parameter $opCommand"  |${LOGBOTH}
         RC=$RC_BADPARM
      ;;
    esac
    cmdCount=$((cmdCount+1))
  done

  if [ ${RC} -ne 0 ]; then
    echo "Please review the log file, ${LOG_FILE}, for problem identification." |${LOGBOTH}
  fi

vios_exit $RC
